/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
import * as tslib_1 from "tslib";
import * as msRest from "@azure/ms-rest-js";
import * as Mappers from "../models/appServiceCertificateOrdersMappers";
import * as Parameters from "../models/parameters";
/** Class representing a AppServiceCertificateOrders. */
var AppServiceCertificateOrders = /** @class */ (function () {
    /**
     * Create a AppServiceCertificateOrders.
     * @param {WebSiteManagementClientContext} client Reference to the service client.
     */
    function AppServiceCertificateOrders(client) {
        this.client = client;
    }
    AppServiceCertificateOrders.prototype.list = function (options, callback) {
        return this.client.sendOperationRequest({
            options: options
        }, listOperationSpec, callback);
    };
    AppServiceCertificateOrders.prototype.validatePurchaseInformation = function (appServiceCertificateOrder, options, callback) {
        return this.client.sendOperationRequest({
            appServiceCertificateOrder: appServiceCertificateOrder,
            options: options
        }, validatePurchaseInformationOperationSpec, callback);
    };
    AppServiceCertificateOrders.prototype.listByResourceGroup = function (resourceGroupName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            options: options
        }, listByResourceGroupOperationSpec, callback);
    };
    AppServiceCertificateOrders.prototype.get = function (resourceGroupName, certificateOrderName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            certificateOrderName: certificateOrderName,
            options: options
        }, getOperationSpec, callback);
    };
    /**
     * Create or update a certificate purchase order.
     * @summary Create or update a certificate purchase order.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param certificateOrderName Name of the certificate order.
     * @param certificateDistinguishedName Distinguished name to use for the certificate order.
     * @param [options] The optional parameters
     * @returns Promise<Models.AppServiceCertificateOrdersCreateOrUpdateResponse>
     */
    AppServiceCertificateOrders.prototype.createOrUpdate = function (resourceGroupName, certificateOrderName, certificateDistinguishedName, options) {
        return this.beginCreateOrUpdate(resourceGroupName, certificateOrderName, certificateDistinguishedName, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    AppServiceCertificateOrders.prototype.deleteMethod = function (resourceGroupName, certificateOrderName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            certificateOrderName: certificateOrderName,
            options: options
        }, deleteMethodOperationSpec, callback);
    };
    AppServiceCertificateOrders.prototype.update = function (resourceGroupName, certificateOrderName, certificateDistinguishedName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            certificateOrderName: certificateOrderName,
            certificateDistinguishedName: certificateDistinguishedName,
            options: options
        }, updateOperationSpec, callback);
    };
    AppServiceCertificateOrders.prototype.listCertificates = function (resourceGroupName, certificateOrderName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            certificateOrderName: certificateOrderName,
            options: options
        }, listCertificatesOperationSpec, callback);
    };
    AppServiceCertificateOrders.prototype.getCertificate = function (resourceGroupName, certificateOrderName, name, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            certificateOrderName: certificateOrderName,
            name: name,
            options: options
        }, getCertificateOperationSpec, callback);
    };
    /**
     * Creates or updates a certificate and associates with key vault secret.
     * @summary Creates or updates a certificate and associates with key vault secret.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param certificateOrderName Name of the certificate order.
     * @param name Name of the certificate.
     * @param keyVaultCertificate Key vault certificate resource Id.
     * @param [options] The optional parameters
     * @returns Promise<Models.AppServiceCertificateOrdersCreateOrUpdateCertificateResponse>
     */
    AppServiceCertificateOrders.prototype.createOrUpdateCertificate = function (resourceGroupName, certificateOrderName, name, keyVaultCertificate, options) {
        return this.beginCreateOrUpdateCertificate(resourceGroupName, certificateOrderName, name, keyVaultCertificate, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    AppServiceCertificateOrders.prototype.deleteCertificate = function (resourceGroupName, certificateOrderName, name, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            certificateOrderName: certificateOrderName,
            name: name,
            options: options
        }, deleteCertificateOperationSpec, callback);
    };
    AppServiceCertificateOrders.prototype.updateCertificate = function (resourceGroupName, certificateOrderName, name, keyVaultCertificate, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            certificateOrderName: certificateOrderName,
            name: name,
            keyVaultCertificate: keyVaultCertificate,
            options: options
        }, updateCertificateOperationSpec, callback);
    };
    AppServiceCertificateOrders.prototype.reissue = function (resourceGroupName, certificateOrderName, reissueCertificateOrderRequest, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            certificateOrderName: certificateOrderName,
            reissueCertificateOrderRequest: reissueCertificateOrderRequest,
            options: options
        }, reissueOperationSpec, callback);
    };
    AppServiceCertificateOrders.prototype.renew = function (resourceGroupName, certificateOrderName, renewCertificateOrderRequest, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            certificateOrderName: certificateOrderName,
            renewCertificateOrderRequest: renewCertificateOrderRequest,
            options: options
        }, renewOperationSpec, callback);
    };
    AppServiceCertificateOrders.prototype.resendEmail = function (resourceGroupName, certificateOrderName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            certificateOrderName: certificateOrderName,
            options: options
        }, resendEmailOperationSpec, callback);
    };
    AppServiceCertificateOrders.prototype.resendRequestEmails = function (resourceGroupName, certificateOrderName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            certificateOrderName: certificateOrderName,
            options: options
        }, resendRequestEmailsOperationSpec, callback);
    };
    AppServiceCertificateOrders.prototype.retrieveSiteSeal = function (resourceGroupName, certificateOrderName, siteSealRequest, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            certificateOrderName: certificateOrderName,
            siteSealRequest: siteSealRequest,
            options: options
        }, retrieveSiteSealOperationSpec, callback);
    };
    AppServiceCertificateOrders.prototype.verifyDomainOwnership = function (resourceGroupName, certificateOrderName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            certificateOrderName: certificateOrderName,
            options: options
        }, verifyDomainOwnershipOperationSpec, callback);
    };
    AppServiceCertificateOrders.prototype.retrieveCertificateActions = function (resourceGroupName, name, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            options: options
        }, retrieveCertificateActionsOperationSpec, callback);
    };
    AppServiceCertificateOrders.prototype.retrieveCertificateEmailHistory = function (resourceGroupName, name, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            options: options
        }, retrieveCertificateEmailHistoryOperationSpec, callback);
    };
    /**
     * Create or update a certificate purchase order.
     * @summary Create or update a certificate purchase order.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param certificateOrderName Name of the certificate order.
     * @param certificateDistinguishedName Distinguished name to use for the certificate order.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    AppServiceCertificateOrders.prototype.beginCreateOrUpdate = function (resourceGroupName, certificateOrderName, certificateDistinguishedName, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            certificateOrderName: certificateOrderName,
            certificateDistinguishedName: certificateDistinguishedName,
            options: options
        }, beginCreateOrUpdateOperationSpec, options);
    };
    /**
     * Creates or updates a certificate and associates with key vault secret.
     * @summary Creates or updates a certificate and associates with key vault secret.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param certificateOrderName Name of the certificate order.
     * @param name Name of the certificate.
     * @param keyVaultCertificate Key vault certificate resource Id.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    AppServiceCertificateOrders.prototype.beginCreateOrUpdateCertificate = function (resourceGroupName, certificateOrderName, name, keyVaultCertificate, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            certificateOrderName: certificateOrderName,
            name: name,
            keyVaultCertificate: keyVaultCertificate,
            options: options
        }, beginCreateOrUpdateCertificateOperationSpec, options);
    };
    AppServiceCertificateOrders.prototype.listNext = function (nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, listNextOperationSpec, callback);
    };
    AppServiceCertificateOrders.prototype.listByResourceGroupNext = function (nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, listByResourceGroupNextOperationSpec, callback);
    };
    AppServiceCertificateOrders.prototype.listCertificatesNext = function (nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, listCertificatesNextOperationSpec, callback);
    };
    return AppServiceCertificateOrders;
}());
export { AppServiceCertificateOrders };
// Operation Specifications
var serializer = new msRest.Serializer(Mappers);
var listOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/providers/Microsoft.CertificateRegistration/certificateOrders",
    urlParameters: [
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.AppServiceCertificateOrderCollection
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var validatePurchaseInformationOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/providers/Microsoft.CertificateRegistration/validateCertificateRegistrationInformation",
    urlParameters: [
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "appServiceCertificateOrder",
        mapper: tslib_1.__assign({}, Mappers.AppServiceCertificateOrder, { required: true })
    },
    responses: {
        204: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var listByResourceGroupOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.AppServiceCertificateOrderCollection
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var getOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{certificateOrderName}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.certificateOrderName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.AppServiceCertificateOrder
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var deleteMethodOperationSpec = {
    httpMethod: "DELETE",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{certificateOrderName}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.certificateOrderName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {},
        204: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var updateOperationSpec = {
    httpMethod: "PATCH",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{certificateOrderName}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.certificateOrderName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "certificateDistinguishedName",
        mapper: tslib_1.__assign({}, Mappers.AppServiceCertificateOrderPatchResource, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.AppServiceCertificateOrder
        },
        201: {
            bodyMapper: Mappers.AppServiceCertificateOrder
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var listCertificatesOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{certificateOrderName}/certificates",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.certificateOrderName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.AppServiceCertificateCollection
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var getCertificateOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{certificateOrderName}/certificates/{name}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.certificateOrderName,
        Parameters.name,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.AppServiceCertificateResource
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var deleteCertificateOperationSpec = {
    httpMethod: "DELETE",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{certificateOrderName}/certificates/{name}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.certificateOrderName,
        Parameters.name,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {},
        204: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var updateCertificateOperationSpec = {
    httpMethod: "PATCH",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{certificateOrderName}/certificates/{name}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.certificateOrderName,
        Parameters.name,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "keyVaultCertificate",
        mapper: tslib_1.__assign({}, Mappers.AppServiceCertificatePatchResource, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.AppServiceCertificateResource
        },
        201: {
            bodyMapper: Mappers.AppServiceCertificateResource
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var reissueOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{certificateOrderName}/reissue",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.certificateOrderName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "reissueCertificateOrderRequest",
        mapper: tslib_1.__assign({}, Mappers.ReissueCertificateOrderRequest, { required: true })
    },
    responses: {
        204: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var renewOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{certificateOrderName}/renew",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.certificateOrderName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "renewCertificateOrderRequest",
        mapper: tslib_1.__assign({}, Mappers.RenewCertificateOrderRequest, { required: true })
    },
    responses: {
        204: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var resendEmailOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{certificateOrderName}/resendEmail",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.certificateOrderName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        204: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var resendRequestEmailsOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{certificateOrderName}/resendRequestEmails",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.certificateOrderName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: {
            name: [
                "options",
                "name"
            ]
        },
        mapper: tslib_1.__assign({}, Mappers.NameIdentifier, { required: true })
    },
    responses: {
        204: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var retrieveSiteSealOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{certificateOrderName}/retrieveSiteSeal",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.certificateOrderName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "siteSealRequest",
        mapper: tslib_1.__assign({}, Mappers.SiteSealRequest, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.SiteSeal
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var verifyDomainOwnershipOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{certificateOrderName}/verifyDomainOwnership",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.certificateOrderName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        204: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var retrieveCertificateActionsOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{name}/retrieveCertificateActions",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "CertificateOrderAction"
                        }
                    }
                }
            }
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var retrieveCertificateEmailHistoryOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{name}/retrieveEmailHistory",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "CertificateEmail"
                        }
                    }
                }
            }
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var beginCreateOrUpdateOperationSpec = {
    httpMethod: "PUT",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{certificateOrderName}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.certificateOrderName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "certificateDistinguishedName",
        mapper: tslib_1.__assign({}, Mappers.AppServiceCertificateOrder, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.AppServiceCertificateOrder
        },
        201: {
            bodyMapper: Mappers.AppServiceCertificateOrder
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var beginCreateOrUpdateCertificateOperationSpec = {
    httpMethod: "PUT",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{certificateOrderName}/certificates/{name}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.certificateOrderName,
        Parameters.name,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "keyVaultCertificate",
        mapper: tslib_1.__assign({}, Mappers.AppServiceCertificateResource, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.AppServiceCertificateResource
        },
        201: {
            bodyMapper: Mappers.AppServiceCertificateResource
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var listNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.AppServiceCertificateOrderCollection
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var listByResourceGroupNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.AppServiceCertificateOrderCollection
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var listCertificatesNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.AppServiceCertificateCollection
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
//# sourceMappingURL=appServiceCertificateOrders.js.map