import * as msRest from "@azure/ms-rest-js";
import * as msRestAzure from "@azure/ms-rest-azure-js";
import * as Models from "../models";
import { WebSiteManagementClientContext } from "../webSiteManagementClientContext";
/** Class representing a WebApps. */
export declare class WebApps {
    private readonly client;
    /**
     * Create a WebApps.
     * @param {WebSiteManagementClientContext} client Reference to the service client.
     */
    constructor(client: WebSiteManagementClientContext);
    /**
     * Get all apps for a subscription.
     * @summary Get all apps for a subscription.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsListResponse>
     */
    list(options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListResponse>;
    /**
     * @param callback The callback
     */
    list(callback: msRest.ServiceCallback<Models.WebAppCollection>): void;
    /**
     * @param options The optional parameters
     * @param callback The callback
     */
    list(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.WebAppCollection>): void;
    /**
     * Gets all web, mobile, and API apps in the specified resource group.
     * @summary Gets all web, mobile, and API apps in the specified resource group.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsListByResourceGroupResponse>
     */
    listByResourceGroup(resourceGroupName: string, options?: Models.WebAppsListByResourceGroupOptionalParams): Promise<Models.WebAppsListByResourceGroupResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param callback The callback
     */
    listByResourceGroup(resourceGroupName: string, callback: msRest.ServiceCallback<Models.WebAppCollection>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param options The optional parameters
     * @param callback The callback
     */
    listByResourceGroup(resourceGroupName: string, options: Models.WebAppsListByResourceGroupOptionalParams, callback: msRest.ServiceCallback<Models.WebAppCollection>): void;
    /**
     * Gets the details of a web, mobile, or API app.
     * @summary Gets the details of a web, mobile, or API app.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsGetResponse>
     */
    get(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsGetResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param callback The callback
     */
    get(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<Models.Site>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param options The optional parameters
     * @param callback The callback
     */
    get(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Site>): void;
    /**
     * Creates a new web, mobile, or API app in an existing resource group, or updates an existing app.
     * @summary Creates a new web, mobile, or API app in an existing resource group, or updates an
     * existing app.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Unique name of the app to create or update. To create or update a deployment slot,
     * use the {slot} parameter.
     * @param siteEnvelope A JSON representation of the app properties. See example.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsCreateOrUpdateResponse>
     */
    createOrUpdate(resourceGroupName: string, name: string, siteEnvelope: Models.Site, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsCreateOrUpdateResponse>;
    /**
     * Deletes a web, mobile, or API app, or one of the deployment slots.
     * @summary Deletes a web, mobile, or API app, or one of the deployment slots.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app to delete.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    deleteMethod(resourceGroupName: string, name: string, options?: Models.WebAppsDeleteMethodOptionalParams): Promise<msRest.RestResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app to delete.
     * @param callback The callback
     */
    deleteMethod(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app to delete.
     * @param options The optional parameters
     * @param callback The callback
     */
    deleteMethod(resourceGroupName: string, name: string, options: Models.WebAppsDeleteMethodOptionalParams, callback: msRest.ServiceCallback<void>): void;
    /**
     * Creates a new web, mobile, or API app in an existing resource group, or updates an existing app.
     * @summary Creates a new web, mobile, or API app in an existing resource group, or updates an
     * existing app.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Unique name of the app to create or update. To create or update a deployment slot,
     * use the {slot} parameter.
     * @param siteEnvelope A JSON representation of the app properties. See example.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsUpdateResponse>
     */
    update(resourceGroupName: string, name: string, siteEnvelope: Models.SitePatchResource, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsUpdateResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Unique name of the app to create or update. To create or update a deployment slot,
     * use the {slot} parameter.
     * @param siteEnvelope A JSON representation of the app properties. See example.
     * @param callback The callback
     */
    update(resourceGroupName: string, name: string, siteEnvelope: Models.SitePatchResource, callback: msRest.ServiceCallback<Models.Site>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Unique name of the app to create or update. To create or update a deployment slot,
     * use the {slot} parameter.
     * @param siteEnvelope A JSON representation of the app properties. See example.
     * @param options The optional parameters
     * @param callback The callback
     */
    update(resourceGroupName: string, name: string, siteEnvelope: Models.SitePatchResource, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Site>): void;
    /**
     * Analyze a custom hostname.
     * @summary Analyze a custom hostname.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of web app.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsAnalyzeCustomHostnameResponse>
     */
    analyzeCustomHostname(resourceGroupName: string, name: string, options?: Models.WebAppsAnalyzeCustomHostnameOptionalParams): Promise<Models.WebAppsAnalyzeCustomHostnameResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of web app.
     * @param callback The callback
     */
    analyzeCustomHostname(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<Models.CustomHostnameAnalysisResult>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of web app.
     * @param options The optional parameters
     * @param callback The callback
     */
    analyzeCustomHostname(resourceGroupName: string, name: string, options: Models.WebAppsAnalyzeCustomHostnameOptionalParams, callback: msRest.ServiceCallback<Models.CustomHostnameAnalysisResult>): void;
    /**
     * Applies the configuration settings from the target slot onto the current slot.
     * @summary Applies the configuration settings from the target slot onto the current slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slotSwapEntity JSON object that contains the target slot name. See example.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    applySlotConfigToProduction(resourceGroupName: string, name: string, slotSwapEntity: Models.CsmSlotEntity, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slotSwapEntity JSON object that contains the target slot name. See example.
     * @param callback The callback
     */
    applySlotConfigToProduction(resourceGroupName: string, name: string, slotSwapEntity: Models.CsmSlotEntity, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slotSwapEntity JSON object that contains the target slot name. See example.
     * @param options The optional parameters
     * @param callback The callback
     */
    applySlotConfigToProduction(resourceGroupName: string, name: string, slotSwapEntity: Models.CsmSlotEntity, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
    /**
     * Creates a backup of an app.
     * @summary Creates a backup of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param request Backup configuration. You can use the JSON response from the POST action as input
     * here.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsBackupResponse>
     */
    backup(resourceGroupName: string, name: string, request: Models.BackupRequest, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsBackupResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param request Backup configuration. You can use the JSON response from the POST action as input
     * here.
     * @param callback The callback
     */
    backup(resourceGroupName: string, name: string, request: Models.BackupRequest, callback: msRest.ServiceCallback<Models.BackupItem>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param request Backup configuration. You can use the JSON response from the POST action as input
     * here.
     * @param options The optional parameters
     * @param callback The callback
     */
    backup(resourceGroupName: string, name: string, request: Models.BackupRequest, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.BackupItem>): void;
    /**
     * Gets existing backups of an app.
     * @summary Gets existing backups of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsListBackupsResponse>
     */
    listBackups(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListBackupsResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param callback The callback
     */
    listBackups(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<Models.BackupItemCollection>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param options The optional parameters
     * @param callback The callback
     */
    listBackups(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.BackupItemCollection>): void;
    /**
     * Gets a backup of an app by its ID.
     * @summary Gets a backup of an app by its ID.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param backupId ID of the backup.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsGetBackupStatusResponse>
     */
    getBackupStatus(resourceGroupName: string, name: string, backupId: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsGetBackupStatusResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param backupId ID of the backup.
     * @param callback The callback
     */
    getBackupStatus(resourceGroupName: string, name: string, backupId: string, callback: msRest.ServiceCallback<Models.BackupItem>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param backupId ID of the backup.
     * @param options The optional parameters
     * @param callback The callback
     */
    getBackupStatus(resourceGroupName: string, name: string, backupId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.BackupItem>): void;
    /**
     * Deletes a backup of an app by its ID.
     * @summary Deletes a backup of an app by its ID.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param backupId ID of the backup.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    deleteBackup(resourceGroupName: string, name: string, backupId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param backupId ID of the backup.
     * @param callback The callback
     */
    deleteBackup(resourceGroupName: string, name: string, backupId: string, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param backupId ID of the backup.
     * @param options The optional parameters
     * @param callback The callback
     */
    deleteBackup(resourceGroupName: string, name: string, backupId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
    /**
     * Gets status of a web app backup that may be in progress, including secrets associated with the
     * backup, such as the Azure Storage SAS URL. Also can be used to update the SAS URL for the backup
     * if a new URL is passed in the request body.
     * @summary Gets status of a web app backup that may be in progress, including secrets associated
     * with the backup, such as the Azure Storage SAS URL. Also can be used to update the SAS URL for
     * the backup if a new URL is passed in the request body.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of web app.
     * @param backupId ID of backup.
     * @param request Information on backup request.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsListBackupStatusSecretsResponse>
     */
    listBackupStatusSecrets(resourceGroupName: string, name: string, backupId: string, request: Models.BackupRequest, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListBackupStatusSecretsResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of web app.
     * @param backupId ID of backup.
     * @param request Information on backup request.
     * @param callback The callback
     */
    listBackupStatusSecrets(resourceGroupName: string, name: string, backupId: string, request: Models.BackupRequest, callback: msRest.ServiceCallback<Models.BackupItem>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of web app.
     * @param backupId ID of backup.
     * @param request Information on backup request.
     * @param options The optional parameters
     * @param callback The callback
     */
    listBackupStatusSecrets(resourceGroupName: string, name: string, backupId: string, request: Models.BackupRequest, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.BackupItem>): void;
    /**
     * Restores a specific backup to another app (or deployment slot, if specified).
     * @summary Restores a specific backup to another app (or deployment slot, if specified).
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param backupId ID of the backup.
     * @param request Information on restore request .
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    restore(resourceGroupName: string, name: string, backupId: string, request: Models.RestoreRequest, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * List the configurations of an app
     * @summary List the configurations of an app
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsListConfigurationsResponse>
     */
    listConfigurations(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListConfigurationsResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param callback The callback
     */
    listConfigurations(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<Models.SiteConfigResourceCollection>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param options The optional parameters
     * @param callback The callback
     */
    listConfigurations(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SiteConfigResourceCollection>): void;
    /**
     * Replaces the application settings of an app.
     * @summary Replaces the application settings of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param appSettings Application settings of the app.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsUpdateApplicationSettingsResponse>
     */
    updateApplicationSettings(resourceGroupName: string, name: string, appSettings: Models.StringDictionary, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsUpdateApplicationSettingsResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param appSettings Application settings of the app.
     * @param callback The callback
     */
    updateApplicationSettings(resourceGroupName: string, name: string, appSettings: Models.StringDictionary, callback: msRest.ServiceCallback<Models.StringDictionary>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param appSettings Application settings of the app.
     * @param options The optional parameters
     * @param callback The callback
     */
    updateApplicationSettings(resourceGroupName: string, name: string, appSettings: Models.StringDictionary, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.StringDictionary>): void;
    /**
     * Gets the application settings of an app.
     * @summary Gets the application settings of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsListApplicationSettingsResponse>
     */
    listApplicationSettings(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListApplicationSettingsResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param callback The callback
     */
    listApplicationSettings(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<Models.StringDictionary>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param options The optional parameters
     * @param callback The callback
     */
    listApplicationSettings(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.StringDictionary>): void;
    /**
     * Updates the Authentication / Authorization settings associated with web app.
     * @summary Updates the Authentication / Authorization settings associated with web app.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of web app.
     * @param siteAuthSettings Auth settings associated with web app.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsUpdateAuthSettingsResponse>
     */
    updateAuthSettings(resourceGroupName: string, name: string, siteAuthSettings: Models.SiteAuthSettings, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsUpdateAuthSettingsResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of web app.
     * @param siteAuthSettings Auth settings associated with web app.
     * @param callback The callback
     */
    updateAuthSettings(resourceGroupName: string, name: string, siteAuthSettings: Models.SiteAuthSettings, callback: msRest.ServiceCallback<Models.SiteAuthSettings>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of web app.
     * @param siteAuthSettings Auth settings associated with web app.
     * @param options The optional parameters
     * @param callback The callback
     */
    updateAuthSettings(resourceGroupName: string, name: string, siteAuthSettings: Models.SiteAuthSettings, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SiteAuthSettings>): void;
    /**
     * Gets the Authentication/Authorization settings of an app.
     * @summary Gets the Authentication/Authorization settings of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsGetAuthSettingsResponse>
     */
    getAuthSettings(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsGetAuthSettingsResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param callback The callback
     */
    getAuthSettings(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<Models.SiteAuthSettings>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param options The optional parameters
     * @param callback The callback
     */
    getAuthSettings(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SiteAuthSettings>): void;
    /**
     * Updates the Azure storage account configurations of an app.
     * @summary Updates the Azure storage account configurations of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param azureStorageAccounts Azure storage accounts of the app.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsUpdateAzureStorageAccountsResponse>
     */
    updateAzureStorageAccounts(resourceGroupName: string, name: string, azureStorageAccounts: Models.AzureStoragePropertyDictionaryResource, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsUpdateAzureStorageAccountsResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param azureStorageAccounts Azure storage accounts of the app.
     * @param callback The callback
     */
    updateAzureStorageAccounts(resourceGroupName: string, name: string, azureStorageAccounts: Models.AzureStoragePropertyDictionaryResource, callback: msRest.ServiceCallback<Models.AzureStoragePropertyDictionaryResource>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param azureStorageAccounts Azure storage accounts of the app.
     * @param options The optional parameters
     * @param callback The callback
     */
    updateAzureStorageAccounts(resourceGroupName: string, name: string, azureStorageAccounts: Models.AzureStoragePropertyDictionaryResource, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.AzureStoragePropertyDictionaryResource>): void;
    /**
     * Gets the Azure storage account configurations of an app.
     * @summary Gets the Azure storage account configurations of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsListAzureStorageAccountsResponse>
     */
    listAzureStorageAccounts(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListAzureStorageAccountsResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param callback The callback
     */
    listAzureStorageAccounts(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<Models.AzureStoragePropertyDictionaryResource>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param options The optional parameters
     * @param callback The callback
     */
    listAzureStorageAccounts(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.AzureStoragePropertyDictionaryResource>): void;
    /**
     * Updates the backup configuration of an app.
     * @summary Updates the backup configuration of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param request Edited backup configuration.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsUpdateBackupConfigurationResponse>
     */
    updateBackupConfiguration(resourceGroupName: string, name: string, request: Models.BackupRequest, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsUpdateBackupConfigurationResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param request Edited backup configuration.
     * @param callback The callback
     */
    updateBackupConfiguration(resourceGroupName: string, name: string, request: Models.BackupRequest, callback: msRest.ServiceCallback<Models.BackupRequest>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param request Edited backup configuration.
     * @param options The optional parameters
     * @param callback The callback
     */
    updateBackupConfiguration(resourceGroupName: string, name: string, request: Models.BackupRequest, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.BackupRequest>): void;
    /**
     * Deletes the backup configuration of an app.
     * @summary Deletes the backup configuration of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    deleteBackupConfiguration(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param callback The callback
     */
    deleteBackupConfiguration(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param options The optional parameters
     * @param callback The callback
     */
    deleteBackupConfiguration(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
    /**
     * Gets the backup configuration of an app.
     * @summary Gets the backup configuration of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsGetBackupConfigurationResponse>
     */
    getBackupConfiguration(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsGetBackupConfigurationResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param callback The callback
     */
    getBackupConfiguration(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<Models.BackupRequest>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param options The optional parameters
     * @param callback The callback
     */
    getBackupConfiguration(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.BackupRequest>): void;
    /**
     * Replaces the connection strings of an app.
     * @summary Replaces the connection strings of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param connectionStrings Connection strings of the app or deployment slot. See example.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsUpdateConnectionStringsResponse>
     */
    updateConnectionStrings(resourceGroupName: string, name: string, connectionStrings: Models.ConnectionStringDictionary, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsUpdateConnectionStringsResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param connectionStrings Connection strings of the app or deployment slot. See example.
     * @param callback The callback
     */
    updateConnectionStrings(resourceGroupName: string, name: string, connectionStrings: Models.ConnectionStringDictionary, callback: msRest.ServiceCallback<Models.ConnectionStringDictionary>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param connectionStrings Connection strings of the app or deployment slot. See example.
     * @param options The optional parameters
     * @param callback The callback
     */
    updateConnectionStrings(resourceGroupName: string, name: string, connectionStrings: Models.ConnectionStringDictionary, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ConnectionStringDictionary>): void;
    /**
     * Gets the connection strings of an app.
     * @summary Gets the connection strings of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsListConnectionStringsResponse>
     */
    listConnectionStrings(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListConnectionStringsResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param callback The callback
     */
    listConnectionStrings(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<Models.ConnectionStringDictionary>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param options The optional parameters
     * @param callback The callback
     */
    listConnectionStrings(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ConnectionStringDictionary>): void;
    /**
     * Gets the logging configuration of an app.
     * @summary Gets the logging configuration of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsGetDiagnosticLogsConfigurationResponse>
     */
    getDiagnosticLogsConfiguration(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsGetDiagnosticLogsConfigurationResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param callback The callback
     */
    getDiagnosticLogsConfiguration(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<Models.SiteLogsConfig>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param options The optional parameters
     * @param callback The callback
     */
    getDiagnosticLogsConfiguration(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SiteLogsConfig>): void;
    /**
     * Updates the logging configuration of an app.
     * @summary Updates the logging configuration of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param siteLogsConfig A SiteLogsConfig JSON object that contains the logging configuration to
     * change in the "properties" property.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsUpdateDiagnosticLogsConfigResponse>
     */
    updateDiagnosticLogsConfig(resourceGroupName: string, name: string, siteLogsConfig: Models.SiteLogsConfig, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsUpdateDiagnosticLogsConfigResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param siteLogsConfig A SiteLogsConfig JSON object that contains the logging configuration to
     * change in the "properties" property.
     * @param callback The callback
     */
    updateDiagnosticLogsConfig(resourceGroupName: string, name: string, siteLogsConfig: Models.SiteLogsConfig, callback: msRest.ServiceCallback<Models.SiteLogsConfig>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param siteLogsConfig A SiteLogsConfig JSON object that contains the logging configuration to
     * change in the "properties" property.
     * @param options The optional parameters
     * @param callback The callback
     */
    updateDiagnosticLogsConfig(resourceGroupName: string, name: string, siteLogsConfig: Models.SiteLogsConfig, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SiteLogsConfig>): void;
    /**
     * Replaces the metadata of an app.
     * @summary Replaces the metadata of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param metadata Edited metadata of the app or deployment slot. See example.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsUpdateMetadataResponse>
     */
    updateMetadata(resourceGroupName: string, name: string, metadata: Models.StringDictionary, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsUpdateMetadataResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param metadata Edited metadata of the app or deployment slot. See example.
     * @param callback The callback
     */
    updateMetadata(resourceGroupName: string, name: string, metadata: Models.StringDictionary, callback: msRest.ServiceCallback<Models.StringDictionary>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param metadata Edited metadata of the app or deployment slot. See example.
     * @param options The optional parameters
     * @param callback The callback
     */
    updateMetadata(resourceGroupName: string, name: string, metadata: Models.StringDictionary, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.StringDictionary>): void;
    /**
     * Gets the metadata of an app.
     * @summary Gets the metadata of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsListMetadataResponse>
     */
    listMetadata(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListMetadataResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param callback The callback
     */
    listMetadata(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<Models.StringDictionary>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param options The optional parameters
     * @param callback The callback
     */
    listMetadata(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.StringDictionary>): void;
    /**
     * Gets the Git/FTP publishing credentials of an app.
     * @summary Gets the Git/FTP publishing credentials of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsListPublishingCredentialsResponse>
     */
    listPublishingCredentials(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListPublishingCredentialsResponse>;
    /**
     * Updates the Push settings associated with web app.
     * @summary Updates the Push settings associated with web app.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of web app.
     * @param pushSettings Push settings associated with web app.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsUpdateSitePushSettingsResponse>
     */
    updateSitePushSettings(resourceGroupName: string, name: string, pushSettings: Models.PushSettings, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsUpdateSitePushSettingsResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of web app.
     * @param pushSettings Push settings associated with web app.
     * @param callback The callback
     */
    updateSitePushSettings(resourceGroupName: string, name: string, pushSettings: Models.PushSettings, callback: msRest.ServiceCallback<Models.PushSettings>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of web app.
     * @param pushSettings Push settings associated with web app.
     * @param options The optional parameters
     * @param callback The callback
     */
    updateSitePushSettings(resourceGroupName: string, name: string, pushSettings: Models.PushSettings, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PushSettings>): void;
    /**
     * Gets the Push settings associated with web app.
     * @summary Gets the Push settings associated with web app.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of web app.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsListSitePushSettingsResponse>
     */
    listSitePushSettings(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListSitePushSettingsResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of web app.
     * @param callback The callback
     */
    listSitePushSettings(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<Models.PushSettings>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of web app.
     * @param options The optional parameters
     * @param callback The callback
     */
    listSitePushSettings(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PushSettings>): void;
    /**
     * Gets the names of app settings and connection strings that stick to the slot (not swapped).
     * @summary Gets the names of app settings and connection strings that stick to the slot (not
     * swapped).
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsListSlotConfigurationNamesResponse>
     */
    listSlotConfigurationNames(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListSlotConfigurationNamesResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param callback The callback
     */
    listSlotConfigurationNames(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<Models.SlotConfigNamesResource>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param options The optional parameters
     * @param callback The callback
     */
    listSlotConfigurationNames(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SlotConfigNamesResource>): void;
    /**
     * Updates the names of application settings and connection string that remain with the slot during
     * swap operation.
     * @summary Updates the names of application settings and connection string that remain with the
     * slot during swap operation.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slotConfigNames Names of application settings and connection strings. See example.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsUpdateSlotConfigurationNamesResponse>
     */
    updateSlotConfigurationNames(resourceGroupName: string, name: string, slotConfigNames: Models.SlotConfigNamesResource, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsUpdateSlotConfigurationNamesResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slotConfigNames Names of application settings and connection strings. See example.
     * @param callback The callback
     */
    updateSlotConfigurationNames(resourceGroupName: string, name: string, slotConfigNames: Models.SlotConfigNamesResource, callback: msRest.ServiceCallback<Models.SlotConfigNamesResource>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slotConfigNames Names of application settings and connection strings. See example.
     * @param options The optional parameters
     * @param callback The callback
     */
    updateSlotConfigurationNames(resourceGroupName: string, name: string, slotConfigNames: Models.SlotConfigNamesResource, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SlotConfigNamesResource>): void;
    /**
     * Gets the configuration of an app, such as platform version and bitness, default documents,
     * virtual applications, Always On, etc.
     * @summary Gets the configuration of an app, such as platform version and bitness, default
     * documents, virtual applications, Always On, etc.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsGetConfigurationResponse>
     */
    getConfiguration(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsGetConfigurationResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param callback The callback
     */
    getConfiguration(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<Models.SiteConfigResource>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param options The optional parameters
     * @param callback The callback
     */
    getConfiguration(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SiteConfigResource>): void;
    /**
     * Updates the configuration of an app.
     * @summary Updates the configuration of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param siteConfig JSON representation of a SiteConfig object. See example.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsCreateOrUpdateConfigurationResponse>
     */
    createOrUpdateConfiguration(resourceGroupName: string, name: string, siteConfig: Models.SiteConfigResource, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsCreateOrUpdateConfigurationResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param siteConfig JSON representation of a SiteConfig object. See example.
     * @param callback The callback
     */
    createOrUpdateConfiguration(resourceGroupName: string, name: string, siteConfig: Models.SiteConfigResource, callback: msRest.ServiceCallback<Models.SiteConfigResource>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param siteConfig JSON representation of a SiteConfig object. See example.
     * @param options The optional parameters
     * @param callback The callback
     */
    createOrUpdateConfiguration(resourceGroupName: string, name: string, siteConfig: Models.SiteConfigResource, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SiteConfigResource>): void;
    /**
     * Updates the configuration of an app.
     * @summary Updates the configuration of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param siteConfig JSON representation of a SiteConfig object. See example.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsUpdateConfigurationResponse>
     */
    updateConfiguration(resourceGroupName: string, name: string, siteConfig: Models.SiteConfigResource, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsUpdateConfigurationResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param siteConfig JSON representation of a SiteConfig object. See example.
     * @param callback The callback
     */
    updateConfiguration(resourceGroupName: string, name: string, siteConfig: Models.SiteConfigResource, callback: msRest.ServiceCallback<Models.SiteConfigResource>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param siteConfig JSON representation of a SiteConfig object. See example.
     * @param options The optional parameters
     * @param callback The callback
     */
    updateConfiguration(resourceGroupName: string, name: string, siteConfig: Models.SiteConfigResource, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SiteConfigResource>): void;
    /**
     * Gets a list of web app configuration snapshots identifiers. Each element of the list contains a
     * timestamp and the ID of the snapshot.
     * @summary Gets a list of web app configuration snapshots identifiers. Each element of the list
     * contains a timestamp and the ID of the snapshot.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsListConfigurationSnapshotInfoResponse>
     */
    listConfigurationSnapshotInfo(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListConfigurationSnapshotInfoResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param callback The callback
     */
    listConfigurationSnapshotInfo(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<Models.SiteConfigurationSnapshotInfoCollection>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param options The optional parameters
     * @param callback The callback
     */
    listConfigurationSnapshotInfo(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SiteConfigurationSnapshotInfoCollection>): void;
    /**
     * Gets a snapshot of the configuration of an app at a previous point in time.
     * @summary Gets a snapshot of the configuration of an app at a previous point in time.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param snapshotId The ID of the snapshot to read.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsGetConfigurationSnapshotResponse>
     */
    getConfigurationSnapshot(resourceGroupName: string, name: string, snapshotId: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsGetConfigurationSnapshotResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param snapshotId The ID of the snapshot to read.
     * @param callback The callback
     */
    getConfigurationSnapshot(resourceGroupName: string, name: string, snapshotId: string, callback: msRest.ServiceCallback<Models.SiteConfigResource>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param snapshotId The ID of the snapshot to read.
     * @param options The optional parameters
     * @param callback The callback
     */
    getConfigurationSnapshot(resourceGroupName: string, name: string, snapshotId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SiteConfigResource>): void;
    /**
     * Reverts the configuration of an app to a previous snapshot.
     * @summary Reverts the configuration of an app to a previous snapshot.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param snapshotId The ID of the snapshot to read.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    recoverSiteConfigurationSnapshot(resourceGroupName: string, name: string, snapshotId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param snapshotId The ID of the snapshot to read.
     * @param callback The callback
     */
    recoverSiteConfigurationSnapshot(resourceGroupName: string, name: string, snapshotId: string, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param snapshotId The ID of the snapshot to read.
     * @param options The optional parameters
     * @param callback The callback
     */
    recoverSiteConfigurationSnapshot(resourceGroupName: string, name: string, snapshotId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
    /**
     * Gets the last lines of docker logs for the given site
     * @summary Gets the last lines of docker logs for the given site
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of web app.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsGetWebSiteContainerLogsResponse>
     */
    getWebSiteContainerLogs(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsGetWebSiteContainerLogsResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of web app.
     * @param callback The callback
     */
    getWebSiteContainerLogs(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of web app.
     * @param options The optional parameters
     * @param callback The callback
     */
    getWebSiteContainerLogs(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
    /**
     * Gets the ZIP archived docker log files for the given site
     * @summary Gets the ZIP archived docker log files for the given site
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of web app.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsGetContainerLogsZipResponse>
     */
    getContainerLogsZip(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsGetContainerLogsZipResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of web app.
     * @param callback The callback
     */
    getContainerLogsZip(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of web app.
     * @param options The optional parameters
     * @param callback The callback
     */
    getContainerLogsZip(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
    /**
     * List continuous web jobs for an app, or a deployment slot.
     * @summary List continuous web jobs for an app, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsListContinuousWebJobsResponse>
     */
    listContinuousWebJobs(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListContinuousWebJobsResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param callback The callback
     */
    listContinuousWebJobs(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<Models.ContinuousWebJobCollection>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param options The optional parameters
     * @param callback The callback
     */
    listContinuousWebJobs(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ContinuousWebJobCollection>): void;
    /**
     * Gets a continuous web job by its ID for an app, or a deployment slot.
     * @summary Gets a continuous web job by its ID for an app, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param webJobName Name of Web Job.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsGetContinuousWebJobResponse>
     */
    getContinuousWebJob(resourceGroupName: string, name: string, webJobName: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsGetContinuousWebJobResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param webJobName Name of Web Job.
     * @param callback The callback
     */
    getContinuousWebJob(resourceGroupName: string, name: string, webJobName: string, callback: msRest.ServiceCallback<Models.ContinuousWebJob>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param webJobName Name of Web Job.
     * @param options The optional parameters
     * @param callback The callback
     */
    getContinuousWebJob(resourceGroupName: string, name: string, webJobName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ContinuousWebJob>): void;
    /**
     * Delete a continuous web job by its ID for an app, or a deployment slot.
     * @summary Delete a continuous web job by its ID for an app, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param webJobName Name of Web Job.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    deleteContinuousWebJob(resourceGroupName: string, name: string, webJobName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param webJobName Name of Web Job.
     * @param callback The callback
     */
    deleteContinuousWebJob(resourceGroupName: string, name: string, webJobName: string, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param webJobName Name of Web Job.
     * @param options The optional parameters
     * @param callback The callback
     */
    deleteContinuousWebJob(resourceGroupName: string, name: string, webJobName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
    /**
     * Start a continuous web job for an app, or a deployment slot.
     * @summary Start a continuous web job for an app, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param webJobName Name of Web Job.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    startContinuousWebJob(resourceGroupName: string, name: string, webJobName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param webJobName Name of Web Job.
     * @param callback The callback
     */
    startContinuousWebJob(resourceGroupName: string, name: string, webJobName: string, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param webJobName Name of Web Job.
     * @param options The optional parameters
     * @param callback The callback
     */
    startContinuousWebJob(resourceGroupName: string, name: string, webJobName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
    /**
     * Stop a continuous web job for an app, or a deployment slot.
     * @summary Stop a continuous web job for an app, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param webJobName Name of Web Job.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    stopContinuousWebJob(resourceGroupName: string, name: string, webJobName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param webJobName Name of Web Job.
     * @param callback The callback
     */
    stopContinuousWebJob(resourceGroupName: string, name: string, webJobName: string, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param webJobName Name of Web Job.
     * @param options The optional parameters
     * @param callback The callback
     */
    stopContinuousWebJob(resourceGroupName: string, name: string, webJobName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
    /**
     * List deployments for an app, or a deployment slot.
     * @summary List deployments for an app, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsListDeploymentsResponse>
     */
    listDeployments(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListDeploymentsResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param callback The callback
     */
    listDeployments(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<Models.DeploymentCollection>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param options The optional parameters
     * @param callback The callback
     */
    listDeployments(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DeploymentCollection>): void;
    /**
     * Get a deployment by its ID for an app, or a deployment slot.
     * @summary Get a deployment by its ID for an app, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param id Deployment ID.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsGetDeploymentResponse>
     */
    getDeployment(resourceGroupName: string, name: string, id: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsGetDeploymentResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param id Deployment ID.
     * @param callback The callback
     */
    getDeployment(resourceGroupName: string, name: string, id: string, callback: msRest.ServiceCallback<Models.Deployment>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param id Deployment ID.
     * @param options The optional parameters
     * @param callback The callback
     */
    getDeployment(resourceGroupName: string, name: string, id: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Deployment>): void;
    /**
     * Create a deployment for an app, or a deployment slot.
     * @summary Create a deployment for an app, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param id ID of an existing deployment.
     * @param deployment Deployment details.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsCreateDeploymentResponse>
     */
    createDeployment(resourceGroupName: string, name: string, id: string, deployment: Models.Deployment, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsCreateDeploymentResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param id ID of an existing deployment.
     * @param deployment Deployment details.
     * @param callback The callback
     */
    createDeployment(resourceGroupName: string, name: string, id: string, deployment: Models.Deployment, callback: msRest.ServiceCallback<Models.Deployment>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param id ID of an existing deployment.
     * @param deployment Deployment details.
     * @param options The optional parameters
     * @param callback The callback
     */
    createDeployment(resourceGroupName: string, name: string, id: string, deployment: Models.Deployment, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Deployment>): void;
    /**
     * Delete a deployment by its ID for an app, or a deployment slot.
     * @summary Delete a deployment by its ID for an app, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param id Deployment ID.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    deleteDeployment(resourceGroupName: string, name: string, id: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param id Deployment ID.
     * @param callback The callback
     */
    deleteDeployment(resourceGroupName: string, name: string, id: string, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param id Deployment ID.
     * @param options The optional parameters
     * @param callback The callback
     */
    deleteDeployment(resourceGroupName: string, name: string, id: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
    /**
     * List deployment log for specific deployment for an app, or a deployment slot.
     * @summary List deployment log for specific deployment for an app, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param id The ID of a specific deployment. This is the value of the name property in the JSON
     * response from "GET /api/sites/{siteName}/deployments".
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsListDeploymentLogResponse>
     */
    listDeploymentLog(resourceGroupName: string, name: string, id: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListDeploymentLogResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param id The ID of a specific deployment. This is the value of the name property in the JSON
     * response from "GET /api/sites/{siteName}/deployments".
     * @param callback The callback
     */
    listDeploymentLog(resourceGroupName: string, name: string, id: string, callback: msRest.ServiceCallback<Models.Deployment>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param id The ID of a specific deployment. This is the value of the name property in the JSON
     * response from "GET /api/sites/{siteName}/deployments".
     * @param options The optional parameters
     * @param callback The callback
     */
    listDeploymentLog(resourceGroupName: string, name: string, id: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Deployment>): void;
    /**
     * Discovers an existing app backup that can be restored from a blob in Azure storage. Use this to
     * get information about the databases stored in a backup.
     * @summary Discovers an existing app backup that can be restored from a blob in Azure storage. Use
     * this to get information about the databases stored in a backup.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param request A RestoreRequest object that includes Azure storage URL and blog name for
     * discovery of backup.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsDiscoverBackupResponse>
     */
    discoverBackup(resourceGroupName: string, name: string, request: Models.RestoreRequest, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsDiscoverBackupResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param request A RestoreRequest object that includes Azure storage URL and blog name for
     * discovery of backup.
     * @param callback The callback
     */
    discoverBackup(resourceGroupName: string, name: string, request: Models.RestoreRequest, callback: msRest.ServiceCallback<Models.RestoreRequest>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param request A RestoreRequest object that includes Azure storage URL and blog name for
     * discovery of backup.
     * @param options The optional parameters
     * @param callback The callback
     */
    discoverBackup(resourceGroupName: string, name: string, request: Models.RestoreRequest, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.RestoreRequest>): void;
    /**
     * Lists ownership identifiers for domain associated with web app.
     * @summary Lists ownership identifiers for domain associated with web app.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsListDomainOwnershipIdentifiersResponse>
     */
    listDomainOwnershipIdentifiers(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListDomainOwnershipIdentifiersResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param callback The callback
     */
    listDomainOwnershipIdentifiers(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<Models.IdentifierCollection>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param options The optional parameters
     * @param callback The callback
     */
    listDomainOwnershipIdentifiers(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.IdentifierCollection>): void;
    /**
     * Get domain ownership identifier for web app.
     * @summary Get domain ownership identifier for web app.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param domainOwnershipIdentifierName Name of domain ownership identifier.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsGetDomainOwnershipIdentifierResponse>
     */
    getDomainOwnershipIdentifier(resourceGroupName: string, name: string, domainOwnershipIdentifierName: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsGetDomainOwnershipIdentifierResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param domainOwnershipIdentifierName Name of domain ownership identifier.
     * @param callback The callback
     */
    getDomainOwnershipIdentifier(resourceGroupName: string, name: string, domainOwnershipIdentifierName: string, callback: msRest.ServiceCallback<Models.Identifier>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param domainOwnershipIdentifierName Name of domain ownership identifier.
     * @param options The optional parameters
     * @param callback The callback
     */
    getDomainOwnershipIdentifier(resourceGroupName: string, name: string, domainOwnershipIdentifierName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Identifier>): void;
    /**
     * Creates a domain ownership identifier for web app, or updates an existing ownership identifier.
     * @summary Creates a domain ownership identifier for web app, or updates an existing ownership
     * identifier.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param domainOwnershipIdentifierName Name of domain ownership identifier.
     * @param domainOwnershipIdentifier A JSON representation of the domain ownership properties.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsCreateOrUpdateDomainOwnershipIdentifierResponse>
     */
    createOrUpdateDomainOwnershipIdentifier(resourceGroupName: string, name: string, domainOwnershipIdentifierName: string, domainOwnershipIdentifier: Models.Identifier, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsCreateOrUpdateDomainOwnershipIdentifierResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param domainOwnershipIdentifierName Name of domain ownership identifier.
     * @param domainOwnershipIdentifier A JSON representation of the domain ownership properties.
     * @param callback The callback
     */
    createOrUpdateDomainOwnershipIdentifier(resourceGroupName: string, name: string, domainOwnershipIdentifierName: string, domainOwnershipIdentifier: Models.Identifier, callback: msRest.ServiceCallback<Models.Identifier>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param domainOwnershipIdentifierName Name of domain ownership identifier.
     * @param domainOwnershipIdentifier A JSON representation of the domain ownership properties.
     * @param options The optional parameters
     * @param callback The callback
     */
    createOrUpdateDomainOwnershipIdentifier(resourceGroupName: string, name: string, domainOwnershipIdentifierName: string, domainOwnershipIdentifier: Models.Identifier, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Identifier>): void;
    /**
     * Deletes a domain ownership identifier for a web app.
     * @summary Deletes a domain ownership identifier for a web app.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param domainOwnershipIdentifierName Name of domain ownership identifier.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    deleteDomainOwnershipIdentifier(resourceGroupName: string, name: string, domainOwnershipIdentifierName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param domainOwnershipIdentifierName Name of domain ownership identifier.
     * @param callback The callback
     */
    deleteDomainOwnershipIdentifier(resourceGroupName: string, name: string, domainOwnershipIdentifierName: string, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param domainOwnershipIdentifierName Name of domain ownership identifier.
     * @param options The optional parameters
     * @param callback The callback
     */
    deleteDomainOwnershipIdentifier(resourceGroupName: string, name: string, domainOwnershipIdentifierName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
    /**
     * Creates a domain ownership identifier for web app, or updates an existing ownership identifier.
     * @summary Creates a domain ownership identifier for web app, or updates an existing ownership
     * identifier.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param domainOwnershipIdentifierName Name of domain ownership identifier.
     * @param domainOwnershipIdentifier A JSON representation of the domain ownership properties.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsUpdateDomainOwnershipIdentifierResponse>
     */
    updateDomainOwnershipIdentifier(resourceGroupName: string, name: string, domainOwnershipIdentifierName: string, domainOwnershipIdentifier: Models.Identifier, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsUpdateDomainOwnershipIdentifierResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param domainOwnershipIdentifierName Name of domain ownership identifier.
     * @param domainOwnershipIdentifier A JSON representation of the domain ownership properties.
     * @param callback The callback
     */
    updateDomainOwnershipIdentifier(resourceGroupName: string, name: string, domainOwnershipIdentifierName: string, domainOwnershipIdentifier: Models.Identifier, callback: msRest.ServiceCallback<Models.Identifier>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param domainOwnershipIdentifierName Name of domain ownership identifier.
     * @param domainOwnershipIdentifier A JSON representation of the domain ownership properties.
     * @param options The optional parameters
     * @param callback The callback
     */
    updateDomainOwnershipIdentifier(resourceGroupName: string, name: string, domainOwnershipIdentifierName: string, domainOwnershipIdentifier: Models.Identifier, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Identifier>): void;
    /**
     * Get the status of the last MSDeploy operation.
     * @summary Get the status of the last MSDeploy operation.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of web app.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsGetMSDeployStatusResponse>
     */
    getMSDeployStatus(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsGetMSDeployStatusResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of web app.
     * @param callback The callback
     */
    getMSDeployStatus(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<Models.MSDeployStatus>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of web app.
     * @param options The optional parameters
     * @param callback The callback
     */
    getMSDeployStatus(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.MSDeployStatus>): void;
    /**
     * Invoke the MSDeploy web app extension.
     * @summary Invoke the MSDeploy web app extension.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of web app.
     * @param mSDeploy Details of MSDeploy operation
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsCreateMSDeployOperationResponse>
     */
    createMSDeployOperation(resourceGroupName: string, name: string, mSDeploy: Models.MSDeploy, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsCreateMSDeployOperationResponse>;
    /**
     * Get the MSDeploy Log for the last MSDeploy operation.
     * @summary Get the MSDeploy Log for the last MSDeploy operation.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of web app.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsGetMSDeployLogResponse>
     */
    getMSDeployLog(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsGetMSDeployLogResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of web app.
     * @param callback The callback
     */
    getMSDeployLog(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<Models.MSDeployLog>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of web app.
     * @param options The optional parameters
     * @param callback The callback
     */
    getMSDeployLog(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.MSDeployLog>): void;
    /**
     * List the functions for a web site, or a deployment slot.
     * @summary List the functions for a web site, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsListFunctionsResponse>
     */
    listFunctions(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListFunctionsResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param callback The callback
     */
    listFunctions(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<Models.FunctionEnvelopeCollection>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param options The optional parameters
     * @param callback The callback
     */
    listFunctions(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.FunctionEnvelopeCollection>): void;
    /**
     * Fetch a short lived token that can be exchanged for a master key.
     * @summary Fetch a short lived token that can be exchanged for a master key.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of web app.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsGetFunctionsAdminTokenResponse>
     */
    getFunctionsAdminToken(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsGetFunctionsAdminTokenResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of web app.
     * @param callback The callback
     */
    getFunctionsAdminToken(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<string>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of web app.
     * @param options The optional parameters
     * @param callback The callback
     */
    getFunctionsAdminToken(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<string>): void;
    /**
     * Get function information by its ID for web site, or a deployment slot.
     * @summary Get function information by its ID for web site, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param functionName Function name.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsGetFunctionResponse>
     */
    getFunction(resourceGroupName: string, name: string, functionName: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsGetFunctionResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param functionName Function name.
     * @param callback The callback
     */
    getFunction(resourceGroupName: string, name: string, functionName: string, callback: msRest.ServiceCallback<Models.FunctionEnvelope>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param functionName Function name.
     * @param options The optional parameters
     * @param callback The callback
     */
    getFunction(resourceGroupName: string, name: string, functionName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.FunctionEnvelope>): void;
    /**
     * Create function for web site, or a deployment slot.
     * @summary Create function for web site, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param functionName Function name.
     * @param functionEnvelope Function details.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsCreateFunctionResponse>
     */
    createFunction(resourceGroupName: string, name: string, functionName: string, functionEnvelope: Models.FunctionEnvelope, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsCreateFunctionResponse>;
    /**
     * Delete a function for web site, or a deployment slot.
     * @summary Delete a function for web site, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param functionName Function name.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    deleteFunction(resourceGroupName: string, name: string, functionName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param functionName Function name.
     * @param callback The callback
     */
    deleteFunction(resourceGroupName: string, name: string, functionName: string, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param functionName Function name.
     * @param options The optional parameters
     * @param callback The callback
     */
    deleteFunction(resourceGroupName: string, name: string, functionName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
    /**
     * Get function secrets for a function in a web site, or a deployment slot.
     * @summary Get function secrets for a function in a web site, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param functionName Function name.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsListFunctionSecretsResponse>
     */
    listFunctionSecrets(resourceGroupName: string, name: string, functionName: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListFunctionSecretsResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param functionName Function name.
     * @param callback The callback
     */
    listFunctionSecrets(resourceGroupName: string, name: string, functionName: string, callback: msRest.ServiceCallback<Models.FunctionSecrets>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param functionName Function name.
     * @param options The optional parameters
     * @param callback The callback
     */
    listFunctionSecrets(resourceGroupName: string, name: string, functionName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.FunctionSecrets>): void;
    /**
     * Get hostname bindings for an app or a deployment slot.
     * @summary Get hostname bindings for an app or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsListHostNameBindingsResponse>
     */
    listHostNameBindings(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListHostNameBindingsResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param callback The callback
     */
    listHostNameBindings(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<Models.HostNameBindingCollection>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param options The optional parameters
     * @param callback The callback
     */
    listHostNameBindings(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.HostNameBindingCollection>): void;
    /**
     * Get the named hostname binding for an app (or deployment slot, if specified).
     * @summary Get the named hostname binding for an app (or deployment slot, if specified).
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param hostName Hostname in the hostname binding.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsGetHostNameBindingResponse>
     */
    getHostNameBinding(resourceGroupName: string, name: string, hostName: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsGetHostNameBindingResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param hostName Hostname in the hostname binding.
     * @param callback The callback
     */
    getHostNameBinding(resourceGroupName: string, name: string, hostName: string, callback: msRest.ServiceCallback<Models.HostNameBinding>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param hostName Hostname in the hostname binding.
     * @param options The optional parameters
     * @param callback The callback
     */
    getHostNameBinding(resourceGroupName: string, name: string, hostName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.HostNameBinding>): void;
    /**
     * Creates a hostname binding for an app.
     * @summary Creates a hostname binding for an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param hostName Hostname in the hostname binding.
     * @param hostNameBinding Binding details. This is the JSON representation of a HostNameBinding
     * object.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsCreateOrUpdateHostNameBindingResponse>
     */
    createOrUpdateHostNameBinding(resourceGroupName: string, name: string, hostName: string, hostNameBinding: Models.HostNameBinding, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsCreateOrUpdateHostNameBindingResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param hostName Hostname in the hostname binding.
     * @param hostNameBinding Binding details. This is the JSON representation of a HostNameBinding
     * object.
     * @param callback The callback
     */
    createOrUpdateHostNameBinding(resourceGroupName: string, name: string, hostName: string, hostNameBinding: Models.HostNameBinding, callback: msRest.ServiceCallback<Models.HostNameBinding>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param hostName Hostname in the hostname binding.
     * @param hostNameBinding Binding details. This is the JSON representation of a HostNameBinding
     * object.
     * @param options The optional parameters
     * @param callback The callback
     */
    createOrUpdateHostNameBinding(resourceGroupName: string, name: string, hostName: string, hostNameBinding: Models.HostNameBinding, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.HostNameBinding>): void;
    /**
     * Deletes a hostname binding for an app.
     * @summary Deletes a hostname binding for an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param hostName Hostname in the hostname binding.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    deleteHostNameBinding(resourceGroupName: string, name: string, hostName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param hostName Hostname in the hostname binding.
     * @param callback The callback
     */
    deleteHostNameBinding(resourceGroupName: string, name: string, hostName: string, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param hostName Hostname in the hostname binding.
     * @param options The optional parameters
     * @param callback The callback
     */
    deleteHostNameBinding(resourceGroupName: string, name: string, hostName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
    /**
     * Retrieves a specific Service Bus Hybrid Connection used by this Web App.
     * @summary Retrieves a specific Service Bus Hybrid Connection used by this Web App.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name The name of the web app.
     * @param namespaceName The namespace for this hybrid connection.
     * @param relayName The relay name for this hybrid connection.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsGetHybridConnectionResponse>
     */
    getHybridConnection(resourceGroupName: string, name: string, namespaceName: string, relayName: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsGetHybridConnectionResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name The name of the web app.
     * @param namespaceName The namespace for this hybrid connection.
     * @param relayName The relay name for this hybrid connection.
     * @param callback The callback
     */
    getHybridConnection(resourceGroupName: string, name: string, namespaceName: string, relayName: string, callback: msRest.ServiceCallback<Models.HybridConnection>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name The name of the web app.
     * @param namespaceName The namespace for this hybrid connection.
     * @param relayName The relay name for this hybrid connection.
     * @param options The optional parameters
     * @param callback The callback
     */
    getHybridConnection(resourceGroupName: string, name: string, namespaceName: string, relayName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.HybridConnection>): void;
    /**
     * Creates a new Hybrid Connection using a Service Bus relay.
     * @summary Creates a new Hybrid Connection using a Service Bus relay.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name The name of the web app.
     * @param namespaceName The namespace for this hybrid connection.
     * @param relayName The relay name for this hybrid connection.
     * @param connectionEnvelope The details of the hybrid connection.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsCreateOrUpdateHybridConnectionResponse>
     */
    createOrUpdateHybridConnection(resourceGroupName: string, name: string, namespaceName: string, relayName: string, connectionEnvelope: Models.HybridConnection, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsCreateOrUpdateHybridConnectionResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name The name of the web app.
     * @param namespaceName The namespace for this hybrid connection.
     * @param relayName The relay name for this hybrid connection.
     * @param connectionEnvelope The details of the hybrid connection.
     * @param callback The callback
     */
    createOrUpdateHybridConnection(resourceGroupName: string, name: string, namespaceName: string, relayName: string, connectionEnvelope: Models.HybridConnection, callback: msRest.ServiceCallback<Models.HybridConnection>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name The name of the web app.
     * @param namespaceName The namespace for this hybrid connection.
     * @param relayName The relay name for this hybrid connection.
     * @param connectionEnvelope The details of the hybrid connection.
     * @param options The optional parameters
     * @param callback The callback
     */
    createOrUpdateHybridConnection(resourceGroupName: string, name: string, namespaceName: string, relayName: string, connectionEnvelope: Models.HybridConnection, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.HybridConnection>): void;
    /**
     * Removes a Hybrid Connection from this site.
     * @summary Removes a Hybrid Connection from this site.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name The name of the web app.
     * @param namespaceName The namespace for this hybrid connection.
     * @param relayName The relay name for this hybrid connection.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    deleteHybridConnection(resourceGroupName: string, name: string, namespaceName: string, relayName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name The name of the web app.
     * @param namespaceName The namespace for this hybrid connection.
     * @param relayName The relay name for this hybrid connection.
     * @param callback The callback
     */
    deleteHybridConnection(resourceGroupName: string, name: string, namespaceName: string, relayName: string, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name The name of the web app.
     * @param namespaceName The namespace for this hybrid connection.
     * @param relayName The relay name for this hybrid connection.
     * @param options The optional parameters
     * @param callback The callback
     */
    deleteHybridConnection(resourceGroupName: string, name: string, namespaceName: string, relayName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
    /**
     * Creates a new Hybrid Connection using a Service Bus relay.
     * @summary Creates a new Hybrid Connection using a Service Bus relay.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name The name of the web app.
     * @param namespaceName The namespace for this hybrid connection.
     * @param relayName The relay name for this hybrid connection.
     * @param connectionEnvelope The details of the hybrid connection.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsUpdateHybridConnectionResponse>
     */
    updateHybridConnection(resourceGroupName: string, name: string, namespaceName: string, relayName: string, connectionEnvelope: Models.HybridConnection, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsUpdateHybridConnectionResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name The name of the web app.
     * @param namespaceName The namespace for this hybrid connection.
     * @param relayName The relay name for this hybrid connection.
     * @param connectionEnvelope The details of the hybrid connection.
     * @param callback The callback
     */
    updateHybridConnection(resourceGroupName: string, name: string, namespaceName: string, relayName: string, connectionEnvelope: Models.HybridConnection, callback: msRest.ServiceCallback<Models.HybridConnection>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name The name of the web app.
     * @param namespaceName The namespace for this hybrid connection.
     * @param relayName The relay name for this hybrid connection.
     * @param connectionEnvelope The details of the hybrid connection.
     * @param options The optional parameters
     * @param callback The callback
     */
    updateHybridConnection(resourceGroupName: string, name: string, namespaceName: string, relayName: string, connectionEnvelope: Models.HybridConnection, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.HybridConnection>): void;
    /**
     * Gets the send key name and value for a Hybrid Connection.
     * @summary Gets the send key name and value for a Hybrid Connection.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name The name of the web app.
     * @param namespaceName The namespace for this hybrid connection.
     * @param relayName The relay name for this hybrid connection.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsListHybridConnectionKeysResponse>
     */
    listHybridConnectionKeys(resourceGroupName: string, name: string, namespaceName: string, relayName: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListHybridConnectionKeysResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name The name of the web app.
     * @param namespaceName The namespace for this hybrid connection.
     * @param relayName The relay name for this hybrid connection.
     * @param callback The callback
     */
    listHybridConnectionKeys(resourceGroupName: string, name: string, namespaceName: string, relayName: string, callback: msRest.ServiceCallback<Models.HybridConnectionKey>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name The name of the web app.
     * @param namespaceName The namespace for this hybrid connection.
     * @param relayName The relay name for this hybrid connection.
     * @param options The optional parameters
     * @param callback The callback
     */
    listHybridConnectionKeys(resourceGroupName: string, name: string, namespaceName: string, relayName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.HybridConnectionKey>): void;
    /**
     * Retrieves all Service Bus Hybrid Connections used by this Web App.
     * @summary Retrieves all Service Bus Hybrid Connections used by this Web App.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name The name of the web app.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsListHybridConnectionsResponse>
     */
    listHybridConnections(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListHybridConnectionsResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name The name of the web app.
     * @param callback The callback
     */
    listHybridConnections(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<Models.HybridConnection>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name The name of the web app.
     * @param options The optional parameters
     * @param callback The callback
     */
    listHybridConnections(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.HybridConnection>): void;
    /**
     * Gets hybrid connections configured for an app (or deployment slot, if specified).
     * @summary Gets hybrid connections configured for an app (or deployment slot, if specified).
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsListRelayServiceConnectionsResponse>
     */
    listRelayServiceConnections(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListRelayServiceConnectionsResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param callback The callback
     */
    listRelayServiceConnections(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<Models.RelayServiceConnectionEntity>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param options The optional parameters
     * @param callback The callback
     */
    listRelayServiceConnections(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.RelayServiceConnectionEntity>): void;
    /**
     * Gets a hybrid connection configuration by its name.
     * @summary Gets a hybrid connection configuration by its name.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param entityName Name of the hybrid connection.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsGetRelayServiceConnectionResponse>
     */
    getRelayServiceConnection(resourceGroupName: string, name: string, entityName: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsGetRelayServiceConnectionResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param entityName Name of the hybrid connection.
     * @param callback The callback
     */
    getRelayServiceConnection(resourceGroupName: string, name: string, entityName: string, callback: msRest.ServiceCallback<Models.RelayServiceConnectionEntity>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param entityName Name of the hybrid connection.
     * @param options The optional parameters
     * @param callback The callback
     */
    getRelayServiceConnection(resourceGroupName: string, name: string, entityName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.RelayServiceConnectionEntity>): void;
    /**
     * Creates a new hybrid connection configuration (PUT), or updates an existing one (PATCH).
     * @summary Creates a new hybrid connection configuration (PUT), or updates an existing one
     * (PATCH).
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param entityName Name of the hybrid connection configuration.
     * @param connectionEnvelope Details of the hybrid connection configuration.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsCreateOrUpdateRelayServiceConnectionResponse>
     */
    createOrUpdateRelayServiceConnection(resourceGroupName: string, name: string, entityName: string, connectionEnvelope: Models.RelayServiceConnectionEntity, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsCreateOrUpdateRelayServiceConnectionResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param entityName Name of the hybrid connection configuration.
     * @param connectionEnvelope Details of the hybrid connection configuration.
     * @param callback The callback
     */
    createOrUpdateRelayServiceConnection(resourceGroupName: string, name: string, entityName: string, connectionEnvelope: Models.RelayServiceConnectionEntity, callback: msRest.ServiceCallback<Models.RelayServiceConnectionEntity>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param entityName Name of the hybrid connection configuration.
     * @param connectionEnvelope Details of the hybrid connection configuration.
     * @param options The optional parameters
     * @param callback The callback
     */
    createOrUpdateRelayServiceConnection(resourceGroupName: string, name: string, entityName: string, connectionEnvelope: Models.RelayServiceConnectionEntity, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.RelayServiceConnectionEntity>): void;
    /**
     * Deletes a relay service connection by its name.
     * @summary Deletes a relay service connection by its name.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param entityName Name of the hybrid connection configuration.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    deleteRelayServiceConnection(resourceGroupName: string, name: string, entityName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param entityName Name of the hybrid connection configuration.
     * @param callback The callback
     */
    deleteRelayServiceConnection(resourceGroupName: string, name: string, entityName: string, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param entityName Name of the hybrid connection configuration.
     * @param options The optional parameters
     * @param callback The callback
     */
    deleteRelayServiceConnection(resourceGroupName: string, name: string, entityName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
    /**
     * Creates a new hybrid connection configuration (PUT), or updates an existing one (PATCH).
     * @summary Creates a new hybrid connection configuration (PUT), or updates an existing one
     * (PATCH).
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param entityName Name of the hybrid connection configuration.
     * @param connectionEnvelope Details of the hybrid connection configuration.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsUpdateRelayServiceConnectionResponse>
     */
    updateRelayServiceConnection(resourceGroupName: string, name: string, entityName: string, connectionEnvelope: Models.RelayServiceConnectionEntity, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsUpdateRelayServiceConnectionResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param entityName Name of the hybrid connection configuration.
     * @param connectionEnvelope Details of the hybrid connection configuration.
     * @param callback The callback
     */
    updateRelayServiceConnection(resourceGroupName: string, name: string, entityName: string, connectionEnvelope: Models.RelayServiceConnectionEntity, callback: msRest.ServiceCallback<Models.RelayServiceConnectionEntity>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param entityName Name of the hybrid connection configuration.
     * @param connectionEnvelope Details of the hybrid connection configuration.
     * @param options The optional parameters
     * @param callback The callback
     */
    updateRelayServiceConnection(resourceGroupName: string, name: string, entityName: string, connectionEnvelope: Models.RelayServiceConnectionEntity, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.RelayServiceConnectionEntity>): void;
    /**
     * Gets all scale-out instances of an app.
     * @summary Gets all scale-out instances of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsListInstanceIdentifiersResponse>
     */
    listInstanceIdentifiers(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListInstanceIdentifiersResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param callback The callback
     */
    listInstanceIdentifiers(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<Models.WebAppInstanceCollection>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param options The optional parameters
     * @param callback The callback
     */
    listInstanceIdentifiers(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.WebAppInstanceCollection>): void;
    /**
     * Get the status of the last MSDeploy operation.
     * @summary Get the status of the last MSDeploy operation.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of web app.
     * @param instanceId ID of web app instance.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsGetInstanceMsDeployStatusResponse>
     */
    getInstanceMsDeployStatus(resourceGroupName: string, name: string, instanceId: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsGetInstanceMsDeployStatusResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of web app.
     * @param instanceId ID of web app instance.
     * @param callback The callback
     */
    getInstanceMsDeployStatus(resourceGroupName: string, name: string, instanceId: string, callback: msRest.ServiceCallback<Models.MSDeployStatus>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of web app.
     * @param instanceId ID of web app instance.
     * @param options The optional parameters
     * @param callback The callback
     */
    getInstanceMsDeployStatus(resourceGroupName: string, name: string, instanceId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.MSDeployStatus>): void;
    /**
     * Invoke the MSDeploy web app extension.
     * @summary Invoke the MSDeploy web app extension.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of web app.
     * @param instanceId ID of web app instance.
     * @param mSDeploy Details of MSDeploy operation
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsCreateInstanceMSDeployOperationResponse>
     */
    createInstanceMSDeployOperation(resourceGroupName: string, name: string, instanceId: string, mSDeploy: Models.MSDeploy, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsCreateInstanceMSDeployOperationResponse>;
    /**
     * Get the MSDeploy Log for the last MSDeploy operation.
     * @summary Get the MSDeploy Log for the last MSDeploy operation.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of web app.
     * @param instanceId ID of web app instance.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsGetInstanceMSDeployLogResponse>
     */
    getInstanceMSDeployLog(resourceGroupName: string, name: string, instanceId: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsGetInstanceMSDeployLogResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of web app.
     * @param instanceId ID of web app instance.
     * @param callback The callback
     */
    getInstanceMSDeployLog(resourceGroupName: string, name: string, instanceId: string, callback: msRest.ServiceCallback<Models.MSDeployLog>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of web app.
     * @param instanceId ID of web app instance.
     * @param options The optional parameters
     * @param callback The callback
     */
    getInstanceMSDeployLog(resourceGroupName: string, name: string, instanceId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.MSDeployLog>): void;
    /**
     * Get list of processes for a web site, or a deployment slot, or for a specific scaled-out
     * instance in a web site.
     * @summary Get list of processes for a web site, or a deployment slot, or for a specific
     * scaled-out instance in a web site.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param instanceId ID of a specific scaled-out instance. This is the value of the name property
     * in the JSON response from "GET api/sites/{siteName}/instances".
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsListInstanceProcessesResponse>
     */
    listInstanceProcesses(resourceGroupName: string, name: string, instanceId: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListInstanceProcessesResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param instanceId ID of a specific scaled-out instance. This is the value of the name property
     * in the JSON response from "GET api/sites/{siteName}/instances".
     * @param callback The callback
     */
    listInstanceProcesses(resourceGroupName: string, name: string, instanceId: string, callback: msRest.ServiceCallback<Models.ProcessInfoCollection>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param instanceId ID of a specific scaled-out instance. This is the value of the name property
     * in the JSON response from "GET api/sites/{siteName}/instances".
     * @param options The optional parameters
     * @param callback The callback
     */
    listInstanceProcesses(resourceGroupName: string, name: string, instanceId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ProcessInfoCollection>): void;
    /**
     * Get process information by its ID for a specific scaled-out instance in a web site.
     * @summary Get process information by its ID for a specific scaled-out instance in a web site.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param processId PID.
     * @param instanceId ID of a specific scaled-out instance. This is the value of the name property
     * in the JSON response from "GET api/sites/{siteName}/instances".
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsGetInstanceProcessResponse>
     */
    getInstanceProcess(resourceGroupName: string, name: string, processId: string, instanceId: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsGetInstanceProcessResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param processId PID.
     * @param instanceId ID of a specific scaled-out instance. This is the value of the name property
     * in the JSON response from "GET api/sites/{siteName}/instances".
     * @param callback The callback
     */
    getInstanceProcess(resourceGroupName: string, name: string, processId: string, instanceId: string, callback: msRest.ServiceCallback<Models.ProcessInfo>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param processId PID.
     * @param instanceId ID of a specific scaled-out instance. This is the value of the name property
     * in the JSON response from "GET api/sites/{siteName}/instances".
     * @param options The optional parameters
     * @param callback The callback
     */
    getInstanceProcess(resourceGroupName: string, name: string, processId: string, instanceId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ProcessInfo>): void;
    /**
     * Terminate a process by its ID for a web site, or a deployment slot, or specific scaled-out
     * instance in a web site.
     * @summary Terminate a process by its ID for a web site, or a deployment slot, or specific
     * scaled-out instance in a web site.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param processId PID.
     * @param instanceId ID of a specific scaled-out instance. This is the value of the name property
     * in the JSON response from "GET api/sites/{siteName}/instances".
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    deleteInstanceProcess(resourceGroupName: string, name: string, processId: string, instanceId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param processId PID.
     * @param instanceId ID of a specific scaled-out instance. This is the value of the name property
     * in the JSON response from "GET api/sites/{siteName}/instances".
     * @param callback The callback
     */
    deleteInstanceProcess(resourceGroupName: string, name: string, processId: string, instanceId: string, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param processId PID.
     * @param instanceId ID of a specific scaled-out instance. This is the value of the name property
     * in the JSON response from "GET api/sites/{siteName}/instances".
     * @param options The optional parameters
     * @param callback The callback
     */
    deleteInstanceProcess(resourceGroupName: string, name: string, processId: string, instanceId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
    /**
     * Get a memory dump of a process by its ID for a specific scaled-out instance in a web site.
     * @summary Get a memory dump of a process by its ID for a specific scaled-out instance in a web
     * site.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param processId PID.
     * @param instanceId ID of a specific scaled-out instance. This is the value of the name property
     * in the JSON response from "GET api/sites/{siteName}/instances".
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsGetInstanceProcessDumpResponse>
     */
    getInstanceProcessDump(resourceGroupName: string, name: string, processId: string, instanceId: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsGetInstanceProcessDumpResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param processId PID.
     * @param instanceId ID of a specific scaled-out instance. This is the value of the name property
     * in the JSON response from "GET api/sites/{siteName}/instances".
     * @param callback The callback
     */
    getInstanceProcessDump(resourceGroupName: string, name: string, processId: string, instanceId: string, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param processId PID.
     * @param instanceId ID of a specific scaled-out instance. This is the value of the name property
     * in the JSON response from "GET api/sites/{siteName}/instances".
     * @param options The optional parameters
     * @param callback The callback
     */
    getInstanceProcessDump(resourceGroupName: string, name: string, processId: string, instanceId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
    /**
     * List module information for a process by its ID for a specific scaled-out instance in a web
     * site.
     * @summary List module information for a process by its ID for a specific scaled-out instance in a
     * web site.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param processId PID.
     * @param instanceId ID of a specific scaled-out instance. This is the value of the name property
     * in the JSON response from "GET api/sites/{siteName}/instances".
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsListInstanceProcessModulesResponse>
     */
    listInstanceProcessModules(resourceGroupName: string, name: string, processId: string, instanceId: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListInstanceProcessModulesResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param processId PID.
     * @param instanceId ID of a specific scaled-out instance. This is the value of the name property
     * in the JSON response from "GET api/sites/{siteName}/instances".
     * @param callback The callback
     */
    listInstanceProcessModules(resourceGroupName: string, name: string, processId: string, instanceId: string, callback: msRest.ServiceCallback<Models.ProcessModuleInfoCollection>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param processId PID.
     * @param instanceId ID of a specific scaled-out instance. This is the value of the name property
     * in the JSON response from "GET api/sites/{siteName}/instances".
     * @param options The optional parameters
     * @param callback The callback
     */
    listInstanceProcessModules(resourceGroupName: string, name: string, processId: string, instanceId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ProcessModuleInfoCollection>): void;
    /**
     * Get process information by its ID for a specific scaled-out instance in a web site.
     * @summary Get process information by its ID for a specific scaled-out instance in a web site.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param processId PID.
     * @param baseAddress Module base address.
     * @param instanceId ID of a specific scaled-out instance. This is the value of the name property
     * in the JSON response from "GET api/sites/{siteName}/instances".
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsGetInstanceProcessModuleResponse>
     */
    getInstanceProcessModule(resourceGroupName: string, name: string, processId: string, baseAddress: string, instanceId: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsGetInstanceProcessModuleResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param processId PID.
     * @param baseAddress Module base address.
     * @param instanceId ID of a specific scaled-out instance. This is the value of the name property
     * in the JSON response from "GET api/sites/{siteName}/instances".
     * @param callback The callback
     */
    getInstanceProcessModule(resourceGroupName: string, name: string, processId: string, baseAddress: string, instanceId: string, callback: msRest.ServiceCallback<Models.ProcessModuleInfo>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param processId PID.
     * @param baseAddress Module base address.
     * @param instanceId ID of a specific scaled-out instance. This is the value of the name property
     * in the JSON response from "GET api/sites/{siteName}/instances".
     * @param options The optional parameters
     * @param callback The callback
     */
    getInstanceProcessModule(resourceGroupName: string, name: string, processId: string, baseAddress: string, instanceId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ProcessModuleInfo>): void;
    /**
     * List the threads in a process by its ID for a specific scaled-out instance in a web site.
     * @summary List the threads in a process by its ID for a specific scaled-out instance in a web
     * site.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param processId PID.
     * @param instanceId ID of a specific scaled-out instance. This is the value of the name property
     * in the JSON response from "GET api/sites/{siteName}/instances".
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsListInstanceProcessThreadsResponse>
     */
    listInstanceProcessThreads(resourceGroupName: string, name: string, processId: string, instanceId: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListInstanceProcessThreadsResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param processId PID.
     * @param instanceId ID of a specific scaled-out instance. This is the value of the name property
     * in the JSON response from "GET api/sites/{siteName}/instances".
     * @param callback The callback
     */
    listInstanceProcessThreads(resourceGroupName: string, name: string, processId: string, instanceId: string, callback: msRest.ServiceCallback<Models.ProcessThreadInfoCollection>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param processId PID.
     * @param instanceId ID of a specific scaled-out instance. This is the value of the name property
     * in the JSON response from "GET api/sites/{siteName}/instances".
     * @param options The optional parameters
     * @param callback The callback
     */
    listInstanceProcessThreads(resourceGroupName: string, name: string, processId: string, instanceId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ProcessThreadInfoCollection>): void;
    /**
     * Get thread information by Thread ID for a specific process, in a specific scaled-out instance in
     * a web site.
     * @summary Get thread information by Thread ID for a specific process, in a specific scaled-out
     * instance in a web site.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param processId PID.
     * @param threadId TID.
     * @param instanceId ID of a specific scaled-out instance. This is the value of the name property
     * in the JSON response from "GET api/sites/{siteName}/instances".
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsGetInstanceProcessThreadResponse>
     */
    getInstanceProcessThread(resourceGroupName: string, name: string, processId: string, threadId: string, instanceId: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsGetInstanceProcessThreadResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param processId PID.
     * @param threadId TID.
     * @param instanceId ID of a specific scaled-out instance. This is the value of the name property
     * in the JSON response from "GET api/sites/{siteName}/instances".
     * @param callback The callback
     */
    getInstanceProcessThread(resourceGroupName: string, name: string, processId: string, threadId: string, instanceId: string, callback: msRest.ServiceCallback<Models.ProcessThreadInfo>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param processId PID.
     * @param threadId TID.
     * @param instanceId ID of a specific scaled-out instance. This is the value of the name property
     * in the JSON response from "GET api/sites/{siteName}/instances".
     * @param options The optional parameters
     * @param callback The callback
     */
    getInstanceProcessThread(resourceGroupName: string, name: string, processId: string, threadId: string, instanceId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ProcessThreadInfo>): void;
    /**
     * Shows whether an app can be cloned to another resource group or subscription.
     * @summary Shows whether an app can be cloned to another resource group or subscription.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsIsCloneableResponse>
     */
    isCloneable(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsIsCloneableResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param callback The callback
     */
    isCloneable(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<Models.SiteCloneability>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param options The optional parameters
     * @param callback The callback
     */
    isCloneable(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SiteCloneability>): void;
    /**
     * This is to allow calling via powershell and ARM template.
     * @summary This is to allow calling via powershell and ARM template.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsListSyncFunctionTriggersResponse>
     */
    listSyncFunctionTriggers(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListSyncFunctionTriggersResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param callback The callback
     */
    listSyncFunctionTriggers(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<Models.FunctionSecrets>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param options The optional parameters
     * @param callback The callback
     */
    listSyncFunctionTriggers(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.FunctionSecrets>): void;
    /**
     * Gets all metric definitions of an app (or deployment slot, if specified).
     * @summary Gets all metric definitions of an app (or deployment slot, if specified).
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsListMetricDefinitionsResponse>
     */
    listMetricDefinitions(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListMetricDefinitionsResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param callback The callback
     */
    listMetricDefinitions(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<Models.ResourceMetricDefinitionCollection>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param options The optional parameters
     * @param callback The callback
     */
    listMetricDefinitions(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ResourceMetricDefinitionCollection>): void;
    /**
     * Gets performance metrics of an app (or deployment slot, if specified).
     * @summary Gets performance metrics of an app (or deployment slot, if specified).
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsListMetricsResponse>
     */
    listMetrics(resourceGroupName: string, name: string, options?: Models.WebAppsListMetricsOptionalParams): Promise<Models.WebAppsListMetricsResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param callback The callback
     */
    listMetrics(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<Models.ResourceMetricCollection>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param options The optional parameters
     * @param callback The callback
     */
    listMetrics(resourceGroupName: string, name: string, options: Models.WebAppsListMetricsOptionalParams, callback: msRest.ServiceCallback<Models.ResourceMetricCollection>): void;
    /**
     * Restores a web app.
     * @summary Restores a web app.
     * @param subscriptionName Azure subscription.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of web app.
     * @param migrationOptions Migration migrationOptions.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsMigrateStorageResponse>
     */
    migrateStorage(subscriptionName: string, resourceGroupName: string, name: string, migrationOptions: Models.StorageMigrationOptions, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsMigrateStorageResponse>;
    /**
     * Migrates a local (in-app) MySql database to a remote MySql database.
     * @summary Migrates a local (in-app) MySql database to a remote MySql database.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of web app.
     * @param migrationRequestEnvelope MySql migration options.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsMigrateMySqlResponse>
     */
    migrateMySql(resourceGroupName: string, name: string, migrationRequestEnvelope: Models.MigrateMySqlRequest, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsMigrateMySqlResponse>;
    /**
     * Returns the status of MySql in app migration, if one is active, and whether or not MySql in app
     * is enabled
     * @summary Returns the status of MySql in app migration, if one is active, and whether or not
     * MySql in app is enabled
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of web app.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsGetMigrateMySqlStatusResponse>
     */
    getMigrateMySqlStatus(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsGetMigrateMySqlStatusResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of web app.
     * @param callback The callback
     */
    getMigrateMySqlStatus(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<Models.MigrateMySqlStatus>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of web app.
     * @param options The optional parameters
     * @param callback The callback
     */
    getMigrateMySqlStatus(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.MigrateMySqlStatus>): void;
    /**
     * Gets a Swift Virtual Network connection.
     * @summary Gets a Swift Virtual Network connection.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsGetSwiftVirtualNetworkConnectionResponse>
     */
    getSwiftVirtualNetworkConnection(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsGetSwiftVirtualNetworkConnectionResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param callback The callback
     */
    getSwiftVirtualNetworkConnection(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<Models.SwiftVirtualNetwork>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param options The optional parameters
     * @param callback The callback
     */
    getSwiftVirtualNetworkConnection(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SwiftVirtualNetwork>): void;
    /**
     * Integrates this Web App with a Virtual Network. This requires that 1) "swiftSupported" is true
     * when doing a GET against this resource, and 2) that the target Subnet has already been
     * delegated, and is not
     * in use by another App Service Plan other than the one this App is in.
     * @summary Integrates this Web App with a Virtual Network. This requires that 1) "swiftSupported"
     * is true when doing a GET against this resource, and 2) that the target Subnet has already been
     * delegated, and is not
     * in use by another App Service Plan other than the one this App is in.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param connectionEnvelope Properties of the Virtual Network connection. See example.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsCreateOrUpdateSwiftVirtualNetworkConnectionResponse>
     */
    createOrUpdateSwiftVirtualNetworkConnection(resourceGroupName: string, name: string, connectionEnvelope: Models.SwiftVirtualNetwork, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsCreateOrUpdateSwiftVirtualNetworkConnectionResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param connectionEnvelope Properties of the Virtual Network connection. See example.
     * @param callback The callback
     */
    createOrUpdateSwiftVirtualNetworkConnection(resourceGroupName: string, name: string, connectionEnvelope: Models.SwiftVirtualNetwork, callback: msRest.ServiceCallback<Models.SwiftVirtualNetwork>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param connectionEnvelope Properties of the Virtual Network connection. See example.
     * @param options The optional parameters
     * @param callback The callback
     */
    createOrUpdateSwiftVirtualNetworkConnection(resourceGroupName: string, name: string, connectionEnvelope: Models.SwiftVirtualNetwork, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SwiftVirtualNetwork>): void;
    /**
     * Deletes a Swift Virtual Network connection from an app (or deployment slot).
     * @summary Deletes a Swift Virtual Network connection from an app (or deployment slot).
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    deleteSwiftVirtualNetwork(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param callback The callback
     */
    deleteSwiftVirtualNetwork(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param options The optional parameters
     * @param callback The callback
     */
    deleteSwiftVirtualNetwork(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
    /**
     * Integrates this Web App with a Virtual Network. This requires that 1) "swiftSupported" is true
     * when doing a GET against this resource, and 2) that the target Subnet has already been
     * delegated, and is not
     * in use by another App Service Plan other than the one this App is in.
     * @summary Integrates this Web App with a Virtual Network. This requires that 1) "swiftSupported"
     * is true when doing a GET against this resource, and 2) that the target Subnet has already been
     * delegated, and is not
     * in use by another App Service Plan other than the one this App is in.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param connectionEnvelope Properties of the Virtual Network connection. See example.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsUpdateSwiftVirtualNetworkConnectionResponse>
     */
    updateSwiftVirtualNetworkConnection(resourceGroupName: string, name: string, connectionEnvelope: Models.SwiftVirtualNetwork, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsUpdateSwiftVirtualNetworkConnectionResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param connectionEnvelope Properties of the Virtual Network connection. See example.
     * @param callback The callback
     */
    updateSwiftVirtualNetworkConnection(resourceGroupName: string, name: string, connectionEnvelope: Models.SwiftVirtualNetwork, callback: msRest.ServiceCallback<Models.SwiftVirtualNetwork>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param connectionEnvelope Properties of the Virtual Network connection. See example.
     * @param options The optional parameters
     * @param callback The callback
     */
    updateSwiftVirtualNetworkConnection(resourceGroupName: string, name: string, connectionEnvelope: Models.SwiftVirtualNetwork, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SwiftVirtualNetwork>): void;
    /**
     * Gets all network features used by the app (or deployment slot, if specified).
     * @summary Gets all network features used by the app (or deployment slot, if specified).
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param view The type of view. This can either be "summary" or "detailed".
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsListNetworkFeaturesResponse>
     */
    listNetworkFeatures(resourceGroupName: string, name: string, view: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListNetworkFeaturesResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param view The type of view. This can either be "summary" or "detailed".
     * @param callback The callback
     */
    listNetworkFeatures(resourceGroupName: string, name: string, view: string, callback: msRest.ServiceCallback<Models.NetworkFeatures>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param view The type of view. This can either be "summary" or "detailed".
     * @param options The optional parameters
     * @param callback The callback
     */
    listNetworkFeatures(resourceGroupName: string, name: string, view: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.NetworkFeatures>): void;
    /**
     * Gets a named operation for a network trace capturing (or deployment slot, if specified).
     * @summary Gets a named operation for a network trace capturing (or deployment slot, if
     * specified).
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param operationId GUID of the operation.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsGetNetworkTraceOperationResponse>
     */
    getNetworkTraceOperation(resourceGroupName: string, name: string, operationId: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsGetNetworkTraceOperationResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param operationId GUID of the operation.
     * @param callback The callback
     */
    getNetworkTraceOperation(resourceGroupName: string, name: string, operationId: string, callback: msRest.ServiceCallback<Models.NetworkTrace[]>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param operationId GUID of the operation.
     * @param options The optional parameters
     * @param callback The callback
     */
    getNetworkTraceOperation(resourceGroupName: string, name: string, operationId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.NetworkTrace[]>): void;
    /**
     * Start capturing network packets for the site (To be deprecated).
     * @summary Start capturing network packets for the site (To be deprecated).
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name The name of the web app.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsStartWebSiteNetworkTraceResponse>
     */
    startWebSiteNetworkTrace(resourceGroupName: string, name: string, options?: Models.WebAppsStartWebSiteNetworkTraceOptionalParams): Promise<Models.WebAppsStartWebSiteNetworkTraceResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name The name of the web app.
     * @param callback The callback
     */
    startWebSiteNetworkTrace(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<string>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name The name of the web app.
     * @param options The optional parameters
     * @param callback The callback
     */
    startWebSiteNetworkTrace(resourceGroupName: string, name: string, options: Models.WebAppsStartWebSiteNetworkTraceOptionalParams, callback: msRest.ServiceCallback<string>): void;
    /**
     * Start capturing network packets for the site.
     * @summary Start capturing network packets for the site.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name The name of the web app.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsStartWebSiteNetworkTraceOperationResponse>
     */
    startWebSiteNetworkTraceOperation(resourceGroupName: string, name: string, options?: Models.WebAppsStartWebSiteNetworkTraceOperationOptionalParams): Promise<Models.WebAppsStartWebSiteNetworkTraceOperationResponse>;
    /**
     * Stop ongoing capturing network packets for the site.
     * @summary Stop ongoing capturing network packets for the site.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name The name of the web app.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    stopWebSiteNetworkTrace(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name The name of the web app.
     * @param callback The callback
     */
    stopWebSiteNetworkTrace(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name The name of the web app.
     * @param options The optional parameters
     * @param callback The callback
     */
    stopWebSiteNetworkTrace(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
    /**
     * Gets a named operation for a network trace capturing (or deployment slot, if specified).
     * @summary Gets a named operation for a network trace capturing (or deployment slot, if
     * specified).
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param operationId GUID of the operation.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsGetNetworkTracesResponse>
     */
    getNetworkTraces(resourceGroupName: string, name: string, operationId: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsGetNetworkTracesResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param operationId GUID of the operation.
     * @param callback The callback
     */
    getNetworkTraces(resourceGroupName: string, name: string, operationId: string, callback: msRest.ServiceCallback<Models.NetworkTrace[]>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param operationId GUID of the operation.
     * @param options The optional parameters
     * @param callback The callback
     */
    getNetworkTraces(resourceGroupName: string, name: string, operationId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.NetworkTrace[]>): void;
    /**
     * Gets a named operation for a network trace capturing (or deployment slot, if specified).
     * @summary Gets a named operation for a network trace capturing (or deployment slot, if
     * specified).
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param operationId GUID of the operation.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsGetNetworkTraceOperationV2Response>
     */
    getNetworkTraceOperationV2(resourceGroupName: string, name: string, operationId: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsGetNetworkTraceOperationV2Response>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param operationId GUID of the operation.
     * @param callback The callback
     */
    getNetworkTraceOperationV2(resourceGroupName: string, name: string, operationId: string, callback: msRest.ServiceCallback<Models.NetworkTrace[]>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param operationId GUID of the operation.
     * @param options The optional parameters
     * @param callback The callback
     */
    getNetworkTraceOperationV2(resourceGroupName: string, name: string, operationId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.NetworkTrace[]>): void;
    /**
     * Gets a named operation for a network trace capturing (or deployment slot, if specified).
     * @summary Gets a named operation for a network trace capturing (or deployment slot, if
     * specified).
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param operationId GUID of the operation.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsGetNetworkTracesV2Response>
     */
    getNetworkTracesV2(resourceGroupName: string, name: string, operationId: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsGetNetworkTracesV2Response>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param operationId GUID of the operation.
     * @param callback The callback
     */
    getNetworkTracesV2(resourceGroupName: string, name: string, operationId: string, callback: msRest.ServiceCallback<Models.NetworkTrace[]>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param operationId GUID of the operation.
     * @param options The optional parameters
     * @param callback The callback
     */
    getNetworkTracesV2(resourceGroupName: string, name: string, operationId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.NetworkTrace[]>): void;
    /**
     * Generates a new publishing password for an app (or deployment slot, if specified).
     * @summary Generates a new publishing password for an app (or deployment slot, if specified).
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    generateNewSitePublishingPassword(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param callback The callback
     */
    generateNewSitePublishingPassword(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param options The optional parameters
     * @param callback The callback
     */
    generateNewSitePublishingPassword(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
    /**
     * Gets perfmon counters for web app.
     * @summary Gets perfmon counters for web app.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of web app.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsListPerfMonCountersResponse>
     */
    listPerfMonCounters(resourceGroupName: string, name: string, options?: Models.WebAppsListPerfMonCountersOptionalParams): Promise<Models.WebAppsListPerfMonCountersResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of web app.
     * @param callback The callback
     */
    listPerfMonCounters(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<Models.PerfMonCounterCollection>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of web app.
     * @param options The optional parameters
     * @param callback The callback
     */
    listPerfMonCounters(resourceGroupName: string, name: string, options: Models.WebAppsListPerfMonCountersOptionalParams, callback: msRest.ServiceCallback<Models.PerfMonCounterCollection>): void;
    /**
     * Gets web app's event logs.
     * @summary Gets web app's event logs.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of web app.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsGetSitePhpErrorLogFlagResponse>
     */
    getSitePhpErrorLogFlag(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsGetSitePhpErrorLogFlagResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of web app.
     * @param callback The callback
     */
    getSitePhpErrorLogFlag(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<Models.SitePhpErrorLogFlag>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of web app.
     * @param options The optional parameters
     * @param callback The callback
     */
    getSitePhpErrorLogFlag(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SitePhpErrorLogFlag>): void;
    /**
     * Gets the premier add-ons of an app.
     * @summary Gets the premier add-ons of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsListPremierAddOnsResponse>
     */
    listPremierAddOns(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListPremierAddOnsResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param callback The callback
     */
    listPremierAddOns(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<Models.PremierAddOn>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param options The optional parameters
     * @param callback The callback
     */
    listPremierAddOns(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PremierAddOn>): void;
    /**
     * Gets a named add-on of an app.
     * @summary Gets a named add-on of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param premierAddOnName Add-on name.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsGetPremierAddOnResponse>
     */
    getPremierAddOn(resourceGroupName: string, name: string, premierAddOnName: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsGetPremierAddOnResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param premierAddOnName Add-on name.
     * @param callback The callback
     */
    getPremierAddOn(resourceGroupName: string, name: string, premierAddOnName: string, callback: msRest.ServiceCallback<Models.PremierAddOn>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param premierAddOnName Add-on name.
     * @param options The optional parameters
     * @param callback The callback
     */
    getPremierAddOn(resourceGroupName: string, name: string, premierAddOnName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PremierAddOn>): void;
    /**
     * Updates a named add-on of an app.
     * @summary Updates a named add-on of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param premierAddOnName Add-on name.
     * @param premierAddOn A JSON representation of the edited premier add-on.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsAddPremierAddOnResponse>
     */
    addPremierAddOn(resourceGroupName: string, name: string, premierAddOnName: string, premierAddOn: Models.PremierAddOn, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsAddPremierAddOnResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param premierAddOnName Add-on name.
     * @param premierAddOn A JSON representation of the edited premier add-on.
     * @param callback The callback
     */
    addPremierAddOn(resourceGroupName: string, name: string, premierAddOnName: string, premierAddOn: Models.PremierAddOn, callback: msRest.ServiceCallback<Models.PremierAddOn>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param premierAddOnName Add-on name.
     * @param premierAddOn A JSON representation of the edited premier add-on.
     * @param options The optional parameters
     * @param callback The callback
     */
    addPremierAddOn(resourceGroupName: string, name: string, premierAddOnName: string, premierAddOn: Models.PremierAddOn, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PremierAddOn>): void;
    /**
     * Delete a premier add-on from an app.
     * @summary Delete a premier add-on from an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param premierAddOnName Add-on name.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    deletePremierAddOn(resourceGroupName: string, name: string, premierAddOnName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param premierAddOnName Add-on name.
     * @param callback The callback
     */
    deletePremierAddOn(resourceGroupName: string, name: string, premierAddOnName: string, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param premierAddOnName Add-on name.
     * @param options The optional parameters
     * @param callback The callback
     */
    deletePremierAddOn(resourceGroupName: string, name: string, premierAddOnName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
    /**
     * Updates a named add-on of an app.
     * @summary Updates a named add-on of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param premierAddOnName Add-on name.
     * @param premierAddOn A JSON representation of the edited premier add-on.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsUpdatePremierAddOnResponse>
     */
    updatePremierAddOn(resourceGroupName: string, name: string, premierAddOnName: string, premierAddOn: Models.PremierAddOnPatchResource, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsUpdatePremierAddOnResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param premierAddOnName Add-on name.
     * @param premierAddOn A JSON representation of the edited premier add-on.
     * @param callback The callback
     */
    updatePremierAddOn(resourceGroupName: string, name: string, premierAddOnName: string, premierAddOn: Models.PremierAddOnPatchResource, callback: msRest.ServiceCallback<Models.PremierAddOn>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param premierAddOnName Add-on name.
     * @param premierAddOn A JSON representation of the edited premier add-on.
     * @param options The optional parameters
     * @param callback The callback
     */
    updatePremierAddOn(resourceGroupName: string, name: string, premierAddOnName: string, premierAddOn: Models.PremierAddOnPatchResource, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PremierAddOn>): void;
    /**
     * Gets data around private site access enablement and authorized Virtual Networks that can access
     * the site.
     * @summary Gets data around private site access enablement and authorized Virtual Networks that
     * can access the site.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name The name of the web app.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsGetPrivateAccessResponse>
     */
    getPrivateAccess(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsGetPrivateAccessResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name The name of the web app.
     * @param callback The callback
     */
    getPrivateAccess(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<Models.PrivateAccess>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name The name of the web app.
     * @param options The optional parameters
     * @param callback The callback
     */
    getPrivateAccess(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PrivateAccess>): void;
    /**
     * Sets data around private site access enablement and authorized Virtual Networks that can access
     * the site.
     * @summary Sets data around private site access enablement and authorized Virtual Networks that
     * can access the site.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name The name of the web app.
     * @param access The information for the private access
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsPutPrivateAccessVnetResponse>
     */
    putPrivateAccessVnet(resourceGroupName: string, name: string, access: Models.PrivateAccess, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsPutPrivateAccessVnetResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name The name of the web app.
     * @param access The information for the private access
     * @param callback The callback
     */
    putPrivateAccessVnet(resourceGroupName: string, name: string, access: Models.PrivateAccess, callback: msRest.ServiceCallback<Models.PrivateAccess>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name The name of the web app.
     * @param access The information for the private access
     * @param options The optional parameters
     * @param callback The callback
     */
    putPrivateAccessVnet(resourceGroupName: string, name: string, access: Models.PrivateAccess, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PrivateAccess>): void;
    /**
     * Get list of processes for a web site, or a deployment slot, or for a specific scaled-out
     * instance in a web site.
     * @summary Get list of processes for a web site, or a deployment slot, or for a specific
     * scaled-out instance in a web site.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsListProcessesResponse>
     */
    listProcesses(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListProcessesResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param callback The callback
     */
    listProcesses(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<Models.ProcessInfoCollection>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param options The optional parameters
     * @param callback The callback
     */
    listProcesses(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ProcessInfoCollection>): void;
    /**
     * Get process information by its ID for a specific scaled-out instance in a web site.
     * @summary Get process information by its ID for a specific scaled-out instance in a web site.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param processId PID.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsGetProcessResponse>
     */
    getProcess(resourceGroupName: string, name: string, processId: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsGetProcessResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param processId PID.
     * @param callback The callback
     */
    getProcess(resourceGroupName: string, name: string, processId: string, callback: msRest.ServiceCallback<Models.ProcessInfo>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param processId PID.
     * @param options The optional parameters
     * @param callback The callback
     */
    getProcess(resourceGroupName: string, name: string, processId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ProcessInfo>): void;
    /**
     * Terminate a process by its ID for a web site, or a deployment slot, or specific scaled-out
     * instance in a web site.
     * @summary Terminate a process by its ID for a web site, or a deployment slot, or specific
     * scaled-out instance in a web site.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param processId PID.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    deleteProcess(resourceGroupName: string, name: string, processId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param processId PID.
     * @param callback The callback
     */
    deleteProcess(resourceGroupName: string, name: string, processId: string, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param processId PID.
     * @param options The optional parameters
     * @param callback The callback
     */
    deleteProcess(resourceGroupName: string, name: string, processId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
    /**
     * Get a memory dump of a process by its ID for a specific scaled-out instance in a web site.
     * @summary Get a memory dump of a process by its ID for a specific scaled-out instance in a web
     * site.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param processId PID.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsGetProcessDumpResponse>
     */
    getProcessDump(resourceGroupName: string, name: string, processId: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsGetProcessDumpResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param processId PID.
     * @param callback The callback
     */
    getProcessDump(resourceGroupName: string, name: string, processId: string, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param processId PID.
     * @param options The optional parameters
     * @param callback The callback
     */
    getProcessDump(resourceGroupName: string, name: string, processId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
    /**
     * List module information for a process by its ID for a specific scaled-out instance in a web
     * site.
     * @summary List module information for a process by its ID for a specific scaled-out instance in a
     * web site.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param processId PID.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsListProcessModulesResponse>
     */
    listProcessModules(resourceGroupName: string, name: string, processId: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListProcessModulesResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param processId PID.
     * @param callback The callback
     */
    listProcessModules(resourceGroupName: string, name: string, processId: string, callback: msRest.ServiceCallback<Models.ProcessModuleInfoCollection>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param processId PID.
     * @param options The optional parameters
     * @param callback The callback
     */
    listProcessModules(resourceGroupName: string, name: string, processId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ProcessModuleInfoCollection>): void;
    /**
     * Get process information by its ID for a specific scaled-out instance in a web site.
     * @summary Get process information by its ID for a specific scaled-out instance in a web site.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param processId PID.
     * @param baseAddress Module base address.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsGetProcessModuleResponse>
     */
    getProcessModule(resourceGroupName: string, name: string, processId: string, baseAddress: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsGetProcessModuleResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param processId PID.
     * @param baseAddress Module base address.
     * @param callback The callback
     */
    getProcessModule(resourceGroupName: string, name: string, processId: string, baseAddress: string, callback: msRest.ServiceCallback<Models.ProcessModuleInfo>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param processId PID.
     * @param baseAddress Module base address.
     * @param options The optional parameters
     * @param callback The callback
     */
    getProcessModule(resourceGroupName: string, name: string, processId: string, baseAddress: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ProcessModuleInfo>): void;
    /**
     * List the threads in a process by its ID for a specific scaled-out instance in a web site.
     * @summary List the threads in a process by its ID for a specific scaled-out instance in a web
     * site.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param processId PID.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsListProcessThreadsResponse>
     */
    listProcessThreads(resourceGroupName: string, name: string, processId: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListProcessThreadsResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param processId PID.
     * @param callback The callback
     */
    listProcessThreads(resourceGroupName: string, name: string, processId: string, callback: msRest.ServiceCallback<Models.ProcessThreadInfoCollection>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param processId PID.
     * @param options The optional parameters
     * @param callback The callback
     */
    listProcessThreads(resourceGroupName: string, name: string, processId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ProcessThreadInfoCollection>): void;
    /**
     * Get thread information by Thread ID for a specific process, in a specific scaled-out instance in
     * a web site.
     * @summary Get thread information by Thread ID for a specific process, in a specific scaled-out
     * instance in a web site.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param processId PID.
     * @param threadId TID.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsGetProcessThreadResponse>
     */
    getProcessThread(resourceGroupName: string, name: string, processId: string, threadId: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsGetProcessThreadResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param processId PID.
     * @param threadId TID.
     * @param callback The callback
     */
    getProcessThread(resourceGroupName: string, name: string, processId: string, threadId: string, callback: msRest.ServiceCallback<Models.ProcessThreadInfo>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param processId PID.
     * @param threadId TID.
     * @param options The optional parameters
     * @param callback The callback
     */
    getProcessThread(resourceGroupName: string, name: string, processId: string, threadId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ProcessThreadInfo>): void;
    /**
     * Get public certificates for an app or a deployment slot.
     * @summary Get public certificates for an app or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsListPublicCertificatesResponse>
     */
    listPublicCertificates(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListPublicCertificatesResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param callback The callback
     */
    listPublicCertificates(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<Models.PublicCertificateCollection>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param options The optional parameters
     * @param callback The callback
     */
    listPublicCertificates(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PublicCertificateCollection>): void;
    /**
     * Get the named public certificate for an app (or deployment slot, if specified).
     * @summary Get the named public certificate for an app (or deployment slot, if specified).
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param publicCertificateName Public certificate name.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsGetPublicCertificateResponse>
     */
    getPublicCertificate(resourceGroupName: string, name: string, publicCertificateName: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsGetPublicCertificateResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param publicCertificateName Public certificate name.
     * @param callback The callback
     */
    getPublicCertificate(resourceGroupName: string, name: string, publicCertificateName: string, callback: msRest.ServiceCallback<Models.PublicCertificate>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param publicCertificateName Public certificate name.
     * @param options The optional parameters
     * @param callback The callback
     */
    getPublicCertificate(resourceGroupName: string, name: string, publicCertificateName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PublicCertificate>): void;
    /**
     * Creates a hostname binding for an app.
     * @summary Creates a hostname binding for an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param publicCertificateName Public certificate name.
     * @param publicCertificate Public certificate details. This is the JSON representation of a
     * PublicCertificate object.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsCreateOrUpdatePublicCertificateResponse>
     */
    createOrUpdatePublicCertificate(resourceGroupName: string, name: string, publicCertificateName: string, publicCertificate: Models.PublicCertificate, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsCreateOrUpdatePublicCertificateResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param publicCertificateName Public certificate name.
     * @param publicCertificate Public certificate details. This is the JSON representation of a
     * PublicCertificate object.
     * @param callback The callback
     */
    createOrUpdatePublicCertificate(resourceGroupName: string, name: string, publicCertificateName: string, publicCertificate: Models.PublicCertificate, callback: msRest.ServiceCallback<Models.PublicCertificate>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param publicCertificateName Public certificate name.
     * @param publicCertificate Public certificate details. This is the JSON representation of a
     * PublicCertificate object.
     * @param options The optional parameters
     * @param callback The callback
     */
    createOrUpdatePublicCertificate(resourceGroupName: string, name: string, publicCertificateName: string, publicCertificate: Models.PublicCertificate, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PublicCertificate>): void;
    /**
     * Deletes a hostname binding for an app.
     * @summary Deletes a hostname binding for an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param publicCertificateName Public certificate name.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    deletePublicCertificate(resourceGroupName: string, name: string, publicCertificateName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param publicCertificateName Public certificate name.
     * @param callback The callback
     */
    deletePublicCertificate(resourceGroupName: string, name: string, publicCertificateName: string, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param publicCertificateName Public certificate name.
     * @param options The optional parameters
     * @param callback The callback
     */
    deletePublicCertificate(resourceGroupName: string, name: string, publicCertificateName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
    /**
     * Gets the publishing profile for an app (or deployment slot, if specified).
     * @summary Gets the publishing profile for an app (or deployment slot, if specified).
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param publishingProfileOptions Specifies publishingProfileOptions for publishing profile. For
     * example, use {"format": "FileZilla3"} to get a FileZilla publishing profile.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsListPublishingProfileXmlWithSecretsResponse>
     */
    listPublishingProfileXmlWithSecrets(resourceGroupName: string, name: string, publishingProfileOptions: Models.CsmPublishingProfileOptions, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListPublishingProfileXmlWithSecretsResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param publishingProfileOptions Specifies publishingProfileOptions for publishing profile. For
     * example, use {"format": "FileZilla3"} to get a FileZilla publishing profile.
     * @param callback The callback
     */
    listPublishingProfileXmlWithSecrets(resourceGroupName: string, name: string, publishingProfileOptions: Models.CsmPublishingProfileOptions, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param publishingProfileOptions Specifies publishingProfileOptions for publishing profile. For
     * example, use {"format": "FileZilla3"} to get a FileZilla publishing profile.
     * @param options The optional parameters
     * @param callback The callback
     */
    listPublishingProfileXmlWithSecrets(resourceGroupName: string, name: string, publishingProfileOptions: Models.CsmPublishingProfileOptions, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
    /**
     * Resets the configuration settings of the current slot if they were previously modified by
     * calling the API with POST.
     * @summary Resets the configuration settings of the current slot if they were previously modified
     * by calling the API with POST.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    resetProductionSlotConfig(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param callback The callback
     */
    resetProductionSlotConfig(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param options The optional parameters
     * @param callback The callback
     */
    resetProductionSlotConfig(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
    /**
     * Restarts an app (or deployment slot, if specified).
     * @summary Restarts an app (or deployment slot, if specified).
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    restart(resourceGroupName: string, name: string, options?: Models.WebAppsRestartOptionalParams): Promise<msRest.RestResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param callback The callback
     */
    restart(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param options The optional parameters
     * @param callback The callback
     */
    restart(resourceGroupName: string, name: string, options: Models.WebAppsRestartOptionalParams, callback: msRest.ServiceCallback<void>): void;
    /**
     * Restores an app from a backup blob in Azure Storage.
     * @summary Restores an app from a backup blob in Azure Storage.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param request Information on restore request .
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    restoreFromBackupBlob(resourceGroupName: string, name: string, request: Models.RestoreRequest, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * Restores a deleted web app to this web app.
     * @summary Restores a deleted web app to this web app.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of web app.
     * @param restoreRequest Deleted web app restore information.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    restoreFromDeletedApp(resourceGroupName: string, name: string, restoreRequest: Models.DeletedAppRestoreRequest, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * Restores a web app from a snapshot.
     * @summary Restores a web app from a snapshot.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of web app.
     * @param restoreRequest Snapshot restore settings. Snapshot information can be obtained by calling
     * GetDeletedSites or GetSiteSnapshots API.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    restoreSnapshot(resourceGroupName: string, name: string, restoreRequest: Models.SnapshotRestoreRequest, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * Get list of siteextensions for a web site, or a deployment slot.
     * @summary Get list of siteextensions for a web site, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsListSiteExtensionsResponse>
     */
    listSiteExtensions(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListSiteExtensionsResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param callback The callback
     */
    listSiteExtensions(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<Models.SiteExtensionInfoCollection>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param options The optional parameters
     * @param callback The callback
     */
    listSiteExtensions(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SiteExtensionInfoCollection>): void;
    /**
     * Get site extension information by its ID for a web site, or a deployment slot.
     * @summary Get site extension information by its ID for a web site, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param siteExtensionId Site extension name.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsGetSiteExtensionResponse>
     */
    getSiteExtension(resourceGroupName: string, name: string, siteExtensionId: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsGetSiteExtensionResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param siteExtensionId Site extension name.
     * @param callback The callback
     */
    getSiteExtension(resourceGroupName: string, name: string, siteExtensionId: string, callback: msRest.ServiceCallback<Models.SiteExtensionInfo>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param siteExtensionId Site extension name.
     * @param options The optional parameters
     * @param callback The callback
     */
    getSiteExtension(resourceGroupName: string, name: string, siteExtensionId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SiteExtensionInfo>): void;
    /**
     * Install site extension on a web site, or a deployment slot.
     * @summary Install site extension on a web site, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param siteExtensionId Site extension name.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsInstallSiteExtensionResponse>
     */
    installSiteExtension(resourceGroupName: string, name: string, siteExtensionId: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsInstallSiteExtensionResponse>;
    /**
     * Remove a site extension from a web site, or a deployment slot.
     * @summary Remove a site extension from a web site, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param siteExtensionId Site extension name.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    deleteSiteExtension(resourceGroupName: string, name: string, siteExtensionId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param siteExtensionId Site extension name.
     * @param callback The callback
     */
    deleteSiteExtension(resourceGroupName: string, name: string, siteExtensionId: string, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param siteExtensionId Site extension name.
     * @param options The optional parameters
     * @param callback The callback
     */
    deleteSiteExtension(resourceGroupName: string, name: string, siteExtensionId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
    /**
     * Gets an app's deployment slots.
     * @summary Gets an app's deployment slots.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsListSlotsResponse>
     */
    listSlots(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListSlotsResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param callback The callback
     */
    listSlots(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<Models.WebAppCollection>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param options The optional parameters
     * @param callback The callback
     */
    listSlots(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.WebAppCollection>): void;
    /**
     * Gets the details of a web, mobile, or API app.
     * @summary Gets the details of a web, mobile, or API app.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slot Name of the deployment slot. By default, this API returns the production slot.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsGetSlotResponse>
     */
    getSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsGetSlotResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slot Name of the deployment slot. By default, this API returns the production slot.
     * @param callback The callback
     */
    getSlot(resourceGroupName: string, name: string, slot: string, callback: msRest.ServiceCallback<Models.Site>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slot Name of the deployment slot. By default, this API returns the production slot.
     * @param options The optional parameters
     * @param callback The callback
     */
    getSlot(resourceGroupName: string, name: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Site>): void;
    /**
     * Creates a new web, mobile, or API app in an existing resource group, or updates an existing app.
     * @summary Creates a new web, mobile, or API app in an existing resource group, or updates an
     * existing app.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Unique name of the app to create or update. To create or update a deployment slot,
     * use the {slot} parameter.
     * @param siteEnvelope A JSON representation of the app properties. See example.
     * @param slot Name of the deployment slot to create or update. By default, this API attempts to
     * create or modify the production slot.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsCreateOrUpdateSlotResponse>
     */
    createOrUpdateSlot(resourceGroupName: string, name: string, siteEnvelope: Models.Site, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsCreateOrUpdateSlotResponse>;
    /**
     * Deletes a web, mobile, or API app, or one of the deployment slots.
     * @summary Deletes a web, mobile, or API app, or one of the deployment slots.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app to delete.
     * @param slot Name of the deployment slot to delete. By default, the API deletes the production
     * slot.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    deleteSlot(resourceGroupName: string, name: string, slot: string, options?: Models.WebAppsDeleteSlotOptionalParams): Promise<msRest.RestResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app to delete.
     * @param slot Name of the deployment slot to delete. By default, the API deletes the production
     * slot.
     * @param callback The callback
     */
    deleteSlot(resourceGroupName: string, name: string, slot: string, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app to delete.
     * @param slot Name of the deployment slot to delete. By default, the API deletes the production
     * slot.
     * @param options The optional parameters
     * @param callback The callback
     */
    deleteSlot(resourceGroupName: string, name: string, slot: string, options: Models.WebAppsDeleteSlotOptionalParams, callback: msRest.ServiceCallback<void>): void;
    /**
     * Creates a new web, mobile, or API app in an existing resource group, or updates an existing app.
     * @summary Creates a new web, mobile, or API app in an existing resource group, or updates an
     * existing app.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Unique name of the app to create or update. To create or update a deployment slot,
     * use the {slot} parameter.
     * @param siteEnvelope A JSON representation of the app properties. See example.
     * @param slot Name of the deployment slot to create or update. By default, this API attempts to
     * create or modify the production slot.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsUpdateSlotResponse>
     */
    updateSlot(resourceGroupName: string, name: string, siteEnvelope: Models.SitePatchResource, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsUpdateSlotResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Unique name of the app to create or update. To create or update a deployment slot,
     * use the {slot} parameter.
     * @param siteEnvelope A JSON representation of the app properties. See example.
     * @param slot Name of the deployment slot to create or update. By default, this API attempts to
     * create or modify the production slot.
     * @param callback The callback
     */
    updateSlot(resourceGroupName: string, name: string, siteEnvelope: Models.SitePatchResource, slot: string, callback: msRest.ServiceCallback<Models.Site>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Unique name of the app to create or update. To create or update a deployment slot,
     * use the {slot} parameter.
     * @param siteEnvelope A JSON representation of the app properties. See example.
     * @param slot Name of the deployment slot to create or update. By default, this API attempts to
     * create or modify the production slot.
     * @param options The optional parameters
     * @param callback The callback
     */
    updateSlot(resourceGroupName: string, name: string, siteEnvelope: Models.SitePatchResource, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Site>): void;
    /**
     * Analyze a custom hostname.
     * @summary Analyze a custom hostname.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsAnalyzeCustomHostnameSlotResponse>
     */
    analyzeCustomHostnameSlot(resourceGroupName: string, name: string, slot: string, options?: Models.WebAppsAnalyzeCustomHostnameSlotOptionalParams): Promise<Models.WebAppsAnalyzeCustomHostnameSlotResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param callback The callback
     */
    analyzeCustomHostnameSlot(resourceGroupName: string, name: string, slot: string, callback: msRest.ServiceCallback<Models.CustomHostnameAnalysisResult>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param options The optional parameters
     * @param callback The callback
     */
    analyzeCustomHostnameSlot(resourceGroupName: string, name: string, slot: string, options: Models.WebAppsAnalyzeCustomHostnameSlotOptionalParams, callback: msRest.ServiceCallback<Models.CustomHostnameAnalysisResult>): void;
    /**
     * Applies the configuration settings from the target slot onto the current slot.
     * @summary Applies the configuration settings from the target slot onto the current slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slotSwapEntity JSON object that contains the target slot name. See example.
     * @param slot Name of the source slot. If a slot is not specified, the production slot is used as
     * the source slot.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    applySlotConfigurationSlot(resourceGroupName: string, name: string, slotSwapEntity: Models.CsmSlotEntity, slot: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slotSwapEntity JSON object that contains the target slot name. See example.
     * @param slot Name of the source slot. If a slot is not specified, the production slot is used as
     * the source slot.
     * @param callback The callback
     */
    applySlotConfigurationSlot(resourceGroupName: string, name: string, slotSwapEntity: Models.CsmSlotEntity, slot: string, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slotSwapEntity JSON object that contains the target slot name. See example.
     * @param slot Name of the source slot. If a slot is not specified, the production slot is used as
     * the source slot.
     * @param options The optional parameters
     * @param callback The callback
     */
    applySlotConfigurationSlot(resourceGroupName: string, name: string, slotSwapEntity: Models.CsmSlotEntity, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
    /**
     * Creates a backup of an app.
     * @summary Creates a backup of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param request Backup configuration. You can use the JSON response from the POST action as input
     * here.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will create a
     * backup for the production slot.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsBackupSlotResponse>
     */
    backupSlot(resourceGroupName: string, name: string, request: Models.BackupRequest, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsBackupSlotResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param request Backup configuration. You can use the JSON response from the POST action as input
     * here.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will create a
     * backup for the production slot.
     * @param callback The callback
     */
    backupSlot(resourceGroupName: string, name: string, request: Models.BackupRequest, slot: string, callback: msRest.ServiceCallback<Models.BackupItem>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param request Backup configuration. You can use the JSON response from the POST action as input
     * here.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will create a
     * backup for the production slot.
     * @param options The optional parameters
     * @param callback The callback
     */
    backupSlot(resourceGroupName: string, name: string, request: Models.BackupRequest, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.BackupItem>): void;
    /**
     * Gets existing backups of an app.
     * @summary Gets existing backups of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get backups of
     * the production slot.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsListBackupsSlotResponse>
     */
    listBackupsSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListBackupsSlotResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get backups of
     * the production slot.
     * @param callback The callback
     */
    listBackupsSlot(resourceGroupName: string, name: string, slot: string, callback: msRest.ServiceCallback<Models.BackupItemCollection>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get backups of
     * the production slot.
     * @param options The optional parameters
     * @param callback The callback
     */
    listBackupsSlot(resourceGroupName: string, name: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.BackupItemCollection>): void;
    /**
     * Gets a backup of an app by its ID.
     * @summary Gets a backup of an app by its ID.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param backupId ID of the backup.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get a backup
     * of the production slot.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsGetBackupStatusSlotResponse>
     */
    getBackupStatusSlot(resourceGroupName: string, name: string, backupId: string, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsGetBackupStatusSlotResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param backupId ID of the backup.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get a backup
     * of the production slot.
     * @param callback The callback
     */
    getBackupStatusSlot(resourceGroupName: string, name: string, backupId: string, slot: string, callback: msRest.ServiceCallback<Models.BackupItem>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param backupId ID of the backup.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get a backup
     * of the production slot.
     * @param options The optional parameters
     * @param callback The callback
     */
    getBackupStatusSlot(resourceGroupName: string, name: string, backupId: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.BackupItem>): void;
    /**
     * Deletes a backup of an app by its ID.
     * @summary Deletes a backup of an app by its ID.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param backupId ID of the backup.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will delete a
     * backup of the production slot.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    deleteBackupSlot(resourceGroupName: string, name: string, backupId: string, slot: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param backupId ID of the backup.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will delete a
     * backup of the production slot.
     * @param callback The callback
     */
    deleteBackupSlot(resourceGroupName: string, name: string, backupId: string, slot: string, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param backupId ID of the backup.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will delete a
     * backup of the production slot.
     * @param options The optional parameters
     * @param callback The callback
     */
    deleteBackupSlot(resourceGroupName: string, name: string, backupId: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
    /**
     * Gets status of a web app backup that may be in progress, including secrets associated with the
     * backup, such as the Azure Storage SAS URL. Also can be used to update the SAS URL for the backup
     * if a new URL is passed in the request body.
     * @summary Gets status of a web app backup that may be in progress, including secrets associated
     * with the backup, such as the Azure Storage SAS URL. Also can be used to update the SAS URL for
     * the backup if a new URL is passed in the request body.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of web app.
     * @param backupId ID of backup.
     * @param request Information on backup request.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsListBackupStatusSecretsSlotResponse>
     */
    listBackupStatusSecretsSlot(resourceGroupName: string, name: string, backupId: string, request: Models.BackupRequest, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListBackupStatusSecretsSlotResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of web app.
     * @param backupId ID of backup.
     * @param request Information on backup request.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param callback The callback
     */
    listBackupStatusSecretsSlot(resourceGroupName: string, name: string, backupId: string, request: Models.BackupRequest, slot: string, callback: msRest.ServiceCallback<Models.BackupItem>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of web app.
     * @param backupId ID of backup.
     * @param request Information on backup request.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param options The optional parameters
     * @param callback The callback
     */
    listBackupStatusSecretsSlot(resourceGroupName: string, name: string, backupId: string, request: Models.BackupRequest, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.BackupItem>): void;
    /**
     * Restores a specific backup to another app (or deployment slot, if specified).
     * @summary Restores a specific backup to another app (or deployment slot, if specified).
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param backupId ID of the backup.
     * @param request Information on restore request .
     * @param slot Name of the deployment slot. If a slot is not specified, the API will restore a
     * backup of the production slot.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    restoreSlot(resourceGroupName: string, name: string, backupId: string, request: Models.RestoreRequest, slot: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * List the configurations of an app
     * @summary List the configurations of an app
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will return
     * configuration for the production slot.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsListConfigurationsSlotResponse>
     */
    listConfigurationsSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListConfigurationsSlotResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will return
     * configuration for the production slot.
     * @param callback The callback
     */
    listConfigurationsSlot(resourceGroupName: string, name: string, slot: string, callback: msRest.ServiceCallback<Models.SiteConfigResourceCollection>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will return
     * configuration for the production slot.
     * @param options The optional parameters
     * @param callback The callback
     */
    listConfigurationsSlot(resourceGroupName: string, name: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SiteConfigResourceCollection>): void;
    /**
     * Replaces the application settings of an app.
     * @summary Replaces the application settings of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param appSettings Application settings of the app.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will update the
     * application settings for the production slot.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsUpdateApplicationSettingsSlotResponse>
     */
    updateApplicationSettingsSlot(resourceGroupName: string, name: string, appSettings: Models.StringDictionary, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsUpdateApplicationSettingsSlotResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param appSettings Application settings of the app.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will update the
     * application settings for the production slot.
     * @param callback The callback
     */
    updateApplicationSettingsSlot(resourceGroupName: string, name: string, appSettings: Models.StringDictionary, slot: string, callback: msRest.ServiceCallback<Models.StringDictionary>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param appSettings Application settings of the app.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will update the
     * application settings for the production slot.
     * @param options The optional parameters
     * @param callback The callback
     */
    updateApplicationSettingsSlot(resourceGroupName: string, name: string, appSettings: Models.StringDictionary, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.StringDictionary>): void;
    /**
     * Gets the application settings of an app.
     * @summary Gets the application settings of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get the
     * application settings for the production slot.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsListApplicationSettingsSlotResponse>
     */
    listApplicationSettingsSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListApplicationSettingsSlotResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get the
     * application settings for the production slot.
     * @param callback The callback
     */
    listApplicationSettingsSlot(resourceGroupName: string, name: string, slot: string, callback: msRest.ServiceCallback<Models.StringDictionary>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get the
     * application settings for the production slot.
     * @param options The optional parameters
     * @param callback The callback
     */
    listApplicationSettingsSlot(resourceGroupName: string, name: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.StringDictionary>): void;
    /**
     * Updates the Authentication / Authorization settings associated with web app.
     * @summary Updates the Authentication / Authorization settings associated with web app.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of web app.
     * @param siteAuthSettings Auth settings associated with web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsUpdateAuthSettingsSlotResponse>
     */
    updateAuthSettingsSlot(resourceGroupName: string, name: string, siteAuthSettings: Models.SiteAuthSettings, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsUpdateAuthSettingsSlotResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of web app.
     * @param siteAuthSettings Auth settings associated with web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param callback The callback
     */
    updateAuthSettingsSlot(resourceGroupName: string, name: string, siteAuthSettings: Models.SiteAuthSettings, slot: string, callback: msRest.ServiceCallback<Models.SiteAuthSettings>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of web app.
     * @param siteAuthSettings Auth settings associated with web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param options The optional parameters
     * @param callback The callback
     */
    updateAuthSettingsSlot(resourceGroupName: string, name: string, siteAuthSettings: Models.SiteAuthSettings, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SiteAuthSettings>): void;
    /**
     * Gets the Authentication/Authorization settings of an app.
     * @summary Gets the Authentication/Authorization settings of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get the
     * settings for the production slot.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsGetAuthSettingsSlotResponse>
     */
    getAuthSettingsSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsGetAuthSettingsSlotResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get the
     * settings for the production slot.
     * @param callback The callback
     */
    getAuthSettingsSlot(resourceGroupName: string, name: string, slot: string, callback: msRest.ServiceCallback<Models.SiteAuthSettings>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get the
     * settings for the production slot.
     * @param options The optional parameters
     * @param callback The callback
     */
    getAuthSettingsSlot(resourceGroupName: string, name: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SiteAuthSettings>): void;
    /**
     * Updates the Azure storage account configurations of an app.
     * @summary Updates the Azure storage account configurations of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param azureStorageAccounts Azure storage accounts of the app.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will update the
     * Azure storage account configurations for the production slot.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsUpdateAzureStorageAccountsSlotResponse>
     */
    updateAzureStorageAccountsSlot(resourceGroupName: string, name: string, azureStorageAccounts: Models.AzureStoragePropertyDictionaryResource, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsUpdateAzureStorageAccountsSlotResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param azureStorageAccounts Azure storage accounts of the app.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will update the
     * Azure storage account configurations for the production slot.
     * @param callback The callback
     */
    updateAzureStorageAccountsSlot(resourceGroupName: string, name: string, azureStorageAccounts: Models.AzureStoragePropertyDictionaryResource, slot: string, callback: msRest.ServiceCallback<Models.AzureStoragePropertyDictionaryResource>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param azureStorageAccounts Azure storage accounts of the app.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will update the
     * Azure storage account configurations for the production slot.
     * @param options The optional parameters
     * @param callback The callback
     */
    updateAzureStorageAccountsSlot(resourceGroupName: string, name: string, azureStorageAccounts: Models.AzureStoragePropertyDictionaryResource, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.AzureStoragePropertyDictionaryResource>): void;
    /**
     * Gets the Azure storage account configurations of an app.
     * @summary Gets the Azure storage account configurations of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will update the
     * Azure storage account configurations for the production slot.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsListAzureStorageAccountsSlotResponse>
     */
    listAzureStorageAccountsSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListAzureStorageAccountsSlotResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will update the
     * Azure storage account configurations for the production slot.
     * @param callback The callback
     */
    listAzureStorageAccountsSlot(resourceGroupName: string, name: string, slot: string, callback: msRest.ServiceCallback<Models.AzureStoragePropertyDictionaryResource>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will update the
     * Azure storage account configurations for the production slot.
     * @param options The optional parameters
     * @param callback The callback
     */
    listAzureStorageAccountsSlot(resourceGroupName: string, name: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.AzureStoragePropertyDictionaryResource>): void;
    /**
     * Updates the backup configuration of an app.
     * @summary Updates the backup configuration of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param request Edited backup configuration.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will update the
     * backup configuration for the production slot.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsUpdateBackupConfigurationSlotResponse>
     */
    updateBackupConfigurationSlot(resourceGroupName: string, name: string, request: Models.BackupRequest, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsUpdateBackupConfigurationSlotResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param request Edited backup configuration.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will update the
     * backup configuration for the production slot.
     * @param callback The callback
     */
    updateBackupConfigurationSlot(resourceGroupName: string, name: string, request: Models.BackupRequest, slot: string, callback: msRest.ServiceCallback<Models.BackupRequest>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param request Edited backup configuration.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will update the
     * backup configuration for the production slot.
     * @param options The optional parameters
     * @param callback The callback
     */
    updateBackupConfigurationSlot(resourceGroupName: string, name: string, request: Models.BackupRequest, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.BackupRequest>): void;
    /**
     * Deletes the backup configuration of an app.
     * @summary Deletes the backup configuration of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will delete the
     * backup configuration for the production slot.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    deleteBackupConfigurationSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will delete the
     * backup configuration for the production slot.
     * @param callback The callback
     */
    deleteBackupConfigurationSlot(resourceGroupName: string, name: string, slot: string, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will delete the
     * backup configuration for the production slot.
     * @param options The optional parameters
     * @param callback The callback
     */
    deleteBackupConfigurationSlot(resourceGroupName: string, name: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
    /**
     * Gets the backup configuration of an app.
     * @summary Gets the backup configuration of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get the backup
     * configuration for the production slot.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsGetBackupConfigurationSlotResponse>
     */
    getBackupConfigurationSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsGetBackupConfigurationSlotResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get the backup
     * configuration for the production slot.
     * @param callback The callback
     */
    getBackupConfigurationSlot(resourceGroupName: string, name: string, slot: string, callback: msRest.ServiceCallback<Models.BackupRequest>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get the backup
     * configuration for the production slot.
     * @param options The optional parameters
     * @param callback The callback
     */
    getBackupConfigurationSlot(resourceGroupName: string, name: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.BackupRequest>): void;
    /**
     * Replaces the connection strings of an app.
     * @summary Replaces the connection strings of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param connectionStrings Connection strings of the app or deployment slot. See example.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will update the
     * connection settings for the production slot.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsUpdateConnectionStringsSlotResponse>
     */
    updateConnectionStringsSlot(resourceGroupName: string, name: string, connectionStrings: Models.ConnectionStringDictionary, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsUpdateConnectionStringsSlotResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param connectionStrings Connection strings of the app or deployment slot. See example.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will update the
     * connection settings for the production slot.
     * @param callback The callback
     */
    updateConnectionStringsSlot(resourceGroupName: string, name: string, connectionStrings: Models.ConnectionStringDictionary, slot: string, callback: msRest.ServiceCallback<Models.ConnectionStringDictionary>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param connectionStrings Connection strings of the app or deployment slot. See example.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will update the
     * connection settings for the production slot.
     * @param options The optional parameters
     * @param callback The callback
     */
    updateConnectionStringsSlot(resourceGroupName: string, name: string, connectionStrings: Models.ConnectionStringDictionary, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ConnectionStringDictionary>): void;
    /**
     * Gets the connection strings of an app.
     * @summary Gets the connection strings of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get the
     * connection settings for the production slot.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsListConnectionStringsSlotResponse>
     */
    listConnectionStringsSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListConnectionStringsSlotResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get the
     * connection settings for the production slot.
     * @param callback The callback
     */
    listConnectionStringsSlot(resourceGroupName: string, name: string, slot: string, callback: msRest.ServiceCallback<Models.ConnectionStringDictionary>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get the
     * connection settings for the production slot.
     * @param options The optional parameters
     * @param callback The callback
     */
    listConnectionStringsSlot(resourceGroupName: string, name: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ConnectionStringDictionary>): void;
    /**
     * Gets the logging configuration of an app.
     * @summary Gets the logging configuration of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get the
     * logging configuration for the production slot.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsGetDiagnosticLogsConfigurationSlotResponse>
     */
    getDiagnosticLogsConfigurationSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsGetDiagnosticLogsConfigurationSlotResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get the
     * logging configuration for the production slot.
     * @param callback The callback
     */
    getDiagnosticLogsConfigurationSlot(resourceGroupName: string, name: string, slot: string, callback: msRest.ServiceCallback<Models.SiteLogsConfig>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get the
     * logging configuration for the production slot.
     * @param options The optional parameters
     * @param callback The callback
     */
    getDiagnosticLogsConfigurationSlot(resourceGroupName: string, name: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SiteLogsConfig>): void;
    /**
     * Updates the logging configuration of an app.
     * @summary Updates the logging configuration of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param siteLogsConfig A SiteLogsConfig JSON object that contains the logging configuration to
     * change in the "properties" property.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will update the
     * logging configuration for the production slot.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsUpdateDiagnosticLogsConfigSlotResponse>
     */
    updateDiagnosticLogsConfigSlot(resourceGroupName: string, name: string, siteLogsConfig: Models.SiteLogsConfig, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsUpdateDiagnosticLogsConfigSlotResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param siteLogsConfig A SiteLogsConfig JSON object that contains the logging configuration to
     * change in the "properties" property.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will update the
     * logging configuration for the production slot.
     * @param callback The callback
     */
    updateDiagnosticLogsConfigSlot(resourceGroupName: string, name: string, siteLogsConfig: Models.SiteLogsConfig, slot: string, callback: msRest.ServiceCallback<Models.SiteLogsConfig>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param siteLogsConfig A SiteLogsConfig JSON object that contains the logging configuration to
     * change in the "properties" property.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will update the
     * logging configuration for the production slot.
     * @param options The optional parameters
     * @param callback The callback
     */
    updateDiagnosticLogsConfigSlot(resourceGroupName: string, name: string, siteLogsConfig: Models.SiteLogsConfig, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SiteLogsConfig>): void;
    /**
     * Replaces the metadata of an app.
     * @summary Replaces the metadata of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param metadata Edited metadata of the app or deployment slot. See example.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will update the
     * metadata for the production slot.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsUpdateMetadataSlotResponse>
     */
    updateMetadataSlot(resourceGroupName: string, name: string, metadata: Models.StringDictionary, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsUpdateMetadataSlotResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param metadata Edited metadata of the app or deployment slot. See example.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will update the
     * metadata for the production slot.
     * @param callback The callback
     */
    updateMetadataSlot(resourceGroupName: string, name: string, metadata: Models.StringDictionary, slot: string, callback: msRest.ServiceCallback<Models.StringDictionary>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param metadata Edited metadata of the app or deployment slot. See example.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will update the
     * metadata for the production slot.
     * @param options The optional parameters
     * @param callback The callback
     */
    updateMetadataSlot(resourceGroupName: string, name: string, metadata: Models.StringDictionary, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.StringDictionary>): void;
    /**
     * Gets the metadata of an app.
     * @summary Gets the metadata of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get the
     * metadata for the production slot.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsListMetadataSlotResponse>
     */
    listMetadataSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListMetadataSlotResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get the
     * metadata for the production slot.
     * @param callback The callback
     */
    listMetadataSlot(resourceGroupName: string, name: string, slot: string, callback: msRest.ServiceCallback<Models.StringDictionary>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get the
     * metadata for the production slot.
     * @param options The optional parameters
     * @param callback The callback
     */
    listMetadataSlot(resourceGroupName: string, name: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.StringDictionary>): void;
    /**
     * Gets the Git/FTP publishing credentials of an app.
     * @summary Gets the Git/FTP publishing credentials of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get the
     * publishing credentials for the production slot.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsListPublishingCredentialsSlotResponse>
     */
    listPublishingCredentialsSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListPublishingCredentialsSlotResponse>;
    /**
     * Updates the Push settings associated with web app.
     * @summary Updates the Push settings associated with web app.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of web app.
     * @param pushSettings Push settings associated with web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsUpdateSitePushSettingsSlotResponse>
     */
    updateSitePushSettingsSlot(resourceGroupName: string, name: string, pushSettings: Models.PushSettings, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsUpdateSitePushSettingsSlotResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of web app.
     * @param pushSettings Push settings associated with web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param callback The callback
     */
    updateSitePushSettingsSlot(resourceGroupName: string, name: string, pushSettings: Models.PushSettings, slot: string, callback: msRest.ServiceCallback<Models.PushSettings>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of web app.
     * @param pushSettings Push settings associated with web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param options The optional parameters
     * @param callback The callback
     */
    updateSitePushSettingsSlot(resourceGroupName: string, name: string, pushSettings: Models.PushSettings, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PushSettings>): void;
    /**
     * Gets the Push settings associated with web app.
     * @summary Gets the Push settings associated with web app.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsListSitePushSettingsSlotResponse>
     */
    listSitePushSettingsSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListSitePushSettingsSlotResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param callback The callback
     */
    listSitePushSettingsSlot(resourceGroupName: string, name: string, slot: string, callback: msRest.ServiceCallback<Models.PushSettings>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param options The optional parameters
     * @param callback The callback
     */
    listSitePushSettingsSlot(resourceGroupName: string, name: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PushSettings>): void;
    /**
     * Gets the configuration of an app, such as platform version and bitness, default documents,
     * virtual applications, Always On, etc.
     * @summary Gets the configuration of an app, such as platform version and bitness, default
     * documents, virtual applications, Always On, etc.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will return
     * configuration for the production slot.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsGetConfigurationSlotResponse>
     */
    getConfigurationSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsGetConfigurationSlotResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will return
     * configuration for the production slot.
     * @param callback The callback
     */
    getConfigurationSlot(resourceGroupName: string, name: string, slot: string, callback: msRest.ServiceCallback<Models.SiteConfigResource>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will return
     * configuration for the production slot.
     * @param options The optional parameters
     * @param callback The callback
     */
    getConfigurationSlot(resourceGroupName: string, name: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SiteConfigResource>): void;
    /**
     * Updates the configuration of an app.
     * @summary Updates the configuration of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param siteConfig JSON representation of a SiteConfig object. See example.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will update
     * configuration for the production slot.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsCreateOrUpdateConfigurationSlotResponse>
     */
    createOrUpdateConfigurationSlot(resourceGroupName: string, name: string, siteConfig: Models.SiteConfigResource, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsCreateOrUpdateConfigurationSlotResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param siteConfig JSON representation of a SiteConfig object. See example.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will update
     * configuration for the production slot.
     * @param callback The callback
     */
    createOrUpdateConfigurationSlot(resourceGroupName: string, name: string, siteConfig: Models.SiteConfigResource, slot: string, callback: msRest.ServiceCallback<Models.SiteConfigResource>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param siteConfig JSON representation of a SiteConfig object. See example.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will update
     * configuration for the production slot.
     * @param options The optional parameters
     * @param callback The callback
     */
    createOrUpdateConfigurationSlot(resourceGroupName: string, name: string, siteConfig: Models.SiteConfigResource, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SiteConfigResource>): void;
    /**
     * Updates the configuration of an app.
     * @summary Updates the configuration of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param siteConfig JSON representation of a SiteConfig object. See example.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will update
     * configuration for the production slot.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsUpdateConfigurationSlotResponse>
     */
    updateConfigurationSlot(resourceGroupName: string, name: string, siteConfig: Models.SiteConfigResource, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsUpdateConfigurationSlotResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param siteConfig JSON representation of a SiteConfig object. See example.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will update
     * configuration for the production slot.
     * @param callback The callback
     */
    updateConfigurationSlot(resourceGroupName: string, name: string, siteConfig: Models.SiteConfigResource, slot: string, callback: msRest.ServiceCallback<Models.SiteConfigResource>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param siteConfig JSON representation of a SiteConfig object. See example.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will update
     * configuration for the production slot.
     * @param options The optional parameters
     * @param callback The callback
     */
    updateConfigurationSlot(resourceGroupName: string, name: string, siteConfig: Models.SiteConfigResource, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SiteConfigResource>): void;
    /**
     * Gets a list of web app configuration snapshots identifiers. Each element of the list contains a
     * timestamp and the ID of the snapshot.
     * @summary Gets a list of web app configuration snapshots identifiers. Each element of the list
     * contains a timestamp and the ID of the snapshot.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will return
     * configuration for the production slot.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsListConfigurationSnapshotInfoSlotResponse>
     */
    listConfigurationSnapshotInfoSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListConfigurationSnapshotInfoSlotResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will return
     * configuration for the production slot.
     * @param callback The callback
     */
    listConfigurationSnapshotInfoSlot(resourceGroupName: string, name: string, slot: string, callback: msRest.ServiceCallback<Models.SiteConfigurationSnapshotInfoCollection>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will return
     * configuration for the production slot.
     * @param options The optional parameters
     * @param callback The callback
     */
    listConfigurationSnapshotInfoSlot(resourceGroupName: string, name: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SiteConfigurationSnapshotInfoCollection>): void;
    /**
     * Gets a snapshot of the configuration of an app at a previous point in time.
     * @summary Gets a snapshot of the configuration of an app at a previous point in time.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param snapshotId The ID of the snapshot to read.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will return
     * configuration for the production slot.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsGetConfigurationSnapshotSlotResponse>
     */
    getConfigurationSnapshotSlot(resourceGroupName: string, name: string, snapshotId: string, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsGetConfigurationSnapshotSlotResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param snapshotId The ID of the snapshot to read.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will return
     * configuration for the production slot.
     * @param callback The callback
     */
    getConfigurationSnapshotSlot(resourceGroupName: string, name: string, snapshotId: string, slot: string, callback: msRest.ServiceCallback<Models.SiteConfigResource>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param snapshotId The ID of the snapshot to read.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will return
     * configuration for the production slot.
     * @param options The optional parameters
     * @param callback The callback
     */
    getConfigurationSnapshotSlot(resourceGroupName: string, name: string, snapshotId: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SiteConfigResource>): void;
    /**
     * Reverts the configuration of an app to a previous snapshot.
     * @summary Reverts the configuration of an app to a previous snapshot.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param snapshotId The ID of the snapshot to read.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will return
     * configuration for the production slot.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    recoverSiteConfigurationSnapshotSlot(resourceGroupName: string, name: string, snapshotId: string, slot: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param snapshotId The ID of the snapshot to read.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will return
     * configuration for the production slot.
     * @param callback The callback
     */
    recoverSiteConfigurationSnapshotSlot(resourceGroupName: string, name: string, snapshotId: string, slot: string, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param snapshotId The ID of the snapshot to read.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will return
     * configuration for the production slot.
     * @param options The optional parameters
     * @param callback The callback
     */
    recoverSiteConfigurationSnapshotSlot(resourceGroupName: string, name: string, snapshotId: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
    /**
     * Gets the last lines of docker logs for the given site
     * @summary Gets the last lines of docker logs for the given site
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsGetWebSiteContainerLogsSlotResponse>
     */
    getWebSiteContainerLogsSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsGetWebSiteContainerLogsSlotResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param callback The callback
     */
    getWebSiteContainerLogsSlot(resourceGroupName: string, name: string, slot: string, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param options The optional parameters
     * @param callback The callback
     */
    getWebSiteContainerLogsSlot(resourceGroupName: string, name: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
    /**
     * Gets the ZIP archived docker log files for the given site
     * @summary Gets the ZIP archived docker log files for the given site
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsGetContainerLogsZipSlotResponse>
     */
    getContainerLogsZipSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsGetContainerLogsZipSlotResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param callback The callback
     */
    getContainerLogsZipSlot(resourceGroupName: string, name: string, slot: string, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param options The optional parameters
     * @param callback The callback
     */
    getContainerLogsZipSlot(resourceGroupName: string, name: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
    /**
     * List continuous web jobs for an app, or a deployment slot.
     * @summary List continuous web jobs for an app, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param slot Name of the deployment slot. If a slot is not specified, the API deletes a
     * deployment for the production slot.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsListContinuousWebJobsSlotResponse>
     */
    listContinuousWebJobsSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListContinuousWebJobsSlotResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param slot Name of the deployment slot. If a slot is not specified, the API deletes a
     * deployment for the production slot.
     * @param callback The callback
     */
    listContinuousWebJobsSlot(resourceGroupName: string, name: string, slot: string, callback: msRest.ServiceCallback<Models.ContinuousWebJobCollection>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param slot Name of the deployment slot. If a slot is not specified, the API deletes a
     * deployment for the production slot.
     * @param options The optional parameters
     * @param callback The callback
     */
    listContinuousWebJobsSlot(resourceGroupName: string, name: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ContinuousWebJobCollection>): void;
    /**
     * Gets a continuous web job by its ID for an app, or a deployment slot.
     * @summary Gets a continuous web job by its ID for an app, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param webJobName Name of Web Job.
     * @param slot Name of the deployment slot. If a slot is not specified, the API deletes a
     * deployment for the production slot.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsGetContinuousWebJobSlotResponse>
     */
    getContinuousWebJobSlot(resourceGroupName: string, name: string, webJobName: string, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsGetContinuousWebJobSlotResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param webJobName Name of Web Job.
     * @param slot Name of the deployment slot. If a slot is not specified, the API deletes a
     * deployment for the production slot.
     * @param callback The callback
     */
    getContinuousWebJobSlot(resourceGroupName: string, name: string, webJobName: string, slot: string, callback: msRest.ServiceCallback<Models.ContinuousWebJob>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param webJobName Name of Web Job.
     * @param slot Name of the deployment slot. If a slot is not specified, the API deletes a
     * deployment for the production slot.
     * @param options The optional parameters
     * @param callback The callback
     */
    getContinuousWebJobSlot(resourceGroupName: string, name: string, webJobName: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ContinuousWebJob>): void;
    /**
     * Delete a continuous web job by its ID for an app, or a deployment slot.
     * @summary Delete a continuous web job by its ID for an app, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param webJobName Name of Web Job.
     * @param slot Name of the deployment slot. If a slot is not specified, the API deletes a
     * deployment for the production slot.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    deleteContinuousWebJobSlot(resourceGroupName: string, name: string, webJobName: string, slot: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param webJobName Name of Web Job.
     * @param slot Name of the deployment slot. If a slot is not specified, the API deletes a
     * deployment for the production slot.
     * @param callback The callback
     */
    deleteContinuousWebJobSlot(resourceGroupName: string, name: string, webJobName: string, slot: string, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param webJobName Name of Web Job.
     * @param slot Name of the deployment slot. If a slot is not specified, the API deletes a
     * deployment for the production slot.
     * @param options The optional parameters
     * @param callback The callback
     */
    deleteContinuousWebJobSlot(resourceGroupName: string, name: string, webJobName: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
    /**
     * Start a continuous web job for an app, or a deployment slot.
     * @summary Start a continuous web job for an app, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param webJobName Name of Web Job.
     * @param slot Name of the deployment slot. If a slot is not specified, the API deletes a
     * deployment for the production slot.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    startContinuousWebJobSlot(resourceGroupName: string, name: string, webJobName: string, slot: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param webJobName Name of Web Job.
     * @param slot Name of the deployment slot. If a slot is not specified, the API deletes a
     * deployment for the production slot.
     * @param callback The callback
     */
    startContinuousWebJobSlot(resourceGroupName: string, name: string, webJobName: string, slot: string, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param webJobName Name of Web Job.
     * @param slot Name of the deployment slot. If a slot is not specified, the API deletes a
     * deployment for the production slot.
     * @param options The optional parameters
     * @param callback The callback
     */
    startContinuousWebJobSlot(resourceGroupName: string, name: string, webJobName: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
    /**
     * Stop a continuous web job for an app, or a deployment slot.
     * @summary Stop a continuous web job for an app, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param webJobName Name of Web Job.
     * @param slot Name of the deployment slot. If a slot is not specified, the API deletes a
     * deployment for the production slot.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    stopContinuousWebJobSlot(resourceGroupName: string, name: string, webJobName: string, slot: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param webJobName Name of Web Job.
     * @param slot Name of the deployment slot. If a slot is not specified, the API deletes a
     * deployment for the production slot.
     * @param callback The callback
     */
    stopContinuousWebJobSlot(resourceGroupName: string, name: string, webJobName: string, slot: string, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param webJobName Name of Web Job.
     * @param slot Name of the deployment slot. If a slot is not specified, the API deletes a
     * deployment for the production slot.
     * @param options The optional parameters
     * @param callback The callback
     */
    stopContinuousWebJobSlot(resourceGroupName: string, name: string, webJobName: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
    /**
     * List deployments for an app, or a deployment slot.
     * @summary List deployments for an app, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments
     * for the production slot.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsListDeploymentsSlotResponse>
     */
    listDeploymentsSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListDeploymentsSlotResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments
     * for the production slot.
     * @param callback The callback
     */
    listDeploymentsSlot(resourceGroupName: string, name: string, slot: string, callback: msRest.ServiceCallback<Models.DeploymentCollection>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments
     * for the production slot.
     * @param options The optional parameters
     * @param callback The callback
     */
    listDeploymentsSlot(resourceGroupName: string, name: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DeploymentCollection>): void;
    /**
     * Get a deployment by its ID for an app, or a deployment slot.
     * @summary Get a deployment by its ID for an app, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param id Deployment ID.
     * @param slot Name of the deployment slot. If a slot is not specified, the API gets a deployment
     * for the production slot.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsGetDeploymentSlotResponse>
     */
    getDeploymentSlot(resourceGroupName: string, name: string, id: string, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsGetDeploymentSlotResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param id Deployment ID.
     * @param slot Name of the deployment slot. If a slot is not specified, the API gets a deployment
     * for the production slot.
     * @param callback The callback
     */
    getDeploymentSlot(resourceGroupName: string, name: string, id: string, slot: string, callback: msRest.ServiceCallback<Models.Deployment>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param id Deployment ID.
     * @param slot Name of the deployment slot. If a slot is not specified, the API gets a deployment
     * for the production slot.
     * @param options The optional parameters
     * @param callback The callback
     */
    getDeploymentSlot(resourceGroupName: string, name: string, id: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Deployment>): void;
    /**
     * Create a deployment for an app, or a deployment slot.
     * @summary Create a deployment for an app, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param id ID of an existing deployment.
     * @param slot Name of the deployment slot. If a slot is not specified, the API creates a
     * deployment for the production slot.
     * @param deployment Deployment details.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsCreateDeploymentSlotResponse>
     */
    createDeploymentSlot(resourceGroupName: string, name: string, id: string, slot: string, deployment: Models.Deployment, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsCreateDeploymentSlotResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param id ID of an existing deployment.
     * @param slot Name of the deployment slot. If a slot is not specified, the API creates a
     * deployment for the production slot.
     * @param deployment Deployment details.
     * @param callback The callback
     */
    createDeploymentSlot(resourceGroupName: string, name: string, id: string, slot: string, deployment: Models.Deployment, callback: msRest.ServiceCallback<Models.Deployment>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param id ID of an existing deployment.
     * @param slot Name of the deployment slot. If a slot is not specified, the API creates a
     * deployment for the production slot.
     * @param deployment Deployment details.
     * @param options The optional parameters
     * @param callback The callback
     */
    createDeploymentSlot(resourceGroupName: string, name: string, id: string, slot: string, deployment: Models.Deployment, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Deployment>): void;
    /**
     * Delete a deployment by its ID for an app, or a deployment slot.
     * @summary Delete a deployment by its ID for an app, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param id Deployment ID.
     * @param slot Name of the deployment slot. If a slot is not specified, the API deletes a
     * deployment for the production slot.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    deleteDeploymentSlot(resourceGroupName: string, name: string, id: string, slot: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param id Deployment ID.
     * @param slot Name of the deployment slot. If a slot is not specified, the API deletes a
     * deployment for the production slot.
     * @param callback The callback
     */
    deleteDeploymentSlot(resourceGroupName: string, name: string, id: string, slot: string, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param id Deployment ID.
     * @param slot Name of the deployment slot. If a slot is not specified, the API deletes a
     * deployment for the production slot.
     * @param options The optional parameters
     * @param callback The callback
     */
    deleteDeploymentSlot(resourceGroupName: string, name: string, id: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
    /**
     * List deployment log for specific deployment for an app, or a deployment slot.
     * @summary List deployment log for specific deployment for an app, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param id The ID of a specific deployment. This is the value of the name property in the JSON
     * response from "GET /api/sites/{siteName}/deployments".
     * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments
     * for the production slot.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsListDeploymentLogSlotResponse>
     */
    listDeploymentLogSlot(resourceGroupName: string, name: string, id: string, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListDeploymentLogSlotResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param id The ID of a specific deployment. This is the value of the name property in the JSON
     * response from "GET /api/sites/{siteName}/deployments".
     * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments
     * for the production slot.
     * @param callback The callback
     */
    listDeploymentLogSlot(resourceGroupName: string, name: string, id: string, slot: string, callback: msRest.ServiceCallback<Models.Deployment>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param id The ID of a specific deployment. This is the value of the name property in the JSON
     * response from "GET /api/sites/{siteName}/deployments".
     * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments
     * for the production slot.
     * @param options The optional parameters
     * @param callback The callback
     */
    listDeploymentLogSlot(resourceGroupName: string, name: string, id: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Deployment>): void;
    /**
     * Discovers an existing app backup that can be restored from a blob in Azure storage. Use this to
     * get information about the databases stored in a backup.
     * @summary Discovers an existing app backup that can be restored from a blob in Azure storage. Use
     * this to get information about the databases stored in a backup.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param request A RestoreRequest object that includes Azure storage URL and blog name for
     * discovery of backup.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will perform
     * discovery for the production slot.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsDiscoverBackupSlotResponse>
     */
    discoverBackupSlot(resourceGroupName: string, name: string, request: Models.RestoreRequest, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsDiscoverBackupSlotResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param request A RestoreRequest object that includes Azure storage URL and blog name for
     * discovery of backup.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will perform
     * discovery for the production slot.
     * @param callback The callback
     */
    discoverBackupSlot(resourceGroupName: string, name: string, request: Models.RestoreRequest, slot: string, callback: msRest.ServiceCallback<Models.RestoreRequest>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param request A RestoreRequest object that includes Azure storage URL and blog name for
     * discovery of backup.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will perform
     * discovery for the production slot.
     * @param options The optional parameters
     * @param callback The callback
     */
    discoverBackupSlot(resourceGroupName: string, name: string, request: Models.RestoreRequest, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.RestoreRequest>): void;
    /**
     * Lists ownership identifiers for domain associated with web app.
     * @summary Lists ownership identifiers for domain associated with web app.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will delete the
     * binding for the production slot.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsListDomainOwnershipIdentifiersSlotResponse>
     */
    listDomainOwnershipIdentifiersSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListDomainOwnershipIdentifiersSlotResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will delete the
     * binding for the production slot.
     * @param callback The callback
     */
    listDomainOwnershipIdentifiersSlot(resourceGroupName: string, name: string, slot: string, callback: msRest.ServiceCallback<Models.IdentifierCollection>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will delete the
     * binding for the production slot.
     * @param options The optional parameters
     * @param callback The callback
     */
    listDomainOwnershipIdentifiersSlot(resourceGroupName: string, name: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.IdentifierCollection>): void;
    /**
     * Get domain ownership identifier for web app.
     * @summary Get domain ownership identifier for web app.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param domainOwnershipIdentifierName Name of domain ownership identifier.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will delete the
     * binding for the production slot.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsGetDomainOwnershipIdentifierSlotResponse>
     */
    getDomainOwnershipIdentifierSlot(resourceGroupName: string, name: string, domainOwnershipIdentifierName: string, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsGetDomainOwnershipIdentifierSlotResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param domainOwnershipIdentifierName Name of domain ownership identifier.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will delete the
     * binding for the production slot.
     * @param callback The callback
     */
    getDomainOwnershipIdentifierSlot(resourceGroupName: string, name: string, domainOwnershipIdentifierName: string, slot: string, callback: msRest.ServiceCallback<Models.Identifier>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param domainOwnershipIdentifierName Name of domain ownership identifier.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will delete the
     * binding for the production slot.
     * @param options The optional parameters
     * @param callback The callback
     */
    getDomainOwnershipIdentifierSlot(resourceGroupName: string, name: string, domainOwnershipIdentifierName: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Identifier>): void;
    /**
     * Creates a domain ownership identifier for web app, or updates an existing ownership identifier.
     * @summary Creates a domain ownership identifier for web app, or updates an existing ownership
     * identifier.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param domainOwnershipIdentifierName Name of domain ownership identifier.
     * @param domainOwnershipIdentifier A JSON representation of the domain ownership properties.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will delete the
     * binding for the production slot.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsCreateOrUpdateDomainOwnershipIdentifierSlotResponse>
     */
    createOrUpdateDomainOwnershipIdentifierSlot(resourceGroupName: string, name: string, domainOwnershipIdentifierName: string, domainOwnershipIdentifier: Models.Identifier, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsCreateOrUpdateDomainOwnershipIdentifierSlotResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param domainOwnershipIdentifierName Name of domain ownership identifier.
     * @param domainOwnershipIdentifier A JSON representation of the domain ownership properties.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will delete the
     * binding for the production slot.
     * @param callback The callback
     */
    createOrUpdateDomainOwnershipIdentifierSlot(resourceGroupName: string, name: string, domainOwnershipIdentifierName: string, domainOwnershipIdentifier: Models.Identifier, slot: string, callback: msRest.ServiceCallback<Models.Identifier>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param domainOwnershipIdentifierName Name of domain ownership identifier.
     * @param domainOwnershipIdentifier A JSON representation of the domain ownership properties.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will delete the
     * binding for the production slot.
     * @param options The optional parameters
     * @param callback The callback
     */
    createOrUpdateDomainOwnershipIdentifierSlot(resourceGroupName: string, name: string, domainOwnershipIdentifierName: string, domainOwnershipIdentifier: Models.Identifier, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Identifier>): void;
    /**
     * Deletes a domain ownership identifier for a web app.
     * @summary Deletes a domain ownership identifier for a web app.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param domainOwnershipIdentifierName Name of domain ownership identifier.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will delete the
     * binding for the production slot.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    deleteDomainOwnershipIdentifierSlot(resourceGroupName: string, name: string, domainOwnershipIdentifierName: string, slot: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param domainOwnershipIdentifierName Name of domain ownership identifier.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will delete the
     * binding for the production slot.
     * @param callback The callback
     */
    deleteDomainOwnershipIdentifierSlot(resourceGroupName: string, name: string, domainOwnershipIdentifierName: string, slot: string, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param domainOwnershipIdentifierName Name of domain ownership identifier.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will delete the
     * binding for the production slot.
     * @param options The optional parameters
     * @param callback The callback
     */
    deleteDomainOwnershipIdentifierSlot(resourceGroupName: string, name: string, domainOwnershipIdentifierName: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
    /**
     * Creates a domain ownership identifier for web app, or updates an existing ownership identifier.
     * @summary Creates a domain ownership identifier for web app, or updates an existing ownership
     * identifier.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param domainOwnershipIdentifierName Name of domain ownership identifier.
     * @param domainOwnershipIdentifier A JSON representation of the domain ownership properties.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will delete the
     * binding for the production slot.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsUpdateDomainOwnershipIdentifierSlotResponse>
     */
    updateDomainOwnershipIdentifierSlot(resourceGroupName: string, name: string, domainOwnershipIdentifierName: string, domainOwnershipIdentifier: Models.Identifier, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsUpdateDomainOwnershipIdentifierSlotResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param domainOwnershipIdentifierName Name of domain ownership identifier.
     * @param domainOwnershipIdentifier A JSON representation of the domain ownership properties.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will delete the
     * binding for the production slot.
     * @param callback The callback
     */
    updateDomainOwnershipIdentifierSlot(resourceGroupName: string, name: string, domainOwnershipIdentifierName: string, domainOwnershipIdentifier: Models.Identifier, slot: string, callback: msRest.ServiceCallback<Models.Identifier>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param domainOwnershipIdentifierName Name of domain ownership identifier.
     * @param domainOwnershipIdentifier A JSON representation of the domain ownership properties.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will delete the
     * binding for the production slot.
     * @param options The optional parameters
     * @param callback The callback
     */
    updateDomainOwnershipIdentifierSlot(resourceGroupName: string, name: string, domainOwnershipIdentifierName: string, domainOwnershipIdentifier: Models.Identifier, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Identifier>): void;
    /**
     * Get the status of the last MSDeploy operation.
     * @summary Get the status of the last MSDeploy operation.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsGetMSDeployStatusSlotResponse>
     */
    getMSDeployStatusSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsGetMSDeployStatusSlotResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param callback The callback
     */
    getMSDeployStatusSlot(resourceGroupName: string, name: string, slot: string, callback: msRest.ServiceCallback<Models.MSDeployStatus>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param options The optional parameters
     * @param callback The callback
     */
    getMSDeployStatusSlot(resourceGroupName: string, name: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.MSDeployStatus>): void;
    /**
     * Invoke the MSDeploy web app extension.
     * @summary Invoke the MSDeploy web app extension.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param mSDeploy Details of MSDeploy operation
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsCreateMSDeployOperationSlotResponse>
     */
    createMSDeployOperationSlot(resourceGroupName: string, name: string, slot: string, mSDeploy: Models.MSDeploy, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsCreateMSDeployOperationSlotResponse>;
    /**
     * Get the MSDeploy Log for the last MSDeploy operation.
     * @summary Get the MSDeploy Log for the last MSDeploy operation.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsGetMSDeployLogSlotResponse>
     */
    getMSDeployLogSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsGetMSDeployLogSlotResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param callback The callback
     */
    getMSDeployLogSlot(resourceGroupName: string, name: string, slot: string, callback: msRest.ServiceCallback<Models.MSDeployLog>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param options The optional parameters
     * @param callback The callback
     */
    getMSDeployLogSlot(resourceGroupName: string, name: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.MSDeployLog>): void;
    /**
     * List the functions for a web site, or a deployment slot.
     * @summary List the functions for a web site, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param slot Name of the deployment slot. If a slot is not specified, the API deletes a
     * deployment for the production slot.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsListInstanceFunctionsSlotResponse>
     */
    listInstanceFunctionsSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListInstanceFunctionsSlotResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param slot Name of the deployment slot. If a slot is not specified, the API deletes a
     * deployment for the production slot.
     * @param callback The callback
     */
    listInstanceFunctionsSlot(resourceGroupName: string, name: string, slot: string, callback: msRest.ServiceCallback<Models.FunctionEnvelopeCollection>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param slot Name of the deployment slot. If a slot is not specified, the API deletes a
     * deployment for the production slot.
     * @param options The optional parameters
     * @param callback The callback
     */
    listInstanceFunctionsSlot(resourceGroupName: string, name: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.FunctionEnvelopeCollection>): void;
    /**
     * Fetch a short lived token that can be exchanged for a master key.
     * @summary Fetch a short lived token that can be exchanged for a master key.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsGetFunctionsAdminTokenSlotResponse>
     */
    getFunctionsAdminTokenSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsGetFunctionsAdminTokenSlotResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param callback The callback
     */
    getFunctionsAdminTokenSlot(resourceGroupName: string, name: string, slot: string, callback: msRest.ServiceCallback<string>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param options The optional parameters
     * @param callback The callback
     */
    getFunctionsAdminTokenSlot(resourceGroupName: string, name: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<string>): void;
    /**
     * Get function information by its ID for web site, or a deployment slot.
     * @summary Get function information by its ID for web site, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param functionName Function name.
     * @param slot Name of the deployment slot. If a slot is not specified, the API deletes a
     * deployment for the production slot.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsGetInstanceFunctionSlotResponse>
     */
    getInstanceFunctionSlot(resourceGroupName: string, name: string, functionName: string, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsGetInstanceFunctionSlotResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param functionName Function name.
     * @param slot Name of the deployment slot. If a slot is not specified, the API deletes a
     * deployment for the production slot.
     * @param callback The callback
     */
    getInstanceFunctionSlot(resourceGroupName: string, name: string, functionName: string, slot: string, callback: msRest.ServiceCallback<Models.FunctionEnvelope>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param functionName Function name.
     * @param slot Name of the deployment slot. If a slot is not specified, the API deletes a
     * deployment for the production slot.
     * @param options The optional parameters
     * @param callback The callback
     */
    getInstanceFunctionSlot(resourceGroupName: string, name: string, functionName: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.FunctionEnvelope>): void;
    /**
     * Create function for web site, or a deployment slot.
     * @summary Create function for web site, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param functionName Function name.
     * @param slot Name of the deployment slot. If a slot is not specified, the API deletes a
     * deployment for the production slot.
     * @param functionEnvelope Function details.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsCreateInstanceFunctionSlotResponse>
     */
    createInstanceFunctionSlot(resourceGroupName: string, name: string, functionName: string, slot: string, functionEnvelope: Models.FunctionEnvelope, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsCreateInstanceFunctionSlotResponse>;
    /**
     * Delete a function for web site, or a deployment slot.
     * @summary Delete a function for web site, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param functionName Function name.
     * @param slot Name of the deployment slot. If a slot is not specified, the API deletes a
     * deployment for the production slot.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    deleteInstanceFunctionSlot(resourceGroupName: string, name: string, functionName: string, slot: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param functionName Function name.
     * @param slot Name of the deployment slot. If a slot is not specified, the API deletes a
     * deployment for the production slot.
     * @param callback The callback
     */
    deleteInstanceFunctionSlot(resourceGroupName: string, name: string, functionName: string, slot: string, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param functionName Function name.
     * @param slot Name of the deployment slot. If a slot is not specified, the API deletes a
     * deployment for the production slot.
     * @param options The optional parameters
     * @param callback The callback
     */
    deleteInstanceFunctionSlot(resourceGroupName: string, name: string, functionName: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
    /**
     * Get function secrets for a function in a web site, or a deployment slot.
     * @summary Get function secrets for a function in a web site, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param functionName Function name.
     * @param slot Name of the deployment slot. If a slot is not specified, the API deletes a
     * deployment for the production slot.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsListFunctionSecretsSlotResponse>
     */
    listFunctionSecretsSlot(resourceGroupName: string, name: string, functionName: string, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListFunctionSecretsSlotResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param functionName Function name.
     * @param slot Name of the deployment slot. If a slot is not specified, the API deletes a
     * deployment for the production slot.
     * @param callback The callback
     */
    listFunctionSecretsSlot(resourceGroupName: string, name: string, functionName: string, slot: string, callback: msRest.ServiceCallback<Models.FunctionSecrets>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param functionName Function name.
     * @param slot Name of the deployment slot. If a slot is not specified, the API deletes a
     * deployment for the production slot.
     * @param options The optional parameters
     * @param callback The callback
     */
    listFunctionSecretsSlot(resourceGroupName: string, name: string, functionName: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.FunctionSecrets>): void;
    /**
     * Get hostname bindings for an app or a deployment slot.
     * @summary Get hostname bindings for an app or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slot Name of the deployment slot. If a slot is not specified, the API gets hostname
     * bindings for the production slot.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsListHostNameBindingsSlotResponse>
     */
    listHostNameBindingsSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListHostNameBindingsSlotResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slot Name of the deployment slot. If a slot is not specified, the API gets hostname
     * bindings for the production slot.
     * @param callback The callback
     */
    listHostNameBindingsSlot(resourceGroupName: string, name: string, slot: string, callback: msRest.ServiceCallback<Models.HostNameBindingCollection>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slot Name of the deployment slot. If a slot is not specified, the API gets hostname
     * bindings for the production slot.
     * @param options The optional parameters
     * @param callback The callback
     */
    listHostNameBindingsSlot(resourceGroupName: string, name: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.HostNameBindingCollection>): void;
    /**
     * Get the named hostname binding for an app (or deployment slot, if specified).
     * @summary Get the named hostname binding for an app (or deployment slot, if specified).
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slot Name of the deployment slot. If a slot is not specified, the API the named binding
     * for the production slot.
     * @param hostName Hostname in the hostname binding.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsGetHostNameBindingSlotResponse>
     */
    getHostNameBindingSlot(resourceGroupName: string, name: string, slot: string, hostName: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsGetHostNameBindingSlotResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slot Name of the deployment slot. If a slot is not specified, the API the named binding
     * for the production slot.
     * @param hostName Hostname in the hostname binding.
     * @param callback The callback
     */
    getHostNameBindingSlot(resourceGroupName: string, name: string, slot: string, hostName: string, callback: msRest.ServiceCallback<Models.HostNameBinding>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slot Name of the deployment slot. If a slot is not specified, the API the named binding
     * for the production slot.
     * @param hostName Hostname in the hostname binding.
     * @param options The optional parameters
     * @param callback The callback
     */
    getHostNameBindingSlot(resourceGroupName: string, name: string, slot: string, hostName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.HostNameBinding>): void;
    /**
     * Creates a hostname binding for an app.
     * @summary Creates a hostname binding for an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param hostName Hostname in the hostname binding.
     * @param hostNameBinding Binding details. This is the JSON representation of a HostNameBinding
     * object.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will create a
     * binding for the production slot.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsCreateOrUpdateHostNameBindingSlotResponse>
     */
    createOrUpdateHostNameBindingSlot(resourceGroupName: string, name: string, hostName: string, hostNameBinding: Models.HostNameBinding, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsCreateOrUpdateHostNameBindingSlotResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param hostName Hostname in the hostname binding.
     * @param hostNameBinding Binding details. This is the JSON representation of a HostNameBinding
     * object.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will create a
     * binding for the production slot.
     * @param callback The callback
     */
    createOrUpdateHostNameBindingSlot(resourceGroupName: string, name: string, hostName: string, hostNameBinding: Models.HostNameBinding, slot: string, callback: msRest.ServiceCallback<Models.HostNameBinding>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param hostName Hostname in the hostname binding.
     * @param hostNameBinding Binding details. This is the JSON representation of a HostNameBinding
     * object.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will create a
     * binding for the production slot.
     * @param options The optional parameters
     * @param callback The callback
     */
    createOrUpdateHostNameBindingSlot(resourceGroupName: string, name: string, hostName: string, hostNameBinding: Models.HostNameBinding, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.HostNameBinding>): void;
    /**
     * Deletes a hostname binding for an app.
     * @summary Deletes a hostname binding for an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will delete the
     * binding for the production slot.
     * @param hostName Hostname in the hostname binding.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    deleteHostNameBindingSlot(resourceGroupName: string, name: string, slot: string, hostName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will delete the
     * binding for the production slot.
     * @param hostName Hostname in the hostname binding.
     * @param callback The callback
     */
    deleteHostNameBindingSlot(resourceGroupName: string, name: string, slot: string, hostName: string, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will delete the
     * binding for the production slot.
     * @param hostName Hostname in the hostname binding.
     * @param options The optional parameters
     * @param callback The callback
     */
    deleteHostNameBindingSlot(resourceGroupName: string, name: string, slot: string, hostName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
    /**
     * Retrieves a specific Service Bus Hybrid Connection used by this Web App.
     * @summary Retrieves a specific Service Bus Hybrid Connection used by this Web App.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name The name of the web app.
     * @param namespaceName The namespace for this hybrid connection.
     * @param relayName The relay name for this hybrid connection.
     * @param slot The name of the slot for the web app.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsGetHybridConnectionSlotResponse>
     */
    getHybridConnectionSlot(resourceGroupName: string, name: string, namespaceName: string, relayName: string, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsGetHybridConnectionSlotResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name The name of the web app.
     * @param namespaceName The namespace for this hybrid connection.
     * @param relayName The relay name for this hybrid connection.
     * @param slot The name of the slot for the web app.
     * @param callback The callback
     */
    getHybridConnectionSlot(resourceGroupName: string, name: string, namespaceName: string, relayName: string, slot: string, callback: msRest.ServiceCallback<Models.HybridConnection>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name The name of the web app.
     * @param namespaceName The namespace for this hybrid connection.
     * @param relayName The relay name for this hybrid connection.
     * @param slot The name of the slot for the web app.
     * @param options The optional parameters
     * @param callback The callback
     */
    getHybridConnectionSlot(resourceGroupName: string, name: string, namespaceName: string, relayName: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.HybridConnection>): void;
    /**
     * Creates a new Hybrid Connection using a Service Bus relay.
     * @summary Creates a new Hybrid Connection using a Service Bus relay.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name The name of the web app.
     * @param namespaceName The namespace for this hybrid connection.
     * @param relayName The relay name for this hybrid connection.
     * @param connectionEnvelope The details of the hybrid connection.
     * @param slot The name of the slot for the web app.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsCreateOrUpdateHybridConnectionSlotResponse>
     */
    createOrUpdateHybridConnectionSlot(resourceGroupName: string, name: string, namespaceName: string, relayName: string, connectionEnvelope: Models.HybridConnection, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsCreateOrUpdateHybridConnectionSlotResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name The name of the web app.
     * @param namespaceName The namespace for this hybrid connection.
     * @param relayName The relay name for this hybrid connection.
     * @param connectionEnvelope The details of the hybrid connection.
     * @param slot The name of the slot for the web app.
     * @param callback The callback
     */
    createOrUpdateHybridConnectionSlot(resourceGroupName: string, name: string, namespaceName: string, relayName: string, connectionEnvelope: Models.HybridConnection, slot: string, callback: msRest.ServiceCallback<Models.HybridConnection>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name The name of the web app.
     * @param namespaceName The namespace for this hybrid connection.
     * @param relayName The relay name for this hybrid connection.
     * @param connectionEnvelope The details of the hybrid connection.
     * @param slot The name of the slot for the web app.
     * @param options The optional parameters
     * @param callback The callback
     */
    createOrUpdateHybridConnectionSlot(resourceGroupName: string, name: string, namespaceName: string, relayName: string, connectionEnvelope: Models.HybridConnection, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.HybridConnection>): void;
    /**
     * Removes a Hybrid Connection from this site.
     * @summary Removes a Hybrid Connection from this site.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name The name of the web app.
     * @param namespaceName The namespace for this hybrid connection.
     * @param relayName The relay name for this hybrid connection.
     * @param slot The name of the slot for the web app.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    deleteHybridConnectionSlot(resourceGroupName: string, name: string, namespaceName: string, relayName: string, slot: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name The name of the web app.
     * @param namespaceName The namespace for this hybrid connection.
     * @param relayName The relay name for this hybrid connection.
     * @param slot The name of the slot for the web app.
     * @param callback The callback
     */
    deleteHybridConnectionSlot(resourceGroupName: string, name: string, namespaceName: string, relayName: string, slot: string, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name The name of the web app.
     * @param namespaceName The namespace for this hybrid connection.
     * @param relayName The relay name for this hybrid connection.
     * @param slot The name of the slot for the web app.
     * @param options The optional parameters
     * @param callback The callback
     */
    deleteHybridConnectionSlot(resourceGroupName: string, name: string, namespaceName: string, relayName: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
    /**
     * Creates a new Hybrid Connection using a Service Bus relay.
     * @summary Creates a new Hybrid Connection using a Service Bus relay.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name The name of the web app.
     * @param namespaceName The namespace for this hybrid connection.
     * @param relayName The relay name for this hybrid connection.
     * @param connectionEnvelope The details of the hybrid connection.
     * @param slot The name of the slot for the web app.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsUpdateHybridConnectionSlotResponse>
     */
    updateHybridConnectionSlot(resourceGroupName: string, name: string, namespaceName: string, relayName: string, connectionEnvelope: Models.HybridConnection, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsUpdateHybridConnectionSlotResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name The name of the web app.
     * @param namespaceName The namespace for this hybrid connection.
     * @param relayName The relay name for this hybrid connection.
     * @param connectionEnvelope The details of the hybrid connection.
     * @param slot The name of the slot for the web app.
     * @param callback The callback
     */
    updateHybridConnectionSlot(resourceGroupName: string, name: string, namespaceName: string, relayName: string, connectionEnvelope: Models.HybridConnection, slot: string, callback: msRest.ServiceCallback<Models.HybridConnection>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name The name of the web app.
     * @param namespaceName The namespace for this hybrid connection.
     * @param relayName The relay name for this hybrid connection.
     * @param connectionEnvelope The details of the hybrid connection.
     * @param slot The name of the slot for the web app.
     * @param options The optional parameters
     * @param callback The callback
     */
    updateHybridConnectionSlot(resourceGroupName: string, name: string, namespaceName: string, relayName: string, connectionEnvelope: Models.HybridConnection, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.HybridConnection>): void;
    /**
     * Gets the send key name and value for a Hybrid Connection.
     * @summary Gets the send key name and value for a Hybrid Connection.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name The name of the web app.
     * @param namespaceName The namespace for this hybrid connection.
     * @param relayName The relay name for this hybrid connection.
     * @param slot The name of the slot for the web app.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsListHybridConnectionKeysSlotResponse>
     */
    listHybridConnectionKeysSlot(resourceGroupName: string, name: string, namespaceName: string, relayName: string, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListHybridConnectionKeysSlotResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name The name of the web app.
     * @param namespaceName The namespace for this hybrid connection.
     * @param relayName The relay name for this hybrid connection.
     * @param slot The name of the slot for the web app.
     * @param callback The callback
     */
    listHybridConnectionKeysSlot(resourceGroupName: string, name: string, namespaceName: string, relayName: string, slot: string, callback: msRest.ServiceCallback<Models.HybridConnectionKey>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name The name of the web app.
     * @param namespaceName The namespace for this hybrid connection.
     * @param relayName The relay name for this hybrid connection.
     * @param slot The name of the slot for the web app.
     * @param options The optional parameters
     * @param callback The callback
     */
    listHybridConnectionKeysSlot(resourceGroupName: string, name: string, namespaceName: string, relayName: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.HybridConnectionKey>): void;
    /**
     * Retrieves all Service Bus Hybrid Connections used by this Web App.
     * @summary Retrieves all Service Bus Hybrid Connections used by this Web App.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name The name of the web app.
     * @param slot The name of the slot for the web app.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsListHybridConnectionsSlotResponse>
     */
    listHybridConnectionsSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListHybridConnectionsSlotResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name The name of the web app.
     * @param slot The name of the slot for the web app.
     * @param callback The callback
     */
    listHybridConnectionsSlot(resourceGroupName: string, name: string, slot: string, callback: msRest.ServiceCallback<Models.HybridConnection>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name The name of the web app.
     * @param slot The name of the slot for the web app.
     * @param options The optional parameters
     * @param callback The callback
     */
    listHybridConnectionsSlot(resourceGroupName: string, name: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.HybridConnection>): void;
    /**
     * Gets hybrid connections configured for an app (or deployment slot, if specified).
     * @summary Gets hybrid connections configured for an app (or deployment slot, if specified).
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get hybrid
     * connections for the production slot.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsListRelayServiceConnectionsSlotResponse>
     */
    listRelayServiceConnectionsSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListRelayServiceConnectionsSlotResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get hybrid
     * connections for the production slot.
     * @param callback The callback
     */
    listRelayServiceConnectionsSlot(resourceGroupName: string, name: string, slot: string, callback: msRest.ServiceCallback<Models.RelayServiceConnectionEntity>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get hybrid
     * connections for the production slot.
     * @param options The optional parameters
     * @param callback The callback
     */
    listRelayServiceConnectionsSlot(resourceGroupName: string, name: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.RelayServiceConnectionEntity>): void;
    /**
     * Gets a hybrid connection configuration by its name.
     * @summary Gets a hybrid connection configuration by its name.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param entityName Name of the hybrid connection.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get a hybrid
     * connection for the production slot.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsGetRelayServiceConnectionSlotResponse>
     */
    getRelayServiceConnectionSlot(resourceGroupName: string, name: string, entityName: string, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsGetRelayServiceConnectionSlotResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param entityName Name of the hybrid connection.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get a hybrid
     * connection for the production slot.
     * @param callback The callback
     */
    getRelayServiceConnectionSlot(resourceGroupName: string, name: string, entityName: string, slot: string, callback: msRest.ServiceCallback<Models.RelayServiceConnectionEntity>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param entityName Name of the hybrid connection.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get a hybrid
     * connection for the production slot.
     * @param options The optional parameters
     * @param callback The callback
     */
    getRelayServiceConnectionSlot(resourceGroupName: string, name: string, entityName: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.RelayServiceConnectionEntity>): void;
    /**
     * Creates a new hybrid connection configuration (PUT), or updates an existing one (PATCH).
     * @summary Creates a new hybrid connection configuration (PUT), or updates an existing one
     * (PATCH).
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param entityName Name of the hybrid connection configuration.
     * @param connectionEnvelope Details of the hybrid connection configuration.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will create or
     * update a hybrid connection for the production slot.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsCreateOrUpdateRelayServiceConnectionSlotResponse>
     */
    createOrUpdateRelayServiceConnectionSlot(resourceGroupName: string, name: string, entityName: string, connectionEnvelope: Models.RelayServiceConnectionEntity, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsCreateOrUpdateRelayServiceConnectionSlotResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param entityName Name of the hybrid connection configuration.
     * @param connectionEnvelope Details of the hybrid connection configuration.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will create or
     * update a hybrid connection for the production slot.
     * @param callback The callback
     */
    createOrUpdateRelayServiceConnectionSlot(resourceGroupName: string, name: string, entityName: string, connectionEnvelope: Models.RelayServiceConnectionEntity, slot: string, callback: msRest.ServiceCallback<Models.RelayServiceConnectionEntity>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param entityName Name of the hybrid connection configuration.
     * @param connectionEnvelope Details of the hybrid connection configuration.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will create or
     * update a hybrid connection for the production slot.
     * @param options The optional parameters
     * @param callback The callback
     */
    createOrUpdateRelayServiceConnectionSlot(resourceGroupName: string, name: string, entityName: string, connectionEnvelope: Models.RelayServiceConnectionEntity, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.RelayServiceConnectionEntity>): void;
    /**
     * Deletes a relay service connection by its name.
     * @summary Deletes a relay service connection by its name.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param entityName Name of the hybrid connection configuration.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will delete a
     * hybrid connection for the production slot.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    deleteRelayServiceConnectionSlot(resourceGroupName: string, name: string, entityName: string, slot: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param entityName Name of the hybrid connection configuration.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will delete a
     * hybrid connection for the production slot.
     * @param callback The callback
     */
    deleteRelayServiceConnectionSlot(resourceGroupName: string, name: string, entityName: string, slot: string, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param entityName Name of the hybrid connection configuration.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will delete a
     * hybrid connection for the production slot.
     * @param options The optional parameters
     * @param callback The callback
     */
    deleteRelayServiceConnectionSlot(resourceGroupName: string, name: string, entityName: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
    /**
     * Creates a new hybrid connection configuration (PUT), or updates an existing one (PATCH).
     * @summary Creates a new hybrid connection configuration (PUT), or updates an existing one
     * (PATCH).
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param entityName Name of the hybrid connection configuration.
     * @param connectionEnvelope Details of the hybrid connection configuration.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will create or
     * update a hybrid connection for the production slot.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsUpdateRelayServiceConnectionSlotResponse>
     */
    updateRelayServiceConnectionSlot(resourceGroupName: string, name: string, entityName: string, connectionEnvelope: Models.RelayServiceConnectionEntity, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsUpdateRelayServiceConnectionSlotResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param entityName Name of the hybrid connection configuration.
     * @param connectionEnvelope Details of the hybrid connection configuration.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will create or
     * update a hybrid connection for the production slot.
     * @param callback The callback
     */
    updateRelayServiceConnectionSlot(resourceGroupName: string, name: string, entityName: string, connectionEnvelope: Models.RelayServiceConnectionEntity, slot: string, callback: msRest.ServiceCallback<Models.RelayServiceConnectionEntity>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param entityName Name of the hybrid connection configuration.
     * @param connectionEnvelope Details of the hybrid connection configuration.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will create or
     * update a hybrid connection for the production slot.
     * @param options The optional parameters
     * @param callback The callback
     */
    updateRelayServiceConnectionSlot(resourceGroupName: string, name: string, entityName: string, connectionEnvelope: Models.RelayServiceConnectionEntity, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.RelayServiceConnectionEntity>): void;
    /**
     * Gets all scale-out instances of an app.
     * @summary Gets all scale-out instances of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slot Name of the deployment slot. If a slot is not specified, the API gets the production
     * slot instances.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsListInstanceIdentifiersSlotResponse>
     */
    listInstanceIdentifiersSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListInstanceIdentifiersSlotResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slot Name of the deployment slot. If a slot is not specified, the API gets the production
     * slot instances.
     * @param callback The callback
     */
    listInstanceIdentifiersSlot(resourceGroupName: string, name: string, slot: string, callback: msRest.ServiceCallback<Models.WebAppInstanceCollection>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slot Name of the deployment slot. If a slot is not specified, the API gets the production
     * slot instances.
     * @param options The optional parameters
     * @param callback The callback
     */
    listInstanceIdentifiersSlot(resourceGroupName: string, name: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.WebAppInstanceCollection>): void;
    /**
     * Get the status of the last MSDeploy operation.
     * @summary Get the status of the last MSDeploy operation.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param instanceId ID of web app instance.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsGetInstanceMsDeployStatusSlotResponse>
     */
    getInstanceMsDeployStatusSlot(resourceGroupName: string, name: string, slot: string, instanceId: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsGetInstanceMsDeployStatusSlotResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param instanceId ID of web app instance.
     * @param callback The callback
     */
    getInstanceMsDeployStatusSlot(resourceGroupName: string, name: string, slot: string, instanceId: string, callback: msRest.ServiceCallback<Models.MSDeployStatus>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param instanceId ID of web app instance.
     * @param options The optional parameters
     * @param callback The callback
     */
    getInstanceMsDeployStatusSlot(resourceGroupName: string, name: string, slot: string, instanceId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.MSDeployStatus>): void;
    /**
     * Invoke the MSDeploy web app extension.
     * @summary Invoke the MSDeploy web app extension.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param instanceId ID of web app instance.
     * @param mSDeploy Details of MSDeploy operation
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsCreateInstanceMSDeployOperationSlotResponse>
     */
    createInstanceMSDeployOperationSlot(resourceGroupName: string, name: string, slot: string, instanceId: string, mSDeploy: Models.MSDeploy, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsCreateInstanceMSDeployOperationSlotResponse>;
    /**
     * Get the MSDeploy Log for the last MSDeploy operation.
     * @summary Get the MSDeploy Log for the last MSDeploy operation.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param instanceId ID of web app instance.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsGetInstanceMSDeployLogSlotResponse>
     */
    getInstanceMSDeployLogSlot(resourceGroupName: string, name: string, slot: string, instanceId: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsGetInstanceMSDeployLogSlotResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param instanceId ID of web app instance.
     * @param callback The callback
     */
    getInstanceMSDeployLogSlot(resourceGroupName: string, name: string, slot: string, instanceId: string, callback: msRest.ServiceCallback<Models.MSDeployLog>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param instanceId ID of web app instance.
     * @param options The optional parameters
     * @param callback The callback
     */
    getInstanceMSDeployLogSlot(resourceGroupName: string, name: string, slot: string, instanceId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.MSDeployLog>): void;
    /**
     * Get list of processes for a web site, or a deployment slot, or for a specific scaled-out
     * instance in a web site.
     * @summary Get list of processes for a web site, or a deployment slot, or for a specific
     * scaled-out instance in a web site.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments
     * for the production slot.
     * @param instanceId ID of a specific scaled-out instance. This is the value of the name property
     * in the JSON response from "GET api/sites/{siteName}/instances".
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsListInstanceProcessesSlotResponse>
     */
    listInstanceProcessesSlot(resourceGroupName: string, name: string, slot: string, instanceId: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListInstanceProcessesSlotResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments
     * for the production slot.
     * @param instanceId ID of a specific scaled-out instance. This is the value of the name property
     * in the JSON response from "GET api/sites/{siteName}/instances".
     * @param callback The callback
     */
    listInstanceProcessesSlot(resourceGroupName: string, name: string, slot: string, instanceId: string, callback: msRest.ServiceCallback<Models.ProcessInfoCollection>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments
     * for the production slot.
     * @param instanceId ID of a specific scaled-out instance. This is the value of the name property
     * in the JSON response from "GET api/sites/{siteName}/instances".
     * @param options The optional parameters
     * @param callback The callback
     */
    listInstanceProcessesSlot(resourceGroupName: string, name: string, slot: string, instanceId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ProcessInfoCollection>): void;
    /**
     * Get process information by its ID for a specific scaled-out instance in a web site.
     * @summary Get process information by its ID for a specific scaled-out instance in a web site.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param processId PID.
     * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments
     * for the production slot.
     * @param instanceId ID of a specific scaled-out instance. This is the value of the name property
     * in the JSON response from "GET api/sites/{siteName}/instances".
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsGetInstanceProcessSlotResponse>
     */
    getInstanceProcessSlot(resourceGroupName: string, name: string, processId: string, slot: string, instanceId: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsGetInstanceProcessSlotResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param processId PID.
     * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments
     * for the production slot.
     * @param instanceId ID of a specific scaled-out instance. This is the value of the name property
     * in the JSON response from "GET api/sites/{siteName}/instances".
     * @param callback The callback
     */
    getInstanceProcessSlot(resourceGroupName: string, name: string, processId: string, slot: string, instanceId: string, callback: msRest.ServiceCallback<Models.ProcessInfo>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param processId PID.
     * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments
     * for the production slot.
     * @param instanceId ID of a specific scaled-out instance. This is the value of the name property
     * in the JSON response from "GET api/sites/{siteName}/instances".
     * @param options The optional parameters
     * @param callback The callback
     */
    getInstanceProcessSlot(resourceGroupName: string, name: string, processId: string, slot: string, instanceId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ProcessInfo>): void;
    /**
     * Terminate a process by its ID for a web site, or a deployment slot, or specific scaled-out
     * instance in a web site.
     * @summary Terminate a process by its ID for a web site, or a deployment slot, or specific
     * scaled-out instance in a web site.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param processId PID.
     * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments
     * for the production slot.
     * @param instanceId ID of a specific scaled-out instance. This is the value of the name property
     * in the JSON response from "GET api/sites/{siteName}/instances".
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    deleteInstanceProcessSlot(resourceGroupName: string, name: string, processId: string, slot: string, instanceId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param processId PID.
     * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments
     * for the production slot.
     * @param instanceId ID of a specific scaled-out instance. This is the value of the name property
     * in the JSON response from "GET api/sites/{siteName}/instances".
     * @param callback The callback
     */
    deleteInstanceProcessSlot(resourceGroupName: string, name: string, processId: string, slot: string, instanceId: string, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param processId PID.
     * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments
     * for the production slot.
     * @param instanceId ID of a specific scaled-out instance. This is the value of the name property
     * in the JSON response from "GET api/sites/{siteName}/instances".
     * @param options The optional parameters
     * @param callback The callback
     */
    deleteInstanceProcessSlot(resourceGroupName: string, name: string, processId: string, slot: string, instanceId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
    /**
     * Get a memory dump of a process by its ID for a specific scaled-out instance in a web site.
     * @summary Get a memory dump of a process by its ID for a specific scaled-out instance in a web
     * site.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param processId PID.
     * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments
     * for the production slot.
     * @param instanceId ID of a specific scaled-out instance. This is the value of the name property
     * in the JSON response from "GET api/sites/{siteName}/instances".
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsGetInstanceProcessDumpSlotResponse>
     */
    getInstanceProcessDumpSlot(resourceGroupName: string, name: string, processId: string, slot: string, instanceId: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsGetInstanceProcessDumpSlotResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param processId PID.
     * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments
     * for the production slot.
     * @param instanceId ID of a specific scaled-out instance. This is the value of the name property
     * in the JSON response from "GET api/sites/{siteName}/instances".
     * @param callback The callback
     */
    getInstanceProcessDumpSlot(resourceGroupName: string, name: string, processId: string, slot: string, instanceId: string, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param processId PID.
     * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments
     * for the production slot.
     * @param instanceId ID of a specific scaled-out instance. This is the value of the name property
     * in the JSON response from "GET api/sites/{siteName}/instances".
     * @param options The optional parameters
     * @param callback The callback
     */
    getInstanceProcessDumpSlot(resourceGroupName: string, name: string, processId: string, slot: string, instanceId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
    /**
     * List module information for a process by its ID for a specific scaled-out instance in a web
     * site.
     * @summary List module information for a process by its ID for a specific scaled-out instance in a
     * web site.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param processId PID.
     * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments
     * for the production slot.
     * @param instanceId ID of a specific scaled-out instance. This is the value of the name property
     * in the JSON response from "GET api/sites/{siteName}/instances".
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsListInstanceProcessModulesSlotResponse>
     */
    listInstanceProcessModulesSlot(resourceGroupName: string, name: string, processId: string, slot: string, instanceId: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListInstanceProcessModulesSlotResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param processId PID.
     * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments
     * for the production slot.
     * @param instanceId ID of a specific scaled-out instance. This is the value of the name property
     * in the JSON response from "GET api/sites/{siteName}/instances".
     * @param callback The callback
     */
    listInstanceProcessModulesSlot(resourceGroupName: string, name: string, processId: string, slot: string, instanceId: string, callback: msRest.ServiceCallback<Models.ProcessModuleInfoCollection>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param processId PID.
     * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments
     * for the production slot.
     * @param instanceId ID of a specific scaled-out instance. This is the value of the name property
     * in the JSON response from "GET api/sites/{siteName}/instances".
     * @param options The optional parameters
     * @param callback The callback
     */
    listInstanceProcessModulesSlot(resourceGroupName: string, name: string, processId: string, slot: string, instanceId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ProcessModuleInfoCollection>): void;
    /**
     * Get process information by its ID for a specific scaled-out instance in a web site.
     * @summary Get process information by its ID for a specific scaled-out instance in a web site.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param processId PID.
     * @param baseAddress Module base address.
     * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments
     * for the production slot.
     * @param instanceId ID of a specific scaled-out instance. This is the value of the name property
     * in the JSON response from "GET api/sites/{siteName}/instances".
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsGetInstanceProcessModuleSlotResponse>
     */
    getInstanceProcessModuleSlot(resourceGroupName: string, name: string, processId: string, baseAddress: string, slot: string, instanceId: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsGetInstanceProcessModuleSlotResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param processId PID.
     * @param baseAddress Module base address.
     * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments
     * for the production slot.
     * @param instanceId ID of a specific scaled-out instance. This is the value of the name property
     * in the JSON response from "GET api/sites/{siteName}/instances".
     * @param callback The callback
     */
    getInstanceProcessModuleSlot(resourceGroupName: string, name: string, processId: string, baseAddress: string, slot: string, instanceId: string, callback: msRest.ServiceCallback<Models.ProcessModuleInfo>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param processId PID.
     * @param baseAddress Module base address.
     * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments
     * for the production slot.
     * @param instanceId ID of a specific scaled-out instance. This is the value of the name property
     * in the JSON response from "GET api/sites/{siteName}/instances".
     * @param options The optional parameters
     * @param callback The callback
     */
    getInstanceProcessModuleSlot(resourceGroupName: string, name: string, processId: string, baseAddress: string, slot: string, instanceId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ProcessModuleInfo>): void;
    /**
     * List the threads in a process by its ID for a specific scaled-out instance in a web site.
     * @summary List the threads in a process by its ID for a specific scaled-out instance in a web
     * site.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param processId PID.
     * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments
     * for the production slot.
     * @param instanceId ID of a specific scaled-out instance. This is the value of the name property
     * in the JSON response from "GET api/sites/{siteName}/instances".
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsListInstanceProcessThreadsSlotResponse>
     */
    listInstanceProcessThreadsSlot(resourceGroupName: string, name: string, processId: string, slot: string, instanceId: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListInstanceProcessThreadsSlotResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param processId PID.
     * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments
     * for the production slot.
     * @param instanceId ID of a specific scaled-out instance. This is the value of the name property
     * in the JSON response from "GET api/sites/{siteName}/instances".
     * @param callback The callback
     */
    listInstanceProcessThreadsSlot(resourceGroupName: string, name: string, processId: string, slot: string, instanceId: string, callback: msRest.ServiceCallback<Models.ProcessThreadInfoCollection>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param processId PID.
     * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments
     * for the production slot.
     * @param instanceId ID of a specific scaled-out instance. This is the value of the name property
     * in the JSON response from "GET api/sites/{siteName}/instances".
     * @param options The optional parameters
     * @param callback The callback
     */
    listInstanceProcessThreadsSlot(resourceGroupName: string, name: string, processId: string, slot: string, instanceId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ProcessThreadInfoCollection>): void;
    /**
     * Get thread information by Thread ID for a specific process, in a specific scaled-out instance in
     * a web site.
     * @summary Get thread information by Thread ID for a specific process, in a specific scaled-out
     * instance in a web site.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param processId PID.
     * @param threadId TID.
     * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments
     * for the production slot.
     * @param instanceId ID of a specific scaled-out instance. This is the value of the name property
     * in the JSON response from "GET api/sites/{siteName}/instances".
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsGetInstanceProcessThreadSlotResponse>
     */
    getInstanceProcessThreadSlot(resourceGroupName: string, name: string, processId: string, threadId: string, slot: string, instanceId: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsGetInstanceProcessThreadSlotResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param processId PID.
     * @param threadId TID.
     * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments
     * for the production slot.
     * @param instanceId ID of a specific scaled-out instance. This is the value of the name property
     * in the JSON response from "GET api/sites/{siteName}/instances".
     * @param callback The callback
     */
    getInstanceProcessThreadSlot(resourceGroupName: string, name: string, processId: string, threadId: string, slot: string, instanceId: string, callback: msRest.ServiceCallback<Models.ProcessThreadInfo>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param processId PID.
     * @param threadId TID.
     * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments
     * for the production slot.
     * @param instanceId ID of a specific scaled-out instance. This is the value of the name property
     * in the JSON response from "GET api/sites/{siteName}/instances".
     * @param options The optional parameters
     * @param callback The callback
     */
    getInstanceProcessThreadSlot(resourceGroupName: string, name: string, processId: string, threadId: string, slot: string, instanceId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ProcessThreadInfo>): void;
    /**
     * Shows whether an app can be cloned to another resource group or subscription.
     * @summary Shows whether an app can be cloned to another resource group or subscription.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slot Name of the deployment slot. By default, this API returns information on the
     * production slot.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsIsCloneableSlotResponse>
     */
    isCloneableSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsIsCloneableSlotResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slot Name of the deployment slot. By default, this API returns information on the
     * production slot.
     * @param callback The callback
     */
    isCloneableSlot(resourceGroupName: string, name: string, slot: string, callback: msRest.ServiceCallback<Models.SiteCloneability>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slot Name of the deployment slot. By default, this API returns information on the
     * production slot.
     * @param options The optional parameters
     * @param callback The callback
     */
    isCloneableSlot(resourceGroupName: string, name: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SiteCloneability>): void;
    /**
     * This is to allow calling via powershell and ARM template.
     * @summary This is to allow calling via powershell and ARM template.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will restore a
     * backup of the production slot.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsListSyncFunctionTriggersSlotResponse>
     */
    listSyncFunctionTriggersSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListSyncFunctionTriggersSlotResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will restore a
     * backup of the production slot.
     * @param callback The callback
     */
    listSyncFunctionTriggersSlot(resourceGroupName: string, name: string, slot: string, callback: msRest.ServiceCallback<Models.FunctionSecrets>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will restore a
     * backup of the production slot.
     * @param options The optional parameters
     * @param callback The callback
     */
    listSyncFunctionTriggersSlot(resourceGroupName: string, name: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.FunctionSecrets>): void;
    /**
     * Gets all metric definitions of an app (or deployment slot, if specified).
     * @summary Gets all metric definitions of an app (or deployment slot, if specified).
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get metric
     * definitions of the production slot.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsListMetricDefinitionsSlotResponse>
     */
    listMetricDefinitionsSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListMetricDefinitionsSlotResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get metric
     * definitions of the production slot.
     * @param callback The callback
     */
    listMetricDefinitionsSlot(resourceGroupName: string, name: string, slot: string, callback: msRest.ServiceCallback<Models.ResourceMetricDefinitionCollection>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get metric
     * definitions of the production slot.
     * @param options The optional parameters
     * @param callback The callback
     */
    listMetricDefinitionsSlot(resourceGroupName: string, name: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ResourceMetricDefinitionCollection>): void;
    /**
     * Gets performance metrics of an app (or deployment slot, if specified).
     * @summary Gets performance metrics of an app (or deployment slot, if specified).
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get metrics of
     * the production slot.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsListMetricsSlotResponse>
     */
    listMetricsSlot(resourceGroupName: string, name: string, slot: string, options?: Models.WebAppsListMetricsSlotOptionalParams): Promise<Models.WebAppsListMetricsSlotResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get metrics of
     * the production slot.
     * @param callback The callback
     */
    listMetricsSlot(resourceGroupName: string, name: string, slot: string, callback: msRest.ServiceCallback<Models.ResourceMetricCollection>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get metrics of
     * the production slot.
     * @param options The optional parameters
     * @param callback The callback
     */
    listMetricsSlot(resourceGroupName: string, name: string, slot: string, options: Models.WebAppsListMetricsSlotOptionalParams, callback: msRest.ServiceCallback<Models.ResourceMetricCollection>): void;
    /**
     * Returns the status of MySql in app migration, if one is active, and whether or not MySql in app
     * is enabled
     * @summary Returns the status of MySql in app migration, if one is active, and whether or not
     * MySql in app is enabled
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of web app.
     * @param slot Name of the deployment slot.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsGetMigrateMySqlStatusSlotResponse>
     */
    getMigrateMySqlStatusSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsGetMigrateMySqlStatusSlotResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of web app.
     * @param slot Name of the deployment slot.
     * @param callback The callback
     */
    getMigrateMySqlStatusSlot(resourceGroupName: string, name: string, slot: string, callback: msRest.ServiceCallback<Models.MigrateMySqlStatus>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of web app.
     * @param slot Name of the deployment slot.
     * @param options The optional parameters
     * @param callback The callback
     */
    getMigrateMySqlStatusSlot(resourceGroupName: string, name: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.MigrateMySqlStatus>): void;
    /**
     * Gets a Swift Virtual Network connection.
     * @summary Gets a Swift Virtual Network connection.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get a gateway
     * for the production slot's Virtual Network.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsGetSwiftVirtualNetworkConnectionSlotResponse>
     */
    getSwiftVirtualNetworkConnectionSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsGetSwiftVirtualNetworkConnectionSlotResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get a gateway
     * for the production slot's Virtual Network.
     * @param callback The callback
     */
    getSwiftVirtualNetworkConnectionSlot(resourceGroupName: string, name: string, slot: string, callback: msRest.ServiceCallback<Models.SwiftVirtualNetwork>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get a gateway
     * for the production slot's Virtual Network.
     * @param options The optional parameters
     * @param callback The callback
     */
    getSwiftVirtualNetworkConnectionSlot(resourceGroupName: string, name: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SwiftVirtualNetwork>): void;
    /**
     * Integrates this Web App with a Virtual Network. This requires that 1) "swiftSupported" is true
     * when doing a GET against this resource, and 2) that the target Subnet has already been
     * delegated, and is not
     * in use by another App Service Plan other than the one this App is in.
     * @summary Integrates this Web App with a Virtual Network. This requires that 1) "swiftSupported"
     * is true when doing a GET against this resource, and 2) that the target Subnet has already been
     * delegated, and is not
     * in use by another App Service Plan other than the one this App is in.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param connectionEnvelope Properties of the Virtual Network connection. See example.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will add or update
     * connections for the production slot.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsCreateOrUpdateSwiftVirtualNetworkConnectionSlotResponse>
     */
    createOrUpdateSwiftVirtualNetworkConnectionSlot(resourceGroupName: string, name: string, connectionEnvelope: Models.SwiftVirtualNetwork, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsCreateOrUpdateSwiftVirtualNetworkConnectionSlotResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param connectionEnvelope Properties of the Virtual Network connection. See example.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will add or update
     * connections for the production slot.
     * @param callback The callback
     */
    createOrUpdateSwiftVirtualNetworkConnectionSlot(resourceGroupName: string, name: string, connectionEnvelope: Models.SwiftVirtualNetwork, slot: string, callback: msRest.ServiceCallback<Models.SwiftVirtualNetwork>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param connectionEnvelope Properties of the Virtual Network connection. See example.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will add or update
     * connections for the production slot.
     * @param options The optional parameters
     * @param callback The callback
     */
    createOrUpdateSwiftVirtualNetworkConnectionSlot(resourceGroupName: string, name: string, connectionEnvelope: Models.SwiftVirtualNetwork, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SwiftVirtualNetwork>): void;
    /**
     * Deletes a Swift Virtual Network connection from an app (or deployment slot).
     * @summary Deletes a Swift Virtual Network connection from an app (or deployment slot).
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will delete the
     * connection for the production slot.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    deleteSwiftVirtualNetworkSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will delete the
     * connection for the production slot.
     * @param callback The callback
     */
    deleteSwiftVirtualNetworkSlot(resourceGroupName: string, name: string, slot: string, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will delete the
     * connection for the production slot.
     * @param options The optional parameters
     * @param callback The callback
     */
    deleteSwiftVirtualNetworkSlot(resourceGroupName: string, name: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
    /**
     * Integrates this Web App with a Virtual Network. This requires that 1) "swiftSupported" is true
     * when doing a GET against this resource, and 2) that the target Subnet has already been
     * delegated, and is not
     * in use by another App Service Plan other than the one this App is in.
     * @summary Integrates this Web App with a Virtual Network. This requires that 1) "swiftSupported"
     * is true when doing a GET against this resource, and 2) that the target Subnet has already been
     * delegated, and is not
     * in use by another App Service Plan other than the one this App is in.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param connectionEnvelope Properties of the Virtual Network connection. See example.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will add or update
     * connections for the production slot.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsUpdateSwiftVirtualNetworkConnectionSlotResponse>
     */
    updateSwiftVirtualNetworkConnectionSlot(resourceGroupName: string, name: string, connectionEnvelope: Models.SwiftVirtualNetwork, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsUpdateSwiftVirtualNetworkConnectionSlotResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param connectionEnvelope Properties of the Virtual Network connection. See example.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will add or update
     * connections for the production slot.
     * @param callback The callback
     */
    updateSwiftVirtualNetworkConnectionSlot(resourceGroupName: string, name: string, connectionEnvelope: Models.SwiftVirtualNetwork, slot: string, callback: msRest.ServiceCallback<Models.SwiftVirtualNetwork>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param connectionEnvelope Properties of the Virtual Network connection. See example.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will add or update
     * connections for the production slot.
     * @param options The optional parameters
     * @param callback The callback
     */
    updateSwiftVirtualNetworkConnectionSlot(resourceGroupName: string, name: string, connectionEnvelope: Models.SwiftVirtualNetwork, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SwiftVirtualNetwork>): void;
    /**
     * Gets all network features used by the app (or deployment slot, if specified).
     * @summary Gets all network features used by the app (or deployment slot, if specified).
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param view The type of view. This can either be "summary" or "detailed".
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get network
     * features for the production slot.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsListNetworkFeaturesSlotResponse>
     */
    listNetworkFeaturesSlot(resourceGroupName: string, name: string, view: string, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListNetworkFeaturesSlotResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param view The type of view. This can either be "summary" or "detailed".
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get network
     * features for the production slot.
     * @param callback The callback
     */
    listNetworkFeaturesSlot(resourceGroupName: string, name: string, view: string, slot: string, callback: msRest.ServiceCallback<Models.NetworkFeatures>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param view The type of view. This can either be "summary" or "detailed".
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get network
     * features for the production slot.
     * @param options The optional parameters
     * @param callback The callback
     */
    listNetworkFeaturesSlot(resourceGroupName: string, name: string, view: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.NetworkFeatures>): void;
    /**
     * Gets a named operation for a network trace capturing (or deployment slot, if specified).
     * @summary Gets a named operation for a network trace capturing (or deployment slot, if
     * specified).
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param operationId GUID of the operation.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get an
     * operation for the production slot.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsGetNetworkTraceOperationSlotResponse>
     */
    getNetworkTraceOperationSlot(resourceGroupName: string, name: string, operationId: string, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsGetNetworkTraceOperationSlotResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param operationId GUID of the operation.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get an
     * operation for the production slot.
     * @param callback The callback
     */
    getNetworkTraceOperationSlot(resourceGroupName: string, name: string, operationId: string, slot: string, callback: msRest.ServiceCallback<Models.NetworkTrace[]>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param operationId GUID of the operation.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get an
     * operation for the production slot.
     * @param options The optional parameters
     * @param callback The callback
     */
    getNetworkTraceOperationSlot(resourceGroupName: string, name: string, operationId: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.NetworkTrace[]>): void;
    /**
     * Start capturing network packets for the site (To be deprecated).
     * @summary Start capturing network packets for the site (To be deprecated).
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name The name of the web app.
     * @param slot The name of the slot for this web app.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsStartWebSiteNetworkTraceSlotResponse>
     */
    startWebSiteNetworkTraceSlot(resourceGroupName: string, name: string, slot: string, options?: Models.WebAppsStartWebSiteNetworkTraceSlotOptionalParams): Promise<Models.WebAppsStartWebSiteNetworkTraceSlotResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name The name of the web app.
     * @param slot The name of the slot for this web app.
     * @param callback The callback
     */
    startWebSiteNetworkTraceSlot(resourceGroupName: string, name: string, slot: string, callback: msRest.ServiceCallback<string>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name The name of the web app.
     * @param slot The name of the slot for this web app.
     * @param options The optional parameters
     * @param callback The callback
     */
    startWebSiteNetworkTraceSlot(resourceGroupName: string, name: string, slot: string, options: Models.WebAppsStartWebSiteNetworkTraceSlotOptionalParams, callback: msRest.ServiceCallback<string>): void;
    /**
     * Start capturing network packets for the site.
     * @summary Start capturing network packets for the site.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name The name of the web app.
     * @param slot The name of the slot for this web app.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsStartWebSiteNetworkTraceOperationSlotResponse>
     */
    startWebSiteNetworkTraceOperationSlot(resourceGroupName: string, name: string, slot: string, options?: Models.WebAppsStartWebSiteNetworkTraceOperationSlotOptionalParams): Promise<Models.WebAppsStartWebSiteNetworkTraceOperationSlotResponse>;
    /**
     * Stop ongoing capturing network packets for the site.
     * @summary Stop ongoing capturing network packets for the site.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name The name of the web app.
     * @param slot The name of the slot for this web app.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    stopWebSiteNetworkTraceSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name The name of the web app.
     * @param slot The name of the slot for this web app.
     * @param callback The callback
     */
    stopWebSiteNetworkTraceSlot(resourceGroupName: string, name: string, slot: string, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name The name of the web app.
     * @param slot The name of the slot for this web app.
     * @param options The optional parameters
     * @param callback The callback
     */
    stopWebSiteNetworkTraceSlot(resourceGroupName: string, name: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
    /**
     * Gets a named operation for a network trace capturing (or deployment slot, if specified).
     * @summary Gets a named operation for a network trace capturing (or deployment slot, if
     * specified).
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param operationId GUID of the operation.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get an
     * operation for the production slot.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsGetNetworkTracesSlotResponse>
     */
    getNetworkTracesSlot(resourceGroupName: string, name: string, operationId: string, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsGetNetworkTracesSlotResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param operationId GUID of the operation.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get an
     * operation for the production slot.
     * @param callback The callback
     */
    getNetworkTracesSlot(resourceGroupName: string, name: string, operationId: string, slot: string, callback: msRest.ServiceCallback<Models.NetworkTrace[]>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param operationId GUID of the operation.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get an
     * operation for the production slot.
     * @param options The optional parameters
     * @param callback The callback
     */
    getNetworkTracesSlot(resourceGroupName: string, name: string, operationId: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.NetworkTrace[]>): void;
    /**
     * Gets a named operation for a network trace capturing (or deployment slot, if specified).
     * @summary Gets a named operation for a network trace capturing (or deployment slot, if
     * specified).
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param operationId GUID of the operation.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get an
     * operation for the production slot.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsGetNetworkTraceOperationSlotV2Response>
     */
    getNetworkTraceOperationSlotV2(resourceGroupName: string, name: string, operationId: string, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsGetNetworkTraceOperationSlotV2Response>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param operationId GUID of the operation.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get an
     * operation for the production slot.
     * @param callback The callback
     */
    getNetworkTraceOperationSlotV2(resourceGroupName: string, name: string, operationId: string, slot: string, callback: msRest.ServiceCallback<Models.NetworkTrace[]>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param operationId GUID of the operation.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get an
     * operation for the production slot.
     * @param options The optional parameters
     * @param callback The callback
     */
    getNetworkTraceOperationSlotV2(resourceGroupName: string, name: string, operationId: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.NetworkTrace[]>): void;
    /**
     * Gets a named operation for a network trace capturing (or deployment slot, if specified).
     * @summary Gets a named operation for a network trace capturing (or deployment slot, if
     * specified).
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param operationId GUID of the operation.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get an
     * operation for the production slot.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsGetNetworkTracesSlotV2Response>
     */
    getNetworkTracesSlotV2(resourceGroupName: string, name: string, operationId: string, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsGetNetworkTracesSlotV2Response>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param operationId GUID of the operation.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get an
     * operation for the production slot.
     * @param callback The callback
     */
    getNetworkTracesSlotV2(resourceGroupName: string, name: string, operationId: string, slot: string, callback: msRest.ServiceCallback<Models.NetworkTrace[]>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param operationId GUID of the operation.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get an
     * operation for the production slot.
     * @param options The optional parameters
     * @param callback The callback
     */
    getNetworkTracesSlotV2(resourceGroupName: string, name: string, operationId: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.NetworkTrace[]>): void;
    /**
     * Generates a new publishing password for an app (or deployment slot, if specified).
     * @summary Generates a new publishing password for an app (or deployment slot, if specified).
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slot Name of the deployment slot. If a slot is not specified, the API generate a new
     * publishing password for the production slot.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    generateNewSitePublishingPasswordSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slot Name of the deployment slot. If a slot is not specified, the API generate a new
     * publishing password for the production slot.
     * @param callback The callback
     */
    generateNewSitePublishingPasswordSlot(resourceGroupName: string, name: string, slot: string, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slot Name of the deployment slot. If a slot is not specified, the API generate a new
     * publishing password for the production slot.
     * @param options The optional parameters
     * @param callback The callback
     */
    generateNewSitePublishingPasswordSlot(resourceGroupName: string, name: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
    /**
     * Gets perfmon counters for web app.
     * @summary Gets perfmon counters for web app.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsListPerfMonCountersSlotResponse>
     */
    listPerfMonCountersSlot(resourceGroupName: string, name: string, slot: string, options?: Models.WebAppsListPerfMonCountersSlotOptionalParams): Promise<Models.WebAppsListPerfMonCountersSlotResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param callback The callback
     */
    listPerfMonCountersSlot(resourceGroupName: string, name: string, slot: string, callback: msRest.ServiceCallback<Models.PerfMonCounterCollection>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param options The optional parameters
     * @param callback The callback
     */
    listPerfMonCountersSlot(resourceGroupName: string, name: string, slot: string, options: Models.WebAppsListPerfMonCountersSlotOptionalParams, callback: msRest.ServiceCallback<Models.PerfMonCounterCollection>): void;
    /**
     * Gets web app's event logs.
     * @summary Gets web app's event logs.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsGetSitePhpErrorLogFlagSlotResponse>
     */
    getSitePhpErrorLogFlagSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsGetSitePhpErrorLogFlagSlotResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param callback The callback
     */
    getSitePhpErrorLogFlagSlot(resourceGroupName: string, name: string, slot: string, callback: msRest.ServiceCallback<Models.SitePhpErrorLogFlag>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param options The optional parameters
     * @param callback The callback
     */
    getSitePhpErrorLogFlagSlot(resourceGroupName: string, name: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SitePhpErrorLogFlag>): void;
    /**
     * Gets the premier add-ons of an app.
     * @summary Gets the premier add-ons of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get the
     * premier add-ons for the production slot.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsListPremierAddOnsSlotResponse>
     */
    listPremierAddOnsSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListPremierAddOnsSlotResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get the
     * premier add-ons for the production slot.
     * @param callback The callback
     */
    listPremierAddOnsSlot(resourceGroupName: string, name: string, slot: string, callback: msRest.ServiceCallback<Models.PremierAddOn>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get the
     * premier add-ons for the production slot.
     * @param options The optional parameters
     * @param callback The callback
     */
    listPremierAddOnsSlot(resourceGroupName: string, name: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PremierAddOn>): void;
    /**
     * Gets a named add-on of an app.
     * @summary Gets a named add-on of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param premierAddOnName Add-on name.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get the named
     * add-on for the production slot.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsGetPremierAddOnSlotResponse>
     */
    getPremierAddOnSlot(resourceGroupName: string, name: string, premierAddOnName: string, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsGetPremierAddOnSlotResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param premierAddOnName Add-on name.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get the named
     * add-on for the production slot.
     * @param callback The callback
     */
    getPremierAddOnSlot(resourceGroupName: string, name: string, premierAddOnName: string, slot: string, callback: msRest.ServiceCallback<Models.PremierAddOn>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param premierAddOnName Add-on name.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get the named
     * add-on for the production slot.
     * @param options The optional parameters
     * @param callback The callback
     */
    getPremierAddOnSlot(resourceGroupName: string, name: string, premierAddOnName: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PremierAddOn>): void;
    /**
     * Updates a named add-on of an app.
     * @summary Updates a named add-on of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param premierAddOnName Add-on name.
     * @param premierAddOn A JSON representation of the edited premier add-on.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will update the
     * named add-on for the production slot.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsAddPremierAddOnSlotResponse>
     */
    addPremierAddOnSlot(resourceGroupName: string, name: string, premierAddOnName: string, premierAddOn: Models.PremierAddOn, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsAddPremierAddOnSlotResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param premierAddOnName Add-on name.
     * @param premierAddOn A JSON representation of the edited premier add-on.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will update the
     * named add-on for the production slot.
     * @param callback The callback
     */
    addPremierAddOnSlot(resourceGroupName: string, name: string, premierAddOnName: string, premierAddOn: Models.PremierAddOn, slot: string, callback: msRest.ServiceCallback<Models.PremierAddOn>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param premierAddOnName Add-on name.
     * @param premierAddOn A JSON representation of the edited premier add-on.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will update the
     * named add-on for the production slot.
     * @param options The optional parameters
     * @param callback The callback
     */
    addPremierAddOnSlot(resourceGroupName: string, name: string, premierAddOnName: string, premierAddOn: Models.PremierAddOn, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PremierAddOn>): void;
    /**
     * Delete a premier add-on from an app.
     * @summary Delete a premier add-on from an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param premierAddOnName Add-on name.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will delete the
     * named add-on for the production slot.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    deletePremierAddOnSlot(resourceGroupName: string, name: string, premierAddOnName: string, slot: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param premierAddOnName Add-on name.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will delete the
     * named add-on for the production slot.
     * @param callback The callback
     */
    deletePremierAddOnSlot(resourceGroupName: string, name: string, premierAddOnName: string, slot: string, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param premierAddOnName Add-on name.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will delete the
     * named add-on for the production slot.
     * @param options The optional parameters
     * @param callback The callback
     */
    deletePremierAddOnSlot(resourceGroupName: string, name: string, premierAddOnName: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
    /**
     * Updates a named add-on of an app.
     * @summary Updates a named add-on of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param premierAddOnName Add-on name.
     * @param premierAddOn A JSON representation of the edited premier add-on.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will update the
     * named add-on for the production slot.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsUpdatePremierAddOnSlotResponse>
     */
    updatePremierAddOnSlot(resourceGroupName: string, name: string, premierAddOnName: string, premierAddOn: Models.PremierAddOnPatchResource, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsUpdatePremierAddOnSlotResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param premierAddOnName Add-on name.
     * @param premierAddOn A JSON representation of the edited premier add-on.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will update the
     * named add-on for the production slot.
     * @param callback The callback
     */
    updatePremierAddOnSlot(resourceGroupName: string, name: string, premierAddOnName: string, premierAddOn: Models.PremierAddOnPatchResource, slot: string, callback: msRest.ServiceCallback<Models.PremierAddOn>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param premierAddOnName Add-on name.
     * @param premierAddOn A JSON representation of the edited premier add-on.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will update the
     * named add-on for the production slot.
     * @param options The optional parameters
     * @param callback The callback
     */
    updatePremierAddOnSlot(resourceGroupName: string, name: string, premierAddOnName: string, premierAddOn: Models.PremierAddOnPatchResource, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PremierAddOn>): void;
    /**
     * Gets data around private site access enablement and authorized Virtual Networks that can access
     * the site.
     * @summary Gets data around private site access enablement and authorized Virtual Networks that
     * can access the site.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name The name of the web app.
     * @param slot The name of the slot for the web app.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsGetPrivateAccessSlotResponse>
     */
    getPrivateAccessSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsGetPrivateAccessSlotResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name The name of the web app.
     * @param slot The name of the slot for the web app.
     * @param callback The callback
     */
    getPrivateAccessSlot(resourceGroupName: string, name: string, slot: string, callback: msRest.ServiceCallback<Models.PrivateAccess>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name The name of the web app.
     * @param slot The name of the slot for the web app.
     * @param options The optional parameters
     * @param callback The callback
     */
    getPrivateAccessSlot(resourceGroupName: string, name: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PrivateAccess>): void;
    /**
     * Sets data around private site access enablement and authorized Virtual Networks that can access
     * the site.
     * @summary Sets data around private site access enablement and authorized Virtual Networks that
     * can access the site.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name The name of the web app.
     * @param access The information for the private access
     * @param slot The name of the slot for the web app.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsPutPrivateAccessVnetSlotResponse>
     */
    putPrivateAccessVnetSlot(resourceGroupName: string, name: string, access: Models.PrivateAccess, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsPutPrivateAccessVnetSlotResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name The name of the web app.
     * @param access The information for the private access
     * @param slot The name of the slot for the web app.
     * @param callback The callback
     */
    putPrivateAccessVnetSlot(resourceGroupName: string, name: string, access: Models.PrivateAccess, slot: string, callback: msRest.ServiceCallback<Models.PrivateAccess>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name The name of the web app.
     * @param access The information for the private access
     * @param slot The name of the slot for the web app.
     * @param options The optional parameters
     * @param callback The callback
     */
    putPrivateAccessVnetSlot(resourceGroupName: string, name: string, access: Models.PrivateAccess, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PrivateAccess>): void;
    /**
     * Get list of processes for a web site, or a deployment slot, or for a specific scaled-out
     * instance in a web site.
     * @summary Get list of processes for a web site, or a deployment slot, or for a specific
     * scaled-out instance in a web site.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments
     * for the production slot.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsListProcessesSlotResponse>
     */
    listProcessesSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListProcessesSlotResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments
     * for the production slot.
     * @param callback The callback
     */
    listProcessesSlot(resourceGroupName: string, name: string, slot: string, callback: msRest.ServiceCallback<Models.ProcessInfoCollection>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments
     * for the production slot.
     * @param options The optional parameters
     * @param callback The callback
     */
    listProcessesSlot(resourceGroupName: string, name: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ProcessInfoCollection>): void;
    /**
     * Get process information by its ID for a specific scaled-out instance in a web site.
     * @summary Get process information by its ID for a specific scaled-out instance in a web site.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param processId PID.
     * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments
     * for the production slot.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsGetProcessSlotResponse>
     */
    getProcessSlot(resourceGroupName: string, name: string, processId: string, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsGetProcessSlotResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param processId PID.
     * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments
     * for the production slot.
     * @param callback The callback
     */
    getProcessSlot(resourceGroupName: string, name: string, processId: string, slot: string, callback: msRest.ServiceCallback<Models.ProcessInfo>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param processId PID.
     * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments
     * for the production slot.
     * @param options The optional parameters
     * @param callback The callback
     */
    getProcessSlot(resourceGroupName: string, name: string, processId: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ProcessInfo>): void;
    /**
     * Terminate a process by its ID for a web site, or a deployment slot, or specific scaled-out
     * instance in a web site.
     * @summary Terminate a process by its ID for a web site, or a deployment slot, or specific
     * scaled-out instance in a web site.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param processId PID.
     * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments
     * for the production slot.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    deleteProcessSlot(resourceGroupName: string, name: string, processId: string, slot: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param processId PID.
     * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments
     * for the production slot.
     * @param callback The callback
     */
    deleteProcessSlot(resourceGroupName: string, name: string, processId: string, slot: string, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param processId PID.
     * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments
     * for the production slot.
     * @param options The optional parameters
     * @param callback The callback
     */
    deleteProcessSlot(resourceGroupName: string, name: string, processId: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
    /**
     * Get a memory dump of a process by its ID for a specific scaled-out instance in a web site.
     * @summary Get a memory dump of a process by its ID for a specific scaled-out instance in a web
     * site.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param processId PID.
     * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments
     * for the production slot.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsGetProcessDumpSlotResponse>
     */
    getProcessDumpSlot(resourceGroupName: string, name: string, processId: string, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsGetProcessDumpSlotResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param processId PID.
     * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments
     * for the production slot.
     * @param callback The callback
     */
    getProcessDumpSlot(resourceGroupName: string, name: string, processId: string, slot: string, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param processId PID.
     * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments
     * for the production slot.
     * @param options The optional parameters
     * @param callback The callback
     */
    getProcessDumpSlot(resourceGroupName: string, name: string, processId: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
    /**
     * List module information for a process by its ID for a specific scaled-out instance in a web
     * site.
     * @summary List module information for a process by its ID for a specific scaled-out instance in a
     * web site.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param processId PID.
     * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments
     * for the production slot.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsListProcessModulesSlotResponse>
     */
    listProcessModulesSlot(resourceGroupName: string, name: string, processId: string, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListProcessModulesSlotResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param processId PID.
     * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments
     * for the production slot.
     * @param callback The callback
     */
    listProcessModulesSlot(resourceGroupName: string, name: string, processId: string, slot: string, callback: msRest.ServiceCallback<Models.ProcessModuleInfoCollection>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param processId PID.
     * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments
     * for the production slot.
     * @param options The optional parameters
     * @param callback The callback
     */
    listProcessModulesSlot(resourceGroupName: string, name: string, processId: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ProcessModuleInfoCollection>): void;
    /**
     * Get process information by its ID for a specific scaled-out instance in a web site.
     * @summary Get process information by its ID for a specific scaled-out instance in a web site.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param processId PID.
     * @param baseAddress Module base address.
     * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments
     * for the production slot.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsGetProcessModuleSlotResponse>
     */
    getProcessModuleSlot(resourceGroupName: string, name: string, processId: string, baseAddress: string, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsGetProcessModuleSlotResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param processId PID.
     * @param baseAddress Module base address.
     * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments
     * for the production slot.
     * @param callback The callback
     */
    getProcessModuleSlot(resourceGroupName: string, name: string, processId: string, baseAddress: string, slot: string, callback: msRest.ServiceCallback<Models.ProcessModuleInfo>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param processId PID.
     * @param baseAddress Module base address.
     * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments
     * for the production slot.
     * @param options The optional parameters
     * @param callback The callback
     */
    getProcessModuleSlot(resourceGroupName: string, name: string, processId: string, baseAddress: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ProcessModuleInfo>): void;
    /**
     * List the threads in a process by its ID for a specific scaled-out instance in a web site.
     * @summary List the threads in a process by its ID for a specific scaled-out instance in a web
     * site.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param processId PID.
     * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments
     * for the production slot.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsListProcessThreadsSlotResponse>
     */
    listProcessThreadsSlot(resourceGroupName: string, name: string, processId: string, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListProcessThreadsSlotResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param processId PID.
     * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments
     * for the production slot.
     * @param callback The callback
     */
    listProcessThreadsSlot(resourceGroupName: string, name: string, processId: string, slot: string, callback: msRest.ServiceCallback<Models.ProcessThreadInfoCollection>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param processId PID.
     * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments
     * for the production slot.
     * @param options The optional parameters
     * @param callback The callback
     */
    listProcessThreadsSlot(resourceGroupName: string, name: string, processId: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ProcessThreadInfoCollection>): void;
    /**
     * Get thread information by Thread ID for a specific process, in a specific scaled-out instance in
     * a web site.
     * @summary Get thread information by Thread ID for a specific process, in a specific scaled-out
     * instance in a web site.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param processId PID.
     * @param threadId TID.
     * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments
     * for the production slot.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsGetProcessThreadSlotResponse>
     */
    getProcessThreadSlot(resourceGroupName: string, name: string, processId: string, threadId: string, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsGetProcessThreadSlotResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param processId PID.
     * @param threadId TID.
     * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments
     * for the production slot.
     * @param callback The callback
     */
    getProcessThreadSlot(resourceGroupName: string, name: string, processId: string, threadId: string, slot: string, callback: msRest.ServiceCallback<Models.ProcessThreadInfo>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param processId PID.
     * @param threadId TID.
     * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments
     * for the production slot.
     * @param options The optional parameters
     * @param callback The callback
     */
    getProcessThreadSlot(resourceGroupName: string, name: string, processId: string, threadId: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ProcessThreadInfo>): void;
    /**
     * Get public certificates for an app or a deployment slot.
     * @summary Get public certificates for an app or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slot Name of the deployment slot. If a slot is not specified, the API gets hostname
     * bindings for the production slot.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsListPublicCertificatesSlotResponse>
     */
    listPublicCertificatesSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListPublicCertificatesSlotResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slot Name of the deployment slot. If a slot is not specified, the API gets hostname
     * bindings for the production slot.
     * @param callback The callback
     */
    listPublicCertificatesSlot(resourceGroupName: string, name: string, slot: string, callback: msRest.ServiceCallback<Models.PublicCertificateCollection>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slot Name of the deployment slot. If a slot is not specified, the API gets hostname
     * bindings for the production slot.
     * @param options The optional parameters
     * @param callback The callback
     */
    listPublicCertificatesSlot(resourceGroupName: string, name: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PublicCertificateCollection>): void;
    /**
     * Get the named public certificate for an app (or deployment slot, if specified).
     * @summary Get the named public certificate for an app (or deployment slot, if specified).
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slot Name of the deployment slot. If a slot is not specified, the API the named binding
     * for the production slot.
     * @param publicCertificateName Public certificate name.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsGetPublicCertificateSlotResponse>
     */
    getPublicCertificateSlot(resourceGroupName: string, name: string, slot: string, publicCertificateName: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsGetPublicCertificateSlotResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slot Name of the deployment slot. If a slot is not specified, the API the named binding
     * for the production slot.
     * @param publicCertificateName Public certificate name.
     * @param callback The callback
     */
    getPublicCertificateSlot(resourceGroupName: string, name: string, slot: string, publicCertificateName: string, callback: msRest.ServiceCallback<Models.PublicCertificate>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slot Name of the deployment slot. If a slot is not specified, the API the named binding
     * for the production slot.
     * @param publicCertificateName Public certificate name.
     * @param options The optional parameters
     * @param callback The callback
     */
    getPublicCertificateSlot(resourceGroupName: string, name: string, slot: string, publicCertificateName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PublicCertificate>): void;
    /**
     * Creates a hostname binding for an app.
     * @summary Creates a hostname binding for an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param publicCertificateName Public certificate name.
     * @param publicCertificate Public certificate details. This is the JSON representation of a
     * PublicCertificate object.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will create a
     * binding for the production slot.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsCreateOrUpdatePublicCertificateSlotResponse>
     */
    createOrUpdatePublicCertificateSlot(resourceGroupName: string, name: string, publicCertificateName: string, publicCertificate: Models.PublicCertificate, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsCreateOrUpdatePublicCertificateSlotResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param publicCertificateName Public certificate name.
     * @param publicCertificate Public certificate details. This is the JSON representation of a
     * PublicCertificate object.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will create a
     * binding for the production slot.
     * @param callback The callback
     */
    createOrUpdatePublicCertificateSlot(resourceGroupName: string, name: string, publicCertificateName: string, publicCertificate: Models.PublicCertificate, slot: string, callback: msRest.ServiceCallback<Models.PublicCertificate>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param publicCertificateName Public certificate name.
     * @param publicCertificate Public certificate details. This is the JSON representation of a
     * PublicCertificate object.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will create a
     * binding for the production slot.
     * @param options The optional parameters
     * @param callback The callback
     */
    createOrUpdatePublicCertificateSlot(resourceGroupName: string, name: string, publicCertificateName: string, publicCertificate: Models.PublicCertificate, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PublicCertificate>): void;
    /**
     * Deletes a hostname binding for an app.
     * @summary Deletes a hostname binding for an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will delete the
     * binding for the production slot.
     * @param publicCertificateName Public certificate name.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    deletePublicCertificateSlot(resourceGroupName: string, name: string, slot: string, publicCertificateName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will delete the
     * binding for the production slot.
     * @param publicCertificateName Public certificate name.
     * @param callback The callback
     */
    deletePublicCertificateSlot(resourceGroupName: string, name: string, slot: string, publicCertificateName: string, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will delete the
     * binding for the production slot.
     * @param publicCertificateName Public certificate name.
     * @param options The optional parameters
     * @param callback The callback
     */
    deletePublicCertificateSlot(resourceGroupName: string, name: string, slot: string, publicCertificateName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
    /**
     * Gets the publishing profile for an app (or deployment slot, if specified).
     * @summary Gets the publishing profile for an app (or deployment slot, if specified).
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param publishingProfileOptions Specifies publishingProfileOptions for publishing profile. For
     * example, use {"format": "FileZilla3"} to get a FileZilla publishing profile.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get the
     * publishing profile for the production slot.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsListPublishingProfileXmlWithSecretsSlotResponse>
     */
    listPublishingProfileXmlWithSecretsSlot(resourceGroupName: string, name: string, publishingProfileOptions: Models.CsmPublishingProfileOptions, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListPublishingProfileXmlWithSecretsSlotResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param publishingProfileOptions Specifies publishingProfileOptions for publishing profile. For
     * example, use {"format": "FileZilla3"} to get a FileZilla publishing profile.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get the
     * publishing profile for the production slot.
     * @param callback The callback
     */
    listPublishingProfileXmlWithSecretsSlot(resourceGroupName: string, name: string, publishingProfileOptions: Models.CsmPublishingProfileOptions, slot: string, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param publishingProfileOptions Specifies publishingProfileOptions for publishing profile. For
     * example, use {"format": "FileZilla3"} to get a FileZilla publishing profile.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get the
     * publishing profile for the production slot.
     * @param options The optional parameters
     * @param callback The callback
     */
    listPublishingProfileXmlWithSecretsSlot(resourceGroupName: string, name: string, publishingProfileOptions: Models.CsmPublishingProfileOptions, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
    /**
     * Resets the configuration settings of the current slot if they were previously modified by
     * calling the API with POST.
     * @summary Resets the configuration settings of the current slot if they were previously modified
     * by calling the API with POST.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slot Name of the deployment slot. If a slot is not specified, the API resets
     * configuration settings for the production slot.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    resetSlotConfigurationSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slot Name of the deployment slot. If a slot is not specified, the API resets
     * configuration settings for the production slot.
     * @param callback The callback
     */
    resetSlotConfigurationSlot(resourceGroupName: string, name: string, slot: string, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slot Name of the deployment slot. If a slot is not specified, the API resets
     * configuration settings for the production slot.
     * @param options The optional parameters
     * @param callback The callback
     */
    resetSlotConfigurationSlot(resourceGroupName: string, name: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
    /**
     * Restarts an app (or deployment slot, if specified).
     * @summary Restarts an app (or deployment slot, if specified).
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will restart the
     * production slot.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    restartSlot(resourceGroupName: string, name: string, slot: string, options?: Models.WebAppsRestartSlotOptionalParams): Promise<msRest.RestResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will restart the
     * production slot.
     * @param callback The callback
     */
    restartSlot(resourceGroupName: string, name: string, slot: string, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will restart the
     * production slot.
     * @param options The optional parameters
     * @param callback The callback
     */
    restartSlot(resourceGroupName: string, name: string, slot: string, options: Models.WebAppsRestartSlotOptionalParams, callback: msRest.ServiceCallback<void>): void;
    /**
     * Restores an app from a backup blob in Azure Storage.
     * @summary Restores an app from a backup blob in Azure Storage.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param request Information on restore request .
     * @param slot Name of the deployment slot. If a slot is not specified, the API will restore a
     * backup of the production slot.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    restoreFromBackupBlobSlot(resourceGroupName: string, name: string, request: Models.RestoreRequest, slot: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * Restores a deleted web app to this web app.
     * @summary Restores a deleted web app to this web app.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of web app.
     * @param restoreRequest Deleted web app restore information.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    restoreFromDeletedAppSlot(resourceGroupName: string, name: string, restoreRequest: Models.DeletedAppRestoreRequest, slot: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * Restores a web app from a snapshot.
     * @summary Restores a web app from a snapshot.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of web app.
     * @param restoreRequest Snapshot restore settings. Snapshot information can be obtained by calling
     * GetDeletedSites or GetSiteSnapshots API.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    restoreSnapshotSlot(resourceGroupName: string, name: string, restoreRequest: Models.SnapshotRestoreRequest, slot: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * Get list of siteextensions for a web site, or a deployment slot.
     * @summary Get list of siteextensions for a web site, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param slot Name of the deployment slot. If a slot is not specified, the API deletes a
     * deployment for the production slot.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsListSiteExtensionsSlotResponse>
     */
    listSiteExtensionsSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListSiteExtensionsSlotResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param slot Name of the deployment slot. If a slot is not specified, the API deletes a
     * deployment for the production slot.
     * @param callback The callback
     */
    listSiteExtensionsSlot(resourceGroupName: string, name: string, slot: string, callback: msRest.ServiceCallback<Models.SiteExtensionInfoCollection>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param slot Name of the deployment slot. If a slot is not specified, the API deletes a
     * deployment for the production slot.
     * @param options The optional parameters
     * @param callback The callback
     */
    listSiteExtensionsSlot(resourceGroupName: string, name: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SiteExtensionInfoCollection>): void;
    /**
     * Get site extension information by its ID for a web site, or a deployment slot.
     * @summary Get site extension information by its ID for a web site, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param siteExtensionId Site extension name.
     * @param slot Name of the deployment slot. If a slot is not specified, the API deletes a
     * deployment for the production slot.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsGetSiteExtensionSlotResponse>
     */
    getSiteExtensionSlot(resourceGroupName: string, name: string, siteExtensionId: string, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsGetSiteExtensionSlotResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param siteExtensionId Site extension name.
     * @param slot Name of the deployment slot. If a slot is not specified, the API deletes a
     * deployment for the production slot.
     * @param callback The callback
     */
    getSiteExtensionSlot(resourceGroupName: string, name: string, siteExtensionId: string, slot: string, callback: msRest.ServiceCallback<Models.SiteExtensionInfo>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param siteExtensionId Site extension name.
     * @param slot Name of the deployment slot. If a slot is not specified, the API deletes a
     * deployment for the production slot.
     * @param options The optional parameters
     * @param callback The callback
     */
    getSiteExtensionSlot(resourceGroupName: string, name: string, siteExtensionId: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SiteExtensionInfo>): void;
    /**
     * Install site extension on a web site, or a deployment slot.
     * @summary Install site extension on a web site, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param siteExtensionId Site extension name.
     * @param slot Name of the deployment slot. If a slot is not specified, the API deletes a
     * deployment for the production slot.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsInstallSiteExtensionSlotResponse>
     */
    installSiteExtensionSlot(resourceGroupName: string, name: string, siteExtensionId: string, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsInstallSiteExtensionSlotResponse>;
    /**
     * Remove a site extension from a web site, or a deployment slot.
     * @summary Remove a site extension from a web site, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param siteExtensionId Site extension name.
     * @param slot Name of the deployment slot. If a slot is not specified, the API deletes a
     * deployment for the production slot.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    deleteSiteExtensionSlot(resourceGroupName: string, name: string, siteExtensionId: string, slot: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param siteExtensionId Site extension name.
     * @param slot Name of the deployment slot. If a slot is not specified, the API deletes a
     * deployment for the production slot.
     * @param callback The callback
     */
    deleteSiteExtensionSlot(resourceGroupName: string, name: string, siteExtensionId: string, slot: string, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param siteExtensionId Site extension name.
     * @param slot Name of the deployment slot. If a slot is not specified, the API deletes a
     * deployment for the production slot.
     * @param options The optional parameters
     * @param callback The callback
     */
    deleteSiteExtensionSlot(resourceGroupName: string, name: string, siteExtensionId: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
    /**
     * Get the difference in configuration settings between two web app slots.
     * @summary Get the difference in configuration settings between two web app slots.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slotSwapEntity JSON object that contains the target slot name. See example.
     * @param slot Name of the source slot. If a slot is not specified, the production slot is used as
     * the source slot.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsListSlotDifferencesSlotResponse>
     */
    listSlotDifferencesSlot(resourceGroupName: string, name: string, slotSwapEntity: Models.CsmSlotEntity, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListSlotDifferencesSlotResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slotSwapEntity JSON object that contains the target slot name. See example.
     * @param slot Name of the source slot. If a slot is not specified, the production slot is used as
     * the source slot.
     * @param callback The callback
     */
    listSlotDifferencesSlot(resourceGroupName: string, name: string, slotSwapEntity: Models.CsmSlotEntity, slot: string, callback: msRest.ServiceCallback<Models.SlotDifferenceCollection>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slotSwapEntity JSON object that contains the target slot name. See example.
     * @param slot Name of the source slot. If a slot is not specified, the production slot is used as
     * the source slot.
     * @param options The optional parameters
     * @param callback The callback
     */
    listSlotDifferencesSlot(resourceGroupName: string, name: string, slotSwapEntity: Models.CsmSlotEntity, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SlotDifferenceCollection>): void;
    /**
     * Swaps two deployment slots of an app.
     * @summary Swaps two deployment slots of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slotSwapEntity JSON object that contains the target slot name. See example.
     * @param slot Name of the source slot. If a slot is not specified, the production slot is used as
     * the source slot.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    swapSlotSlot(resourceGroupName: string, name: string, slotSwapEntity: Models.CsmSlotEntity, slot: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * Returns all Snapshots to the user.
     * @summary Returns all Snapshots to the user.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Website Name.
     * @param slot Website Slot.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsListSnapshotsSlotResponse>
     */
    listSnapshotsSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListSnapshotsSlotResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Website Name.
     * @param slot Website Slot.
     * @param callback The callback
     */
    listSnapshotsSlot(resourceGroupName: string, name: string, slot: string, callback: msRest.ServiceCallback<Models.SnapshotCollection>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Website Name.
     * @param slot Website Slot.
     * @param options The optional parameters
     * @param callback The callback
     */
    listSnapshotsSlot(resourceGroupName: string, name: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SnapshotCollection>): void;
    /**
     * Returns all Snapshots to the user from DRSecondary endpoint.
     * @summary Returns all Snapshots to the user from DRSecondary endpoint.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Website Name.
     * @param slot Website Slot.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsListSnapshotsFromDRSecondarySlotResponse>
     */
    listSnapshotsFromDRSecondarySlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListSnapshotsFromDRSecondarySlotResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Website Name.
     * @param slot Website Slot.
     * @param callback The callback
     */
    listSnapshotsFromDRSecondarySlot(resourceGroupName: string, name: string, slot: string, callback: msRest.ServiceCallback<Models.SnapshotCollection>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Website Name.
     * @param slot Website Slot.
     * @param options The optional parameters
     * @param callback The callback
     */
    listSnapshotsFromDRSecondarySlot(resourceGroupName: string, name: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SnapshotCollection>): void;
    /**
     * Gets the source control configuration of an app.
     * @summary Gets the source control configuration of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get the source
     * control configuration for the production slot.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsGetSourceControlSlotResponse>
     */
    getSourceControlSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsGetSourceControlSlotResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get the source
     * control configuration for the production slot.
     * @param callback The callback
     */
    getSourceControlSlot(resourceGroupName: string, name: string, slot: string, callback: msRest.ServiceCallback<Models.SiteSourceControl>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get the source
     * control configuration for the production slot.
     * @param options The optional parameters
     * @param callback The callback
     */
    getSourceControlSlot(resourceGroupName: string, name: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SiteSourceControl>): void;
    /**
     * Updates the source control configuration of an app.
     * @summary Updates the source control configuration of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param siteSourceControl JSON representation of a SiteSourceControl object. See example.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will update the
     * source control configuration for the production slot.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsCreateOrUpdateSourceControlSlotResponse>
     */
    createOrUpdateSourceControlSlot(resourceGroupName: string, name: string, siteSourceControl: Models.SiteSourceControl, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsCreateOrUpdateSourceControlSlotResponse>;
    /**
     * Deletes the source control configuration of an app.
     * @summary Deletes the source control configuration of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will delete the
     * source control configuration for the production slot.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    deleteSourceControlSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will delete the
     * source control configuration for the production slot.
     * @param callback The callback
     */
    deleteSourceControlSlot(resourceGroupName: string, name: string, slot: string, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will delete the
     * source control configuration for the production slot.
     * @param options The optional parameters
     * @param callback The callback
     */
    deleteSourceControlSlot(resourceGroupName: string, name: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
    /**
     * Updates the source control configuration of an app.
     * @summary Updates the source control configuration of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param siteSourceControl JSON representation of a SiteSourceControl object. See example.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will update the
     * source control configuration for the production slot.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsUpdateSourceControlSlotResponse>
     */
    updateSourceControlSlot(resourceGroupName: string, name: string, siteSourceControl: Models.SiteSourceControl, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsUpdateSourceControlSlotResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param siteSourceControl JSON representation of a SiteSourceControl object. See example.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will update the
     * source control configuration for the production slot.
     * @param callback The callback
     */
    updateSourceControlSlot(resourceGroupName: string, name: string, siteSourceControl: Models.SiteSourceControl, slot: string, callback: msRest.ServiceCallback<Models.SiteSourceControl>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param siteSourceControl JSON representation of a SiteSourceControl object. See example.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will update the
     * source control configuration for the production slot.
     * @param options The optional parameters
     * @param callback The callback
     */
    updateSourceControlSlot(resourceGroupName: string, name: string, siteSourceControl: Models.SiteSourceControl, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SiteSourceControl>): void;
    /**
     * Starts an app (or deployment slot, if specified).
     * @summary Starts an app (or deployment slot, if specified).
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will start the
     * production slot.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    startSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will start the
     * production slot.
     * @param callback The callback
     */
    startSlot(resourceGroupName: string, name: string, slot: string, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will start the
     * production slot.
     * @param options The optional parameters
     * @param callback The callback
     */
    startSlot(resourceGroupName: string, name: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
    /**
     * Start capturing network packets for the site.
     * @summary Start capturing network packets for the site.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name The name of the web app.
     * @param slot The name of the slot for this web app.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsStartNetworkTraceSlotResponse>
     */
    startNetworkTraceSlot(resourceGroupName: string, name: string, slot: string, options?: Models.WebAppsStartNetworkTraceSlotOptionalParams): Promise<Models.WebAppsStartNetworkTraceSlotResponse>;
    /**
     * Stops an app (or deployment slot, if specified).
     * @summary Stops an app (or deployment slot, if specified).
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will stop the
     * production slot.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    stopSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will stop the
     * production slot.
     * @param callback The callback
     */
    stopSlot(resourceGroupName: string, name: string, slot: string, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will stop the
     * production slot.
     * @param options The optional parameters
     * @param callback The callback
     */
    stopSlot(resourceGroupName: string, name: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
    /**
     * Stop ongoing capturing network packets for the site.
     * @summary Stop ongoing capturing network packets for the site.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name The name of the web app.
     * @param slot The name of the slot for this web app.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    stopNetworkTraceSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name The name of the web app.
     * @param slot The name of the slot for this web app.
     * @param callback The callback
     */
    stopNetworkTraceSlot(resourceGroupName: string, name: string, slot: string, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name The name of the web app.
     * @param slot The name of the slot for this web app.
     * @param options The optional parameters
     * @param callback The callback
     */
    stopNetworkTraceSlot(resourceGroupName: string, name: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
    /**
     * Sync web app repository.
     * @summary Sync web app repository.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    syncRepositorySlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param callback The callback
     */
    syncRepositorySlot(resourceGroupName: string, name: string, slot: string, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param options The optional parameters
     * @param callback The callback
     */
    syncRepositorySlot(resourceGroupName: string, name: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
    /**
     * Syncs function trigger metadata to the scale controller
     * @summary Syncs function trigger metadata to the scale controller
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will restore a
     * backup of the production slot.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    syncFunctionTriggersSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will restore a
     * backup of the production slot.
     * @param callback The callback
     */
    syncFunctionTriggersSlot(resourceGroupName: string, name: string, slot: string, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will restore a
     * backup of the production slot.
     * @param options The optional parameters
     * @param callback The callback
     */
    syncFunctionTriggersSlot(resourceGroupName: string, name: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
    /**
     * List triggered web jobs for an app, or a deployment slot.
     * @summary List triggered web jobs for an app, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param slot Name of the deployment slot. If a slot is not specified, the API deletes a
     * deployment for the production slot.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsListTriggeredWebJobsSlotResponse>
     */
    listTriggeredWebJobsSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListTriggeredWebJobsSlotResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param slot Name of the deployment slot. If a slot is not specified, the API deletes a
     * deployment for the production slot.
     * @param callback The callback
     */
    listTriggeredWebJobsSlot(resourceGroupName: string, name: string, slot: string, callback: msRest.ServiceCallback<Models.TriggeredWebJobCollection>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param slot Name of the deployment slot. If a slot is not specified, the API deletes a
     * deployment for the production slot.
     * @param options The optional parameters
     * @param callback The callback
     */
    listTriggeredWebJobsSlot(resourceGroupName: string, name: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.TriggeredWebJobCollection>): void;
    /**
     * Gets a triggered web job by its ID for an app, or a deployment slot.
     * @summary Gets a triggered web job by its ID for an app, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param webJobName Name of Web Job.
     * @param slot Name of the deployment slot. If a slot is not specified, the API deletes a
     * deployment for the production slot.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsGetTriggeredWebJobSlotResponse>
     */
    getTriggeredWebJobSlot(resourceGroupName: string, name: string, webJobName: string, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsGetTriggeredWebJobSlotResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param webJobName Name of Web Job.
     * @param slot Name of the deployment slot. If a slot is not specified, the API deletes a
     * deployment for the production slot.
     * @param callback The callback
     */
    getTriggeredWebJobSlot(resourceGroupName: string, name: string, webJobName: string, slot: string, callback: msRest.ServiceCallback<Models.TriggeredWebJob>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param webJobName Name of Web Job.
     * @param slot Name of the deployment slot. If a slot is not specified, the API deletes a
     * deployment for the production slot.
     * @param options The optional parameters
     * @param callback The callback
     */
    getTriggeredWebJobSlot(resourceGroupName: string, name: string, webJobName: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.TriggeredWebJob>): void;
    /**
     * Delete a triggered web job by its ID for an app, or a deployment slot.
     * @summary Delete a triggered web job by its ID for an app, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param webJobName Name of Web Job.
     * @param slot Name of the deployment slot. If a slot is not specified, the API deletes a
     * deployment for the production slot.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    deleteTriggeredWebJobSlot(resourceGroupName: string, name: string, webJobName: string, slot: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param webJobName Name of Web Job.
     * @param slot Name of the deployment slot. If a slot is not specified, the API deletes a
     * deployment for the production slot.
     * @param callback The callback
     */
    deleteTriggeredWebJobSlot(resourceGroupName: string, name: string, webJobName: string, slot: string, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param webJobName Name of Web Job.
     * @param slot Name of the deployment slot. If a slot is not specified, the API deletes a
     * deployment for the production slot.
     * @param options The optional parameters
     * @param callback The callback
     */
    deleteTriggeredWebJobSlot(resourceGroupName: string, name: string, webJobName: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
    /**
     * List a triggered web job's history for an app, or a deployment slot.
     * @summary List a triggered web job's history for an app, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param webJobName Name of Web Job.
     * @param slot Name of the deployment slot. If a slot is not specified, the API deletes a
     * deployment for the production slot.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsListTriggeredWebJobHistorySlotResponse>
     */
    listTriggeredWebJobHistorySlot(resourceGroupName: string, name: string, webJobName: string, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListTriggeredWebJobHistorySlotResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param webJobName Name of Web Job.
     * @param slot Name of the deployment slot. If a slot is not specified, the API deletes a
     * deployment for the production slot.
     * @param callback The callback
     */
    listTriggeredWebJobHistorySlot(resourceGroupName: string, name: string, webJobName: string, slot: string, callback: msRest.ServiceCallback<Models.TriggeredJobHistoryCollection>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param webJobName Name of Web Job.
     * @param slot Name of the deployment slot. If a slot is not specified, the API deletes a
     * deployment for the production slot.
     * @param options The optional parameters
     * @param callback The callback
     */
    listTriggeredWebJobHistorySlot(resourceGroupName: string, name: string, webJobName: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.TriggeredJobHistoryCollection>): void;
    /**
     * Gets a triggered web job's history by its ID for an app, , or a deployment slot.
     * @summary Gets a triggered web job's history by its ID for an app, , or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param webJobName Name of Web Job.
     * @param id History ID.
     * @param slot Name of the deployment slot. If a slot is not specified, the API deletes a
     * deployment for the production slot.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsGetTriggeredWebJobHistorySlotResponse>
     */
    getTriggeredWebJobHistorySlot(resourceGroupName: string, name: string, webJobName: string, id: string, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsGetTriggeredWebJobHistorySlotResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param webJobName Name of Web Job.
     * @param id History ID.
     * @param slot Name of the deployment slot. If a slot is not specified, the API deletes a
     * deployment for the production slot.
     * @param callback The callback
     */
    getTriggeredWebJobHistorySlot(resourceGroupName: string, name: string, webJobName: string, id: string, slot: string, callback: msRest.ServiceCallback<Models.TriggeredJobHistory>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param webJobName Name of Web Job.
     * @param id History ID.
     * @param slot Name of the deployment slot. If a slot is not specified, the API deletes a
     * deployment for the production slot.
     * @param options The optional parameters
     * @param callback The callback
     */
    getTriggeredWebJobHistorySlot(resourceGroupName: string, name: string, webJobName: string, id: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.TriggeredJobHistory>): void;
    /**
     * Run a triggered web job for an app, or a deployment slot.
     * @summary Run a triggered web job for an app, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param webJobName Name of Web Job.
     * @param slot Name of the deployment slot. If a slot is not specified, the API deletes a
     * deployment for the production slot.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    runTriggeredWebJobSlot(resourceGroupName: string, name: string, webJobName: string, slot: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param webJobName Name of Web Job.
     * @param slot Name of the deployment slot. If a slot is not specified, the API deletes a
     * deployment for the production slot.
     * @param callback The callback
     */
    runTriggeredWebJobSlot(resourceGroupName: string, name: string, webJobName: string, slot: string, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param webJobName Name of Web Job.
     * @param slot Name of the deployment slot. If a slot is not specified, the API deletes a
     * deployment for the production slot.
     * @param options The optional parameters
     * @param callback The callback
     */
    runTriggeredWebJobSlot(resourceGroupName: string, name: string, webJobName: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
    /**
     * Gets the quota usage information of an app (or deployment slot, if specified).
     * @summary Gets the quota usage information of an app (or deployment slot, if specified).
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get quota
     * information of the production slot.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsListUsagesSlotResponse>
     */
    listUsagesSlot(resourceGroupName: string, name: string, slot: string, options?: Models.WebAppsListUsagesSlotOptionalParams): Promise<Models.WebAppsListUsagesSlotResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get quota
     * information of the production slot.
     * @param callback The callback
     */
    listUsagesSlot(resourceGroupName: string, name: string, slot: string, callback: msRest.ServiceCallback<Models.CsmUsageQuotaCollection>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get quota
     * information of the production slot.
     * @param options The optional parameters
     * @param callback The callback
     */
    listUsagesSlot(resourceGroupName: string, name: string, slot: string, options: Models.WebAppsListUsagesSlotOptionalParams, callback: msRest.ServiceCallback<Models.CsmUsageQuotaCollection>): void;
    /**
     * Gets the virtual networks the app (or deployment slot) is connected to.
     * @summary Gets the virtual networks the app (or deployment slot) is connected to.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get virtual
     * network connections for the production slot.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsListVnetConnectionsSlotResponse>
     */
    listVnetConnectionsSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListVnetConnectionsSlotResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get virtual
     * network connections for the production slot.
     * @param callback The callback
     */
    listVnetConnectionsSlot(resourceGroupName: string, name: string, slot: string, callback: msRest.ServiceCallback<Models.VnetInfo[]>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get virtual
     * network connections for the production slot.
     * @param options The optional parameters
     * @param callback The callback
     */
    listVnetConnectionsSlot(resourceGroupName: string, name: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.VnetInfo[]>): void;
    /**
     * Gets a virtual network the app (or deployment slot) is connected to by name.
     * @summary Gets a virtual network the app (or deployment slot) is connected to by name.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param vnetName Name of the virtual network.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get the named
     * virtual network for the production slot.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsGetVnetConnectionSlotResponse>
     */
    getVnetConnectionSlot(resourceGroupName: string, name: string, vnetName: string, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsGetVnetConnectionSlotResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param vnetName Name of the virtual network.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get the named
     * virtual network for the production slot.
     * @param callback The callback
     */
    getVnetConnectionSlot(resourceGroupName: string, name: string, vnetName: string, slot: string, callback: msRest.ServiceCallback<Models.VnetInfo>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param vnetName Name of the virtual network.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get the named
     * virtual network for the production slot.
     * @param options The optional parameters
     * @param callback The callback
     */
    getVnetConnectionSlot(resourceGroupName: string, name: string, vnetName: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.VnetInfo>): void;
    /**
     * Adds a Virtual Network connection to an app or slot (PUT) or updates the connection properties
     * (PATCH).
     * @summary Adds a Virtual Network connection to an app or slot (PUT) or updates the connection
     * properties (PATCH).
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param vnetName Name of an existing Virtual Network.
     * @param connectionEnvelope Properties of the Virtual Network connection. See example.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will add or update
     * connections for the production slot.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsCreateOrUpdateVnetConnectionSlotResponse>
     */
    createOrUpdateVnetConnectionSlot(resourceGroupName: string, name: string, vnetName: string, connectionEnvelope: Models.VnetInfo, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsCreateOrUpdateVnetConnectionSlotResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param vnetName Name of an existing Virtual Network.
     * @param connectionEnvelope Properties of the Virtual Network connection. See example.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will add or update
     * connections for the production slot.
     * @param callback The callback
     */
    createOrUpdateVnetConnectionSlot(resourceGroupName: string, name: string, vnetName: string, connectionEnvelope: Models.VnetInfo, slot: string, callback: msRest.ServiceCallback<Models.VnetInfo>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param vnetName Name of an existing Virtual Network.
     * @param connectionEnvelope Properties of the Virtual Network connection. See example.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will add or update
     * connections for the production slot.
     * @param options The optional parameters
     * @param callback The callback
     */
    createOrUpdateVnetConnectionSlot(resourceGroupName: string, name: string, vnetName: string, connectionEnvelope: Models.VnetInfo, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.VnetInfo>): void;
    /**
     * Deletes a connection from an app (or deployment slot to a named virtual network.
     * @summary Deletes a connection from an app (or deployment slot to a named virtual network.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param vnetName Name of the virtual network.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will delete the
     * connection for the production slot.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    deleteVnetConnectionSlot(resourceGroupName: string, name: string, vnetName: string, slot: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param vnetName Name of the virtual network.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will delete the
     * connection for the production slot.
     * @param callback The callback
     */
    deleteVnetConnectionSlot(resourceGroupName: string, name: string, vnetName: string, slot: string, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param vnetName Name of the virtual network.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will delete the
     * connection for the production slot.
     * @param options The optional parameters
     * @param callback The callback
     */
    deleteVnetConnectionSlot(resourceGroupName: string, name: string, vnetName: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
    /**
     * Adds a Virtual Network connection to an app or slot (PUT) or updates the connection properties
     * (PATCH).
     * @summary Adds a Virtual Network connection to an app or slot (PUT) or updates the connection
     * properties (PATCH).
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param vnetName Name of an existing Virtual Network.
     * @param connectionEnvelope Properties of the Virtual Network connection. See example.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will add or update
     * connections for the production slot.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsUpdateVnetConnectionSlotResponse>
     */
    updateVnetConnectionSlot(resourceGroupName: string, name: string, vnetName: string, connectionEnvelope: Models.VnetInfo, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsUpdateVnetConnectionSlotResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param vnetName Name of an existing Virtual Network.
     * @param connectionEnvelope Properties of the Virtual Network connection. See example.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will add or update
     * connections for the production slot.
     * @param callback The callback
     */
    updateVnetConnectionSlot(resourceGroupName: string, name: string, vnetName: string, connectionEnvelope: Models.VnetInfo, slot: string, callback: msRest.ServiceCallback<Models.VnetInfo>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param vnetName Name of an existing Virtual Network.
     * @param connectionEnvelope Properties of the Virtual Network connection. See example.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will add or update
     * connections for the production slot.
     * @param options The optional parameters
     * @param callback The callback
     */
    updateVnetConnectionSlot(resourceGroupName: string, name: string, vnetName: string, connectionEnvelope: Models.VnetInfo, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.VnetInfo>): void;
    /**
     * Gets an app's Virtual Network gateway.
     * @summary Gets an app's Virtual Network gateway.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param vnetName Name of the Virtual Network.
     * @param gatewayName Name of the gateway. Currently, the only supported string is "primary".
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get a gateway
     * for the production slot's Virtual Network.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsGetVnetConnectionGatewaySlotResponse>
     */
    getVnetConnectionGatewaySlot(resourceGroupName: string, name: string, vnetName: string, gatewayName: string, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsGetVnetConnectionGatewaySlotResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param vnetName Name of the Virtual Network.
     * @param gatewayName Name of the gateway. Currently, the only supported string is "primary".
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get a gateway
     * for the production slot's Virtual Network.
     * @param callback The callback
     */
    getVnetConnectionGatewaySlot(resourceGroupName: string, name: string, vnetName: string, gatewayName: string, slot: string, callback: msRest.ServiceCallback<Models.VnetGateway>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param vnetName Name of the Virtual Network.
     * @param gatewayName Name of the gateway. Currently, the only supported string is "primary".
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get a gateway
     * for the production slot's Virtual Network.
     * @param options The optional parameters
     * @param callback The callback
     */
    getVnetConnectionGatewaySlot(resourceGroupName: string, name: string, vnetName: string, gatewayName: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.VnetGateway>): void;
    /**
     * Adds a gateway to a connected Virtual Network (PUT) or updates it (PATCH).
     * @summary Adds a gateway to a connected Virtual Network (PUT) or updates it (PATCH).
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param vnetName Name of the Virtual Network.
     * @param gatewayName Name of the gateway. Currently, the only supported string is "primary".
     * @param connectionEnvelope The properties to update this gateway with.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will add or update
     * a gateway for the production slot's Virtual Network.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsCreateOrUpdateVnetConnectionGatewaySlotResponse>
     */
    createOrUpdateVnetConnectionGatewaySlot(resourceGroupName: string, name: string, vnetName: string, gatewayName: string, connectionEnvelope: Models.VnetGateway, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsCreateOrUpdateVnetConnectionGatewaySlotResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param vnetName Name of the Virtual Network.
     * @param gatewayName Name of the gateway. Currently, the only supported string is "primary".
     * @param connectionEnvelope The properties to update this gateway with.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will add or update
     * a gateway for the production slot's Virtual Network.
     * @param callback The callback
     */
    createOrUpdateVnetConnectionGatewaySlot(resourceGroupName: string, name: string, vnetName: string, gatewayName: string, connectionEnvelope: Models.VnetGateway, slot: string, callback: msRest.ServiceCallback<Models.VnetGateway>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param vnetName Name of the Virtual Network.
     * @param gatewayName Name of the gateway. Currently, the only supported string is "primary".
     * @param connectionEnvelope The properties to update this gateway with.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will add or update
     * a gateway for the production slot's Virtual Network.
     * @param options The optional parameters
     * @param callback The callback
     */
    createOrUpdateVnetConnectionGatewaySlot(resourceGroupName: string, name: string, vnetName: string, gatewayName: string, connectionEnvelope: Models.VnetGateway, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.VnetGateway>): void;
    /**
     * Adds a gateway to a connected Virtual Network (PUT) or updates it (PATCH).
     * @summary Adds a gateway to a connected Virtual Network (PUT) or updates it (PATCH).
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param vnetName Name of the Virtual Network.
     * @param gatewayName Name of the gateway. Currently, the only supported string is "primary".
     * @param connectionEnvelope The properties to update this gateway with.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will add or update
     * a gateway for the production slot's Virtual Network.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsUpdateVnetConnectionGatewaySlotResponse>
     */
    updateVnetConnectionGatewaySlot(resourceGroupName: string, name: string, vnetName: string, gatewayName: string, connectionEnvelope: Models.VnetGateway, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsUpdateVnetConnectionGatewaySlotResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param vnetName Name of the Virtual Network.
     * @param gatewayName Name of the gateway. Currently, the only supported string is "primary".
     * @param connectionEnvelope The properties to update this gateway with.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will add or update
     * a gateway for the production slot's Virtual Network.
     * @param callback The callback
     */
    updateVnetConnectionGatewaySlot(resourceGroupName: string, name: string, vnetName: string, gatewayName: string, connectionEnvelope: Models.VnetGateway, slot: string, callback: msRest.ServiceCallback<Models.VnetGateway>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param vnetName Name of the Virtual Network.
     * @param gatewayName Name of the gateway. Currently, the only supported string is "primary".
     * @param connectionEnvelope The properties to update this gateway with.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will add or update
     * a gateway for the production slot's Virtual Network.
     * @param options The optional parameters
     * @param callback The callback
     */
    updateVnetConnectionGatewaySlot(resourceGroupName: string, name: string, vnetName: string, gatewayName: string, connectionEnvelope: Models.VnetGateway, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.VnetGateway>): void;
    /**
     * List webjobs for an app, or a deployment slot.
     * @summary List webjobs for an app, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments
     * for the production slot.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsListWebJobsSlotResponse>
     */
    listWebJobsSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListWebJobsSlotResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments
     * for the production slot.
     * @param callback The callback
     */
    listWebJobsSlot(resourceGroupName: string, name: string, slot: string, callback: msRest.ServiceCallback<Models.WebJobCollection>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments
     * for the production slot.
     * @param options The optional parameters
     * @param callback The callback
     */
    listWebJobsSlot(resourceGroupName: string, name: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.WebJobCollection>): void;
    /**
     * Get webjob information for an app, or a deployment slot.
     * @summary Get webjob information for an app, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param webJobName Name of the web job.
     * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments
     * for the production slot.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsGetWebJobSlotResponse>
     */
    getWebJobSlot(resourceGroupName: string, name: string, webJobName: string, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsGetWebJobSlotResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param webJobName Name of the web job.
     * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments
     * for the production slot.
     * @param callback The callback
     */
    getWebJobSlot(resourceGroupName: string, name: string, webJobName: string, slot: string, callback: msRest.ServiceCallback<Models.WebJob>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param webJobName Name of the web job.
     * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments
     * for the production slot.
     * @param options The optional parameters
     * @param callback The callback
     */
    getWebJobSlot(resourceGroupName: string, name: string, webJobName: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.WebJob>): void;
    /**
     * Get the difference in configuration settings between two web app slots.
     * @summary Get the difference in configuration settings between two web app slots.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slotSwapEntity JSON object that contains the target slot name. See example.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsListSlotDifferencesFromProductionResponse>
     */
    listSlotDifferencesFromProduction(resourceGroupName: string, name: string, slotSwapEntity: Models.CsmSlotEntity, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListSlotDifferencesFromProductionResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slotSwapEntity JSON object that contains the target slot name. See example.
     * @param callback The callback
     */
    listSlotDifferencesFromProduction(resourceGroupName: string, name: string, slotSwapEntity: Models.CsmSlotEntity, callback: msRest.ServiceCallback<Models.SlotDifferenceCollection>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slotSwapEntity JSON object that contains the target slot name. See example.
     * @param options The optional parameters
     * @param callback The callback
     */
    listSlotDifferencesFromProduction(resourceGroupName: string, name: string, slotSwapEntity: Models.CsmSlotEntity, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SlotDifferenceCollection>): void;
    /**
     * Swaps two deployment slots of an app.
     * @summary Swaps two deployment slots of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slotSwapEntity JSON object that contains the target slot name. See example.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    swapSlotWithProduction(resourceGroupName: string, name: string, slotSwapEntity: Models.CsmSlotEntity, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * Returns all Snapshots to the user.
     * @summary Returns all Snapshots to the user.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Website Name.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsListSnapshotsResponse>
     */
    listSnapshots(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListSnapshotsResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Website Name.
     * @param callback The callback
     */
    listSnapshots(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<Models.SnapshotCollection>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Website Name.
     * @param options The optional parameters
     * @param callback The callback
     */
    listSnapshots(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SnapshotCollection>): void;
    /**
     * Returns all Snapshots to the user from DRSecondary endpoint.
     * @summary Returns all Snapshots to the user from DRSecondary endpoint.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Website Name.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsListSnapshotsFromDRSecondaryResponse>
     */
    listSnapshotsFromDRSecondary(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListSnapshotsFromDRSecondaryResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Website Name.
     * @param callback The callback
     */
    listSnapshotsFromDRSecondary(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<Models.SnapshotCollection>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Website Name.
     * @param options The optional parameters
     * @param callback The callback
     */
    listSnapshotsFromDRSecondary(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SnapshotCollection>): void;
    /**
     * Gets the source control configuration of an app.
     * @summary Gets the source control configuration of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsGetSourceControlResponse>
     */
    getSourceControl(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsGetSourceControlResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param callback The callback
     */
    getSourceControl(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<Models.SiteSourceControl>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param options The optional parameters
     * @param callback The callback
     */
    getSourceControl(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SiteSourceControl>): void;
    /**
     * Updates the source control configuration of an app.
     * @summary Updates the source control configuration of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param siteSourceControl JSON representation of a SiteSourceControl object. See example.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsCreateOrUpdateSourceControlResponse>
     */
    createOrUpdateSourceControl(resourceGroupName: string, name: string, siteSourceControl: Models.SiteSourceControl, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsCreateOrUpdateSourceControlResponse>;
    /**
     * Deletes the source control configuration of an app.
     * @summary Deletes the source control configuration of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    deleteSourceControl(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param callback The callback
     */
    deleteSourceControl(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param options The optional parameters
     * @param callback The callback
     */
    deleteSourceControl(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
    /**
     * Updates the source control configuration of an app.
     * @summary Updates the source control configuration of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param siteSourceControl JSON representation of a SiteSourceControl object. See example.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsUpdateSourceControlResponse>
     */
    updateSourceControl(resourceGroupName: string, name: string, siteSourceControl: Models.SiteSourceControl, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsUpdateSourceControlResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param siteSourceControl JSON representation of a SiteSourceControl object. See example.
     * @param callback The callback
     */
    updateSourceControl(resourceGroupName: string, name: string, siteSourceControl: Models.SiteSourceControl, callback: msRest.ServiceCallback<Models.SiteSourceControl>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param siteSourceControl JSON representation of a SiteSourceControl object. See example.
     * @param options The optional parameters
     * @param callback The callback
     */
    updateSourceControl(resourceGroupName: string, name: string, siteSourceControl: Models.SiteSourceControl, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SiteSourceControl>): void;
    /**
     * Starts an app (or deployment slot, if specified).
     * @summary Starts an app (or deployment slot, if specified).
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    start(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param callback The callback
     */
    start(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param options The optional parameters
     * @param callback The callback
     */
    start(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
    /**
     * Start capturing network packets for the site.
     * @summary Start capturing network packets for the site.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name The name of the web app.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsStartNetworkTraceResponse>
     */
    startNetworkTrace(resourceGroupName: string, name: string, options?: Models.WebAppsStartNetworkTraceOptionalParams): Promise<Models.WebAppsStartNetworkTraceResponse>;
    /**
     * Stops an app (or deployment slot, if specified).
     * @summary Stops an app (or deployment slot, if specified).
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    stop(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param callback The callback
     */
    stop(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param options The optional parameters
     * @param callback The callback
     */
    stop(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
    /**
     * Stop ongoing capturing network packets for the site.
     * @summary Stop ongoing capturing network packets for the site.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name The name of the web app.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    stopNetworkTrace(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name The name of the web app.
     * @param callback The callback
     */
    stopNetworkTrace(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name The name of the web app.
     * @param options The optional parameters
     * @param callback The callback
     */
    stopNetworkTrace(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
    /**
     * Sync web app repository.
     * @summary Sync web app repository.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of web app.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    syncRepository(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of web app.
     * @param callback The callback
     */
    syncRepository(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of web app.
     * @param options The optional parameters
     * @param callback The callback
     */
    syncRepository(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
    /**
     * Syncs function trigger metadata to the scale controller
     * @summary Syncs function trigger metadata to the scale controller
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    syncFunctionTriggers(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param callback The callback
     */
    syncFunctionTriggers(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param options The optional parameters
     * @param callback The callback
     */
    syncFunctionTriggers(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
    /**
     * List triggered web jobs for an app, or a deployment slot.
     * @summary List triggered web jobs for an app, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsListTriggeredWebJobsResponse>
     */
    listTriggeredWebJobs(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListTriggeredWebJobsResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param callback The callback
     */
    listTriggeredWebJobs(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<Models.TriggeredWebJobCollection>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param options The optional parameters
     * @param callback The callback
     */
    listTriggeredWebJobs(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.TriggeredWebJobCollection>): void;
    /**
     * Gets a triggered web job by its ID for an app, or a deployment slot.
     * @summary Gets a triggered web job by its ID for an app, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param webJobName Name of Web Job.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsGetTriggeredWebJobResponse>
     */
    getTriggeredWebJob(resourceGroupName: string, name: string, webJobName: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsGetTriggeredWebJobResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param webJobName Name of Web Job.
     * @param callback The callback
     */
    getTriggeredWebJob(resourceGroupName: string, name: string, webJobName: string, callback: msRest.ServiceCallback<Models.TriggeredWebJob>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param webJobName Name of Web Job.
     * @param options The optional parameters
     * @param callback The callback
     */
    getTriggeredWebJob(resourceGroupName: string, name: string, webJobName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.TriggeredWebJob>): void;
    /**
     * Delete a triggered web job by its ID for an app, or a deployment slot.
     * @summary Delete a triggered web job by its ID for an app, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param webJobName Name of Web Job.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    deleteTriggeredWebJob(resourceGroupName: string, name: string, webJobName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param webJobName Name of Web Job.
     * @param callback The callback
     */
    deleteTriggeredWebJob(resourceGroupName: string, name: string, webJobName: string, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param webJobName Name of Web Job.
     * @param options The optional parameters
     * @param callback The callback
     */
    deleteTriggeredWebJob(resourceGroupName: string, name: string, webJobName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
    /**
     * List a triggered web job's history for an app, or a deployment slot.
     * @summary List a triggered web job's history for an app, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param webJobName Name of Web Job.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsListTriggeredWebJobHistoryResponse>
     */
    listTriggeredWebJobHistory(resourceGroupName: string, name: string, webJobName: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListTriggeredWebJobHistoryResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param webJobName Name of Web Job.
     * @param callback The callback
     */
    listTriggeredWebJobHistory(resourceGroupName: string, name: string, webJobName: string, callback: msRest.ServiceCallback<Models.TriggeredJobHistoryCollection>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param webJobName Name of Web Job.
     * @param options The optional parameters
     * @param callback The callback
     */
    listTriggeredWebJobHistory(resourceGroupName: string, name: string, webJobName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.TriggeredJobHistoryCollection>): void;
    /**
     * Gets a triggered web job's history by its ID for an app, , or a deployment slot.
     * @summary Gets a triggered web job's history by its ID for an app, , or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param webJobName Name of Web Job.
     * @param id History ID.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsGetTriggeredWebJobHistoryResponse>
     */
    getTriggeredWebJobHistory(resourceGroupName: string, name: string, webJobName: string, id: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsGetTriggeredWebJobHistoryResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param webJobName Name of Web Job.
     * @param id History ID.
     * @param callback The callback
     */
    getTriggeredWebJobHistory(resourceGroupName: string, name: string, webJobName: string, id: string, callback: msRest.ServiceCallback<Models.TriggeredJobHistory>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param webJobName Name of Web Job.
     * @param id History ID.
     * @param options The optional parameters
     * @param callback The callback
     */
    getTriggeredWebJobHistory(resourceGroupName: string, name: string, webJobName: string, id: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.TriggeredJobHistory>): void;
    /**
     * Run a triggered web job for an app, or a deployment slot.
     * @summary Run a triggered web job for an app, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param webJobName Name of Web Job.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    runTriggeredWebJob(resourceGroupName: string, name: string, webJobName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param webJobName Name of Web Job.
     * @param callback The callback
     */
    runTriggeredWebJob(resourceGroupName: string, name: string, webJobName: string, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param webJobName Name of Web Job.
     * @param options The optional parameters
     * @param callback The callback
     */
    runTriggeredWebJob(resourceGroupName: string, name: string, webJobName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
    /**
     * Gets the quota usage information of an app (or deployment slot, if specified).
     * @summary Gets the quota usage information of an app (or deployment slot, if specified).
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsListUsagesResponse>
     */
    listUsages(resourceGroupName: string, name: string, options?: Models.WebAppsListUsagesOptionalParams): Promise<Models.WebAppsListUsagesResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param callback The callback
     */
    listUsages(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<Models.CsmUsageQuotaCollection>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param options The optional parameters
     * @param callback The callback
     */
    listUsages(resourceGroupName: string, name: string, options: Models.WebAppsListUsagesOptionalParams, callback: msRest.ServiceCallback<Models.CsmUsageQuotaCollection>): void;
    /**
     * Gets the virtual networks the app (or deployment slot) is connected to.
     * @summary Gets the virtual networks the app (or deployment slot) is connected to.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsListVnetConnectionsResponse>
     */
    listVnetConnections(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListVnetConnectionsResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param callback The callback
     */
    listVnetConnections(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<Models.VnetInfo[]>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param options The optional parameters
     * @param callback The callback
     */
    listVnetConnections(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.VnetInfo[]>): void;
    /**
     * Gets a virtual network the app (or deployment slot) is connected to by name.
     * @summary Gets a virtual network the app (or deployment slot) is connected to by name.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param vnetName Name of the virtual network.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsGetVnetConnectionResponse>
     */
    getVnetConnection(resourceGroupName: string, name: string, vnetName: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsGetVnetConnectionResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param vnetName Name of the virtual network.
     * @param callback The callback
     */
    getVnetConnection(resourceGroupName: string, name: string, vnetName: string, callback: msRest.ServiceCallback<Models.VnetInfo>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param vnetName Name of the virtual network.
     * @param options The optional parameters
     * @param callback The callback
     */
    getVnetConnection(resourceGroupName: string, name: string, vnetName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.VnetInfo>): void;
    /**
     * Adds a Virtual Network connection to an app or slot (PUT) or updates the connection properties
     * (PATCH).
     * @summary Adds a Virtual Network connection to an app or slot (PUT) or updates the connection
     * properties (PATCH).
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param vnetName Name of an existing Virtual Network.
     * @param connectionEnvelope Properties of the Virtual Network connection. See example.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsCreateOrUpdateVnetConnectionResponse>
     */
    createOrUpdateVnetConnection(resourceGroupName: string, name: string, vnetName: string, connectionEnvelope: Models.VnetInfo, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsCreateOrUpdateVnetConnectionResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param vnetName Name of an existing Virtual Network.
     * @param connectionEnvelope Properties of the Virtual Network connection. See example.
     * @param callback The callback
     */
    createOrUpdateVnetConnection(resourceGroupName: string, name: string, vnetName: string, connectionEnvelope: Models.VnetInfo, callback: msRest.ServiceCallback<Models.VnetInfo>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param vnetName Name of an existing Virtual Network.
     * @param connectionEnvelope Properties of the Virtual Network connection. See example.
     * @param options The optional parameters
     * @param callback The callback
     */
    createOrUpdateVnetConnection(resourceGroupName: string, name: string, vnetName: string, connectionEnvelope: Models.VnetInfo, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.VnetInfo>): void;
    /**
     * Deletes a connection from an app (or deployment slot to a named virtual network.
     * @summary Deletes a connection from an app (or deployment slot to a named virtual network.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param vnetName Name of the virtual network.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    deleteVnetConnection(resourceGroupName: string, name: string, vnetName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param vnetName Name of the virtual network.
     * @param callback The callback
     */
    deleteVnetConnection(resourceGroupName: string, name: string, vnetName: string, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param vnetName Name of the virtual network.
     * @param options The optional parameters
     * @param callback The callback
     */
    deleteVnetConnection(resourceGroupName: string, name: string, vnetName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
    /**
     * Adds a Virtual Network connection to an app or slot (PUT) or updates the connection properties
     * (PATCH).
     * @summary Adds a Virtual Network connection to an app or slot (PUT) or updates the connection
     * properties (PATCH).
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param vnetName Name of an existing Virtual Network.
     * @param connectionEnvelope Properties of the Virtual Network connection. See example.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsUpdateVnetConnectionResponse>
     */
    updateVnetConnection(resourceGroupName: string, name: string, vnetName: string, connectionEnvelope: Models.VnetInfo, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsUpdateVnetConnectionResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param vnetName Name of an existing Virtual Network.
     * @param connectionEnvelope Properties of the Virtual Network connection. See example.
     * @param callback The callback
     */
    updateVnetConnection(resourceGroupName: string, name: string, vnetName: string, connectionEnvelope: Models.VnetInfo, callback: msRest.ServiceCallback<Models.VnetInfo>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param vnetName Name of an existing Virtual Network.
     * @param connectionEnvelope Properties of the Virtual Network connection. See example.
     * @param options The optional parameters
     * @param callback The callback
     */
    updateVnetConnection(resourceGroupName: string, name: string, vnetName: string, connectionEnvelope: Models.VnetInfo, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.VnetInfo>): void;
    /**
     * Gets an app's Virtual Network gateway.
     * @summary Gets an app's Virtual Network gateway.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param vnetName Name of the Virtual Network.
     * @param gatewayName Name of the gateway. Currently, the only supported string is "primary".
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsGetVnetConnectionGatewayResponse>
     */
    getVnetConnectionGateway(resourceGroupName: string, name: string, vnetName: string, gatewayName: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsGetVnetConnectionGatewayResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param vnetName Name of the Virtual Network.
     * @param gatewayName Name of the gateway. Currently, the only supported string is "primary".
     * @param callback The callback
     */
    getVnetConnectionGateway(resourceGroupName: string, name: string, vnetName: string, gatewayName: string, callback: msRest.ServiceCallback<Models.VnetGateway>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param vnetName Name of the Virtual Network.
     * @param gatewayName Name of the gateway. Currently, the only supported string is "primary".
     * @param options The optional parameters
     * @param callback The callback
     */
    getVnetConnectionGateway(resourceGroupName: string, name: string, vnetName: string, gatewayName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.VnetGateway>): void;
    /**
     * Adds a gateway to a connected Virtual Network (PUT) or updates it (PATCH).
     * @summary Adds a gateway to a connected Virtual Network (PUT) or updates it (PATCH).
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param vnetName Name of the Virtual Network.
     * @param gatewayName Name of the gateway. Currently, the only supported string is "primary".
     * @param connectionEnvelope The properties to update this gateway with.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsCreateOrUpdateVnetConnectionGatewayResponse>
     */
    createOrUpdateVnetConnectionGateway(resourceGroupName: string, name: string, vnetName: string, gatewayName: string, connectionEnvelope: Models.VnetGateway, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsCreateOrUpdateVnetConnectionGatewayResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param vnetName Name of the Virtual Network.
     * @param gatewayName Name of the gateway. Currently, the only supported string is "primary".
     * @param connectionEnvelope The properties to update this gateway with.
     * @param callback The callback
     */
    createOrUpdateVnetConnectionGateway(resourceGroupName: string, name: string, vnetName: string, gatewayName: string, connectionEnvelope: Models.VnetGateway, callback: msRest.ServiceCallback<Models.VnetGateway>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param vnetName Name of the Virtual Network.
     * @param gatewayName Name of the gateway. Currently, the only supported string is "primary".
     * @param connectionEnvelope The properties to update this gateway with.
     * @param options The optional parameters
     * @param callback The callback
     */
    createOrUpdateVnetConnectionGateway(resourceGroupName: string, name: string, vnetName: string, gatewayName: string, connectionEnvelope: Models.VnetGateway, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.VnetGateway>): void;
    /**
     * Adds a gateway to a connected Virtual Network (PUT) or updates it (PATCH).
     * @summary Adds a gateway to a connected Virtual Network (PUT) or updates it (PATCH).
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param vnetName Name of the Virtual Network.
     * @param gatewayName Name of the gateway. Currently, the only supported string is "primary".
     * @param connectionEnvelope The properties to update this gateway with.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsUpdateVnetConnectionGatewayResponse>
     */
    updateVnetConnectionGateway(resourceGroupName: string, name: string, vnetName: string, gatewayName: string, connectionEnvelope: Models.VnetGateway, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsUpdateVnetConnectionGatewayResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param vnetName Name of the Virtual Network.
     * @param gatewayName Name of the gateway. Currently, the only supported string is "primary".
     * @param connectionEnvelope The properties to update this gateway with.
     * @param callback The callback
     */
    updateVnetConnectionGateway(resourceGroupName: string, name: string, vnetName: string, gatewayName: string, connectionEnvelope: Models.VnetGateway, callback: msRest.ServiceCallback<Models.VnetGateway>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param vnetName Name of the Virtual Network.
     * @param gatewayName Name of the gateway. Currently, the only supported string is "primary".
     * @param connectionEnvelope The properties to update this gateway with.
     * @param options The optional parameters
     * @param callback The callback
     */
    updateVnetConnectionGateway(resourceGroupName: string, name: string, vnetName: string, gatewayName: string, connectionEnvelope: Models.VnetGateway, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.VnetGateway>): void;
    /**
     * List webjobs for an app, or a deployment slot.
     * @summary List webjobs for an app, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsListWebJobsResponse>
     */
    listWebJobs(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListWebJobsResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param callback The callback
     */
    listWebJobs(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<Models.WebJobCollection>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param options The optional parameters
     * @param callback The callback
     */
    listWebJobs(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.WebJobCollection>): void;
    /**
     * Get webjob information for an app, or a deployment slot.
     * @summary Get webjob information for an app, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param webJobName Name of the web job.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsGetWebJobResponse>
     */
    getWebJob(resourceGroupName: string, name: string, webJobName: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsGetWebJobResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param webJobName Name of the web job.
     * @param callback The callback
     */
    getWebJob(resourceGroupName: string, name: string, webJobName: string, callback: msRest.ServiceCallback<Models.WebJob>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param webJobName Name of the web job.
     * @param options The optional parameters
     * @param callback The callback
     */
    getWebJob(resourceGroupName: string, name: string, webJobName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.WebJob>): void;
    /**
     * Creates a new web, mobile, or API app in an existing resource group, or updates an existing app.
     * @summary Creates a new web, mobile, or API app in an existing resource group, or updates an
     * existing app.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Unique name of the app to create or update. To create or update a deployment slot,
     * use the {slot} parameter.
     * @param siteEnvelope A JSON representation of the app properties. See example.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    beginCreateOrUpdate(resourceGroupName: string, name: string, siteEnvelope: Models.Site, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller>;
    /**
     * Restores a specific backup to another app (or deployment slot, if specified).
     * @summary Restores a specific backup to another app (or deployment slot, if specified).
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param backupId ID of the backup.
     * @param request Information on restore request .
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    beginRestore(resourceGroupName: string, name: string, backupId: string, request: Models.RestoreRequest, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller>;
    /**
     * Gets the Git/FTP publishing credentials of an app.
     * @summary Gets the Git/FTP publishing credentials of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    beginListPublishingCredentials(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller>;
    /**
     * Invoke the MSDeploy web app extension.
     * @summary Invoke the MSDeploy web app extension.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of web app.
     * @param mSDeploy Details of MSDeploy operation
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    beginCreateMSDeployOperation(resourceGroupName: string, name: string, mSDeploy: Models.MSDeploy, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller>;
    /**
     * Create function for web site, or a deployment slot.
     * @summary Create function for web site, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param functionName Function name.
     * @param functionEnvelope Function details.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    beginCreateFunction(resourceGroupName: string, name: string, functionName: string, functionEnvelope: Models.FunctionEnvelope, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller>;
    /**
     * Invoke the MSDeploy web app extension.
     * @summary Invoke the MSDeploy web app extension.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of web app.
     * @param instanceId ID of web app instance.
     * @param mSDeploy Details of MSDeploy operation
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    beginCreateInstanceMSDeployOperation(resourceGroupName: string, name: string, instanceId: string, mSDeploy: Models.MSDeploy, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller>;
    /**
     * Restores a web app.
     * @summary Restores a web app.
     * @param subscriptionName Azure subscription.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of web app.
     * @param migrationOptions Migration migrationOptions.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    beginMigrateStorage(subscriptionName: string, resourceGroupName: string, name: string, migrationOptions: Models.StorageMigrationOptions, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller>;
    /**
     * Migrates a local (in-app) MySql database to a remote MySql database.
     * @summary Migrates a local (in-app) MySql database to a remote MySql database.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of web app.
     * @param migrationRequestEnvelope MySql migration options.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    beginMigrateMySql(resourceGroupName: string, name: string, migrationRequestEnvelope: Models.MigrateMySqlRequest, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller>;
    /**
     * Start capturing network packets for the site.
     * @summary Start capturing network packets for the site.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name The name of the web app.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    beginStartWebSiteNetworkTraceOperation(resourceGroupName: string, name: string, options?: Models.WebAppsBeginStartWebSiteNetworkTraceOperationOptionalParams): Promise<msRestAzure.LROPoller>;
    /**
     * Restores an app from a backup blob in Azure Storage.
     * @summary Restores an app from a backup blob in Azure Storage.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param request Information on restore request .
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    beginRestoreFromBackupBlob(resourceGroupName: string, name: string, request: Models.RestoreRequest, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller>;
    /**
     * Restores a deleted web app to this web app.
     * @summary Restores a deleted web app to this web app.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of web app.
     * @param restoreRequest Deleted web app restore information.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    beginRestoreFromDeletedApp(resourceGroupName: string, name: string, restoreRequest: Models.DeletedAppRestoreRequest, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller>;
    /**
     * Restores a web app from a snapshot.
     * @summary Restores a web app from a snapshot.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of web app.
     * @param restoreRequest Snapshot restore settings. Snapshot information can be obtained by calling
     * GetDeletedSites or GetSiteSnapshots API.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    beginRestoreSnapshot(resourceGroupName: string, name: string, restoreRequest: Models.SnapshotRestoreRequest, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller>;
    /**
     * Install site extension on a web site, or a deployment slot.
     * @summary Install site extension on a web site, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param siteExtensionId Site extension name.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    beginInstallSiteExtension(resourceGroupName: string, name: string, siteExtensionId: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller>;
    /**
     * Creates a new web, mobile, or API app in an existing resource group, or updates an existing app.
     * @summary Creates a new web, mobile, or API app in an existing resource group, or updates an
     * existing app.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Unique name of the app to create or update. To create or update a deployment slot,
     * use the {slot} parameter.
     * @param siteEnvelope A JSON representation of the app properties. See example.
     * @param slot Name of the deployment slot to create or update. By default, this API attempts to
     * create or modify the production slot.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    beginCreateOrUpdateSlot(resourceGroupName: string, name: string, siteEnvelope: Models.Site, slot: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller>;
    /**
     * Restores a specific backup to another app (or deployment slot, if specified).
     * @summary Restores a specific backup to another app (or deployment slot, if specified).
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param backupId ID of the backup.
     * @param request Information on restore request .
     * @param slot Name of the deployment slot. If a slot is not specified, the API will restore a
     * backup of the production slot.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    beginRestoreSlot(resourceGroupName: string, name: string, backupId: string, request: Models.RestoreRequest, slot: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller>;
    /**
     * Gets the Git/FTP publishing credentials of an app.
     * @summary Gets the Git/FTP publishing credentials of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get the
     * publishing credentials for the production slot.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    beginListPublishingCredentialsSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller>;
    /**
     * Invoke the MSDeploy web app extension.
     * @summary Invoke the MSDeploy web app extension.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param mSDeploy Details of MSDeploy operation
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    beginCreateMSDeployOperationSlot(resourceGroupName: string, name: string, slot: string, mSDeploy: Models.MSDeploy, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller>;
    /**
     * Create function for web site, or a deployment slot.
     * @summary Create function for web site, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param functionName Function name.
     * @param slot Name of the deployment slot. If a slot is not specified, the API deletes a
     * deployment for the production slot.
     * @param functionEnvelope Function details.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    beginCreateInstanceFunctionSlot(resourceGroupName: string, name: string, functionName: string, slot: string, functionEnvelope: Models.FunctionEnvelope, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller>;
    /**
     * Invoke the MSDeploy web app extension.
     * @summary Invoke the MSDeploy web app extension.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param instanceId ID of web app instance.
     * @param mSDeploy Details of MSDeploy operation
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    beginCreateInstanceMSDeployOperationSlot(resourceGroupName: string, name: string, slot: string, instanceId: string, mSDeploy: Models.MSDeploy, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller>;
    /**
     * Start capturing network packets for the site.
     * @summary Start capturing network packets for the site.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name The name of the web app.
     * @param slot The name of the slot for this web app.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    beginStartWebSiteNetworkTraceOperationSlot(resourceGroupName: string, name: string, slot: string, options?: Models.WebAppsBeginStartWebSiteNetworkTraceOperationSlotOptionalParams): Promise<msRestAzure.LROPoller>;
    /**
     * Restores an app from a backup blob in Azure Storage.
     * @summary Restores an app from a backup blob in Azure Storage.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param request Information on restore request .
     * @param slot Name of the deployment slot. If a slot is not specified, the API will restore a
     * backup of the production slot.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    beginRestoreFromBackupBlobSlot(resourceGroupName: string, name: string, request: Models.RestoreRequest, slot: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller>;
    /**
     * Restores a deleted web app to this web app.
     * @summary Restores a deleted web app to this web app.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of web app.
     * @param restoreRequest Deleted web app restore information.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    beginRestoreFromDeletedAppSlot(resourceGroupName: string, name: string, restoreRequest: Models.DeletedAppRestoreRequest, slot: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller>;
    /**
     * Restores a web app from a snapshot.
     * @summary Restores a web app from a snapshot.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of web app.
     * @param restoreRequest Snapshot restore settings. Snapshot information can be obtained by calling
     * GetDeletedSites or GetSiteSnapshots API.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    beginRestoreSnapshotSlot(resourceGroupName: string, name: string, restoreRequest: Models.SnapshotRestoreRequest, slot: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller>;
    /**
     * Install site extension on a web site, or a deployment slot.
     * @summary Install site extension on a web site, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param siteExtensionId Site extension name.
     * @param slot Name of the deployment slot. If a slot is not specified, the API deletes a
     * deployment for the production slot.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    beginInstallSiteExtensionSlot(resourceGroupName: string, name: string, siteExtensionId: string, slot: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller>;
    /**
     * Swaps two deployment slots of an app.
     * @summary Swaps two deployment slots of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slotSwapEntity JSON object that contains the target slot name. See example.
     * @param slot Name of the source slot. If a slot is not specified, the production slot is used as
     * the source slot.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    beginSwapSlotSlot(resourceGroupName: string, name: string, slotSwapEntity: Models.CsmSlotEntity, slot: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller>;
    /**
     * Updates the source control configuration of an app.
     * @summary Updates the source control configuration of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param siteSourceControl JSON representation of a SiteSourceControl object. See example.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will update the
     * source control configuration for the production slot.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    beginCreateOrUpdateSourceControlSlot(resourceGroupName: string, name: string, siteSourceControl: Models.SiteSourceControl, slot: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller>;
    /**
     * Start capturing network packets for the site.
     * @summary Start capturing network packets for the site.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name The name of the web app.
     * @param slot The name of the slot for this web app.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    beginStartNetworkTraceSlot(resourceGroupName: string, name: string, slot: string, options?: Models.WebAppsBeginStartNetworkTraceSlotOptionalParams): Promise<msRestAzure.LROPoller>;
    /**
     * Swaps two deployment slots of an app.
     * @summary Swaps two deployment slots of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slotSwapEntity JSON object that contains the target slot name. See example.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    beginSwapSlotWithProduction(resourceGroupName: string, name: string, slotSwapEntity: Models.CsmSlotEntity, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller>;
    /**
     * Updates the source control configuration of an app.
     * @summary Updates the source control configuration of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param siteSourceControl JSON representation of a SiteSourceControl object. See example.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    beginCreateOrUpdateSourceControl(resourceGroupName: string, name: string, siteSourceControl: Models.SiteSourceControl, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller>;
    /**
     * Start capturing network packets for the site.
     * @summary Start capturing network packets for the site.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name The name of the web app.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    beginStartNetworkTrace(resourceGroupName: string, name: string, options?: Models.WebAppsBeginStartNetworkTraceOptionalParams): Promise<msRestAzure.LROPoller>;
    /**
     * Get all apps for a subscription.
     * @summary Get all apps for a subscription.
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsListNextResponse>
     */
    listNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListNextResponse>;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param callback The callback
     */
    listNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.WebAppCollection>): void;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param options The optional parameters
     * @param callback The callback
     */
    listNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.WebAppCollection>): void;
    /**
     * Gets all web, mobile, and API apps in the specified resource group.
     * @summary Gets all web, mobile, and API apps in the specified resource group.
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsListByResourceGroupNextResponse>
     */
    listByResourceGroupNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListByResourceGroupNextResponse>;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param callback The callback
     */
    listByResourceGroupNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.WebAppCollection>): void;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param options The optional parameters
     * @param callback The callback
     */
    listByResourceGroupNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.WebAppCollection>): void;
    /**
     * Gets existing backups of an app.
     * @summary Gets existing backups of an app.
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsListBackupsNextResponse>
     */
    listBackupsNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListBackupsNextResponse>;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param callback The callback
     */
    listBackupsNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.BackupItemCollection>): void;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param options The optional parameters
     * @param callback The callback
     */
    listBackupsNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.BackupItemCollection>): void;
    /**
     * List the configurations of an app
     * @summary List the configurations of an app
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsListConfigurationsNextResponse>
     */
    listConfigurationsNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListConfigurationsNextResponse>;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param callback The callback
     */
    listConfigurationsNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.SiteConfigResourceCollection>): void;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param options The optional parameters
     * @param callback The callback
     */
    listConfigurationsNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SiteConfigResourceCollection>): void;
    /**
     * Gets a list of web app configuration snapshots identifiers. Each element of the list contains a
     * timestamp and the ID of the snapshot.
     * @summary Gets a list of web app configuration snapshots identifiers. Each element of the list
     * contains a timestamp and the ID of the snapshot.
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsListConfigurationSnapshotInfoNextResponse>
     */
    listConfigurationSnapshotInfoNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListConfigurationSnapshotInfoNextResponse>;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param callback The callback
     */
    listConfigurationSnapshotInfoNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.SiteConfigurationSnapshotInfoCollection>): void;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param options The optional parameters
     * @param callback The callback
     */
    listConfigurationSnapshotInfoNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SiteConfigurationSnapshotInfoCollection>): void;
    /**
     * List continuous web jobs for an app, or a deployment slot.
     * @summary List continuous web jobs for an app, or a deployment slot.
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsListContinuousWebJobsNextResponse>
     */
    listContinuousWebJobsNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListContinuousWebJobsNextResponse>;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param callback The callback
     */
    listContinuousWebJobsNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.ContinuousWebJobCollection>): void;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param options The optional parameters
     * @param callback The callback
     */
    listContinuousWebJobsNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ContinuousWebJobCollection>): void;
    /**
     * List deployments for an app, or a deployment slot.
     * @summary List deployments for an app, or a deployment slot.
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsListDeploymentsNextResponse>
     */
    listDeploymentsNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListDeploymentsNextResponse>;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param callback The callback
     */
    listDeploymentsNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.DeploymentCollection>): void;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param options The optional parameters
     * @param callback The callback
     */
    listDeploymentsNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DeploymentCollection>): void;
    /**
     * Lists ownership identifiers for domain associated with web app.
     * @summary Lists ownership identifiers for domain associated with web app.
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsListDomainOwnershipIdentifiersNextResponse>
     */
    listDomainOwnershipIdentifiersNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListDomainOwnershipIdentifiersNextResponse>;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param callback The callback
     */
    listDomainOwnershipIdentifiersNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.IdentifierCollection>): void;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param options The optional parameters
     * @param callback The callback
     */
    listDomainOwnershipIdentifiersNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.IdentifierCollection>): void;
    /**
     * List the functions for a web site, or a deployment slot.
     * @summary List the functions for a web site, or a deployment slot.
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsListFunctionsNextResponse>
     */
    listFunctionsNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListFunctionsNextResponse>;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param callback The callback
     */
    listFunctionsNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.FunctionEnvelopeCollection>): void;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param options The optional parameters
     * @param callback The callback
     */
    listFunctionsNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.FunctionEnvelopeCollection>): void;
    /**
     * Get hostname bindings for an app or a deployment slot.
     * @summary Get hostname bindings for an app or a deployment slot.
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsListHostNameBindingsNextResponse>
     */
    listHostNameBindingsNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListHostNameBindingsNextResponse>;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param callback The callback
     */
    listHostNameBindingsNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.HostNameBindingCollection>): void;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param options The optional parameters
     * @param callback The callback
     */
    listHostNameBindingsNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.HostNameBindingCollection>): void;
    /**
     * Gets all scale-out instances of an app.
     * @summary Gets all scale-out instances of an app.
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsListInstanceIdentifiersNextResponse>
     */
    listInstanceIdentifiersNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListInstanceIdentifiersNextResponse>;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param callback The callback
     */
    listInstanceIdentifiersNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.WebAppInstanceCollection>): void;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param options The optional parameters
     * @param callback The callback
     */
    listInstanceIdentifiersNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.WebAppInstanceCollection>): void;
    /**
     * Get list of processes for a web site, or a deployment slot, or for a specific scaled-out
     * instance in a web site.
     * @summary Get list of processes for a web site, or a deployment slot, or for a specific
     * scaled-out instance in a web site.
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsListInstanceProcessesNextResponse>
     */
    listInstanceProcessesNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListInstanceProcessesNextResponse>;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param callback The callback
     */
    listInstanceProcessesNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.ProcessInfoCollection>): void;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param options The optional parameters
     * @param callback The callback
     */
    listInstanceProcessesNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ProcessInfoCollection>): void;
    /**
     * List module information for a process by its ID for a specific scaled-out instance in a web
     * site.
     * @summary List module information for a process by its ID for a specific scaled-out instance in a
     * web site.
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsListInstanceProcessModulesNextResponse>
     */
    listInstanceProcessModulesNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListInstanceProcessModulesNextResponse>;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param callback The callback
     */
    listInstanceProcessModulesNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.ProcessModuleInfoCollection>): void;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param options The optional parameters
     * @param callback The callback
     */
    listInstanceProcessModulesNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ProcessModuleInfoCollection>): void;
    /**
     * List the threads in a process by its ID for a specific scaled-out instance in a web site.
     * @summary List the threads in a process by its ID for a specific scaled-out instance in a web
     * site.
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsListInstanceProcessThreadsNextResponse>
     */
    listInstanceProcessThreadsNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListInstanceProcessThreadsNextResponse>;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param callback The callback
     */
    listInstanceProcessThreadsNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.ProcessThreadInfoCollection>): void;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param options The optional parameters
     * @param callback The callback
     */
    listInstanceProcessThreadsNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ProcessThreadInfoCollection>): void;
    /**
     * Gets all metric definitions of an app (or deployment slot, if specified).
     * @summary Gets all metric definitions of an app (or deployment slot, if specified).
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsListMetricDefinitionsNextResponse>
     */
    listMetricDefinitionsNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListMetricDefinitionsNextResponse>;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param callback The callback
     */
    listMetricDefinitionsNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.ResourceMetricDefinitionCollection>): void;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param options The optional parameters
     * @param callback The callback
     */
    listMetricDefinitionsNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ResourceMetricDefinitionCollection>): void;
    /**
     * Gets performance metrics of an app (or deployment slot, if specified).
     * @summary Gets performance metrics of an app (or deployment slot, if specified).
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsListMetricsNextResponse>
     */
    listMetricsNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListMetricsNextResponse>;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param callback The callback
     */
    listMetricsNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.ResourceMetricCollection>): void;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param options The optional parameters
     * @param callback The callback
     */
    listMetricsNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ResourceMetricCollection>): void;
    /**
     * Gets perfmon counters for web app.
     * @summary Gets perfmon counters for web app.
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsListPerfMonCountersNextResponse>
     */
    listPerfMonCountersNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListPerfMonCountersNextResponse>;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param callback The callback
     */
    listPerfMonCountersNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.PerfMonCounterCollection>): void;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param options The optional parameters
     * @param callback The callback
     */
    listPerfMonCountersNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PerfMonCounterCollection>): void;
    /**
     * Get list of processes for a web site, or a deployment slot, or for a specific scaled-out
     * instance in a web site.
     * @summary Get list of processes for a web site, or a deployment slot, or for a specific
     * scaled-out instance in a web site.
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsListProcessesNextResponse>
     */
    listProcessesNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListProcessesNextResponse>;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param callback The callback
     */
    listProcessesNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.ProcessInfoCollection>): void;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param options The optional parameters
     * @param callback The callback
     */
    listProcessesNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ProcessInfoCollection>): void;
    /**
     * List module information for a process by its ID for a specific scaled-out instance in a web
     * site.
     * @summary List module information for a process by its ID for a specific scaled-out instance in a
     * web site.
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsListProcessModulesNextResponse>
     */
    listProcessModulesNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListProcessModulesNextResponse>;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param callback The callback
     */
    listProcessModulesNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.ProcessModuleInfoCollection>): void;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param options The optional parameters
     * @param callback The callback
     */
    listProcessModulesNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ProcessModuleInfoCollection>): void;
    /**
     * List the threads in a process by its ID for a specific scaled-out instance in a web site.
     * @summary List the threads in a process by its ID for a specific scaled-out instance in a web
     * site.
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsListProcessThreadsNextResponse>
     */
    listProcessThreadsNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListProcessThreadsNextResponse>;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param callback The callback
     */
    listProcessThreadsNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.ProcessThreadInfoCollection>): void;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param options The optional parameters
     * @param callback The callback
     */
    listProcessThreadsNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ProcessThreadInfoCollection>): void;
    /**
     * Get public certificates for an app or a deployment slot.
     * @summary Get public certificates for an app or a deployment slot.
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsListPublicCertificatesNextResponse>
     */
    listPublicCertificatesNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListPublicCertificatesNextResponse>;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param callback The callback
     */
    listPublicCertificatesNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.PublicCertificateCollection>): void;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param options The optional parameters
     * @param callback The callback
     */
    listPublicCertificatesNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PublicCertificateCollection>): void;
    /**
     * Get list of siteextensions for a web site, or a deployment slot.
     * @summary Get list of siteextensions for a web site, or a deployment slot.
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsListSiteExtensionsNextResponse>
     */
    listSiteExtensionsNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListSiteExtensionsNextResponse>;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param callback The callback
     */
    listSiteExtensionsNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.SiteExtensionInfoCollection>): void;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param options The optional parameters
     * @param callback The callback
     */
    listSiteExtensionsNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SiteExtensionInfoCollection>): void;
    /**
     * Gets an app's deployment slots.
     * @summary Gets an app's deployment slots.
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsListSlotsNextResponse>
     */
    listSlotsNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListSlotsNextResponse>;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param callback The callback
     */
    listSlotsNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.WebAppCollection>): void;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param options The optional parameters
     * @param callback The callback
     */
    listSlotsNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.WebAppCollection>): void;
    /**
     * Gets existing backups of an app.
     * @summary Gets existing backups of an app.
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsListBackupsSlotNextResponse>
     */
    listBackupsSlotNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListBackupsSlotNextResponse>;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param callback The callback
     */
    listBackupsSlotNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.BackupItemCollection>): void;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param options The optional parameters
     * @param callback The callback
     */
    listBackupsSlotNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.BackupItemCollection>): void;
    /**
     * List the configurations of an app
     * @summary List the configurations of an app
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsListConfigurationsSlotNextResponse>
     */
    listConfigurationsSlotNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListConfigurationsSlotNextResponse>;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param callback The callback
     */
    listConfigurationsSlotNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.SiteConfigResourceCollection>): void;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param options The optional parameters
     * @param callback The callback
     */
    listConfigurationsSlotNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SiteConfigResourceCollection>): void;
    /**
     * Gets a list of web app configuration snapshots identifiers. Each element of the list contains a
     * timestamp and the ID of the snapshot.
     * @summary Gets a list of web app configuration snapshots identifiers. Each element of the list
     * contains a timestamp and the ID of the snapshot.
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsListConfigurationSnapshotInfoSlotNextResponse>
     */
    listConfigurationSnapshotInfoSlotNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListConfigurationSnapshotInfoSlotNextResponse>;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param callback The callback
     */
    listConfigurationSnapshotInfoSlotNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.SiteConfigurationSnapshotInfoCollection>): void;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param options The optional parameters
     * @param callback The callback
     */
    listConfigurationSnapshotInfoSlotNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SiteConfigurationSnapshotInfoCollection>): void;
    /**
     * List continuous web jobs for an app, or a deployment slot.
     * @summary List continuous web jobs for an app, or a deployment slot.
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsListContinuousWebJobsSlotNextResponse>
     */
    listContinuousWebJobsSlotNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListContinuousWebJobsSlotNextResponse>;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param callback The callback
     */
    listContinuousWebJobsSlotNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.ContinuousWebJobCollection>): void;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param options The optional parameters
     * @param callback The callback
     */
    listContinuousWebJobsSlotNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ContinuousWebJobCollection>): void;
    /**
     * List deployments for an app, or a deployment slot.
     * @summary List deployments for an app, or a deployment slot.
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsListDeploymentsSlotNextResponse>
     */
    listDeploymentsSlotNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListDeploymentsSlotNextResponse>;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param callback The callback
     */
    listDeploymentsSlotNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.DeploymentCollection>): void;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param options The optional parameters
     * @param callback The callback
     */
    listDeploymentsSlotNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DeploymentCollection>): void;
    /**
     * Lists ownership identifiers for domain associated with web app.
     * @summary Lists ownership identifiers for domain associated with web app.
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsListDomainOwnershipIdentifiersSlotNextResponse>
     */
    listDomainOwnershipIdentifiersSlotNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListDomainOwnershipIdentifiersSlotNextResponse>;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param callback The callback
     */
    listDomainOwnershipIdentifiersSlotNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.IdentifierCollection>): void;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param options The optional parameters
     * @param callback The callback
     */
    listDomainOwnershipIdentifiersSlotNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.IdentifierCollection>): void;
    /**
     * List the functions for a web site, or a deployment slot.
     * @summary List the functions for a web site, or a deployment slot.
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsListInstanceFunctionsSlotNextResponse>
     */
    listInstanceFunctionsSlotNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListInstanceFunctionsSlotNextResponse>;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param callback The callback
     */
    listInstanceFunctionsSlotNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.FunctionEnvelopeCollection>): void;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param options The optional parameters
     * @param callback The callback
     */
    listInstanceFunctionsSlotNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.FunctionEnvelopeCollection>): void;
    /**
     * Get hostname bindings for an app or a deployment slot.
     * @summary Get hostname bindings for an app or a deployment slot.
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsListHostNameBindingsSlotNextResponse>
     */
    listHostNameBindingsSlotNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListHostNameBindingsSlotNextResponse>;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param callback The callback
     */
    listHostNameBindingsSlotNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.HostNameBindingCollection>): void;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param options The optional parameters
     * @param callback The callback
     */
    listHostNameBindingsSlotNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.HostNameBindingCollection>): void;
    /**
     * Gets all scale-out instances of an app.
     * @summary Gets all scale-out instances of an app.
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsListInstanceIdentifiersSlotNextResponse>
     */
    listInstanceIdentifiersSlotNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListInstanceIdentifiersSlotNextResponse>;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param callback The callback
     */
    listInstanceIdentifiersSlotNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.WebAppInstanceCollection>): void;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param options The optional parameters
     * @param callback The callback
     */
    listInstanceIdentifiersSlotNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.WebAppInstanceCollection>): void;
    /**
     * Get list of processes for a web site, or a deployment slot, or for a specific scaled-out
     * instance in a web site.
     * @summary Get list of processes for a web site, or a deployment slot, or for a specific
     * scaled-out instance in a web site.
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsListInstanceProcessesSlotNextResponse>
     */
    listInstanceProcessesSlotNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListInstanceProcessesSlotNextResponse>;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param callback The callback
     */
    listInstanceProcessesSlotNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.ProcessInfoCollection>): void;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param options The optional parameters
     * @param callback The callback
     */
    listInstanceProcessesSlotNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ProcessInfoCollection>): void;
    /**
     * List module information for a process by its ID for a specific scaled-out instance in a web
     * site.
     * @summary List module information for a process by its ID for a specific scaled-out instance in a
     * web site.
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsListInstanceProcessModulesSlotNextResponse>
     */
    listInstanceProcessModulesSlotNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListInstanceProcessModulesSlotNextResponse>;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param callback The callback
     */
    listInstanceProcessModulesSlotNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.ProcessModuleInfoCollection>): void;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param options The optional parameters
     * @param callback The callback
     */
    listInstanceProcessModulesSlotNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ProcessModuleInfoCollection>): void;
    /**
     * List the threads in a process by its ID for a specific scaled-out instance in a web site.
     * @summary List the threads in a process by its ID for a specific scaled-out instance in a web
     * site.
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsListInstanceProcessThreadsSlotNextResponse>
     */
    listInstanceProcessThreadsSlotNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListInstanceProcessThreadsSlotNextResponse>;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param callback The callback
     */
    listInstanceProcessThreadsSlotNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.ProcessThreadInfoCollection>): void;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param options The optional parameters
     * @param callback The callback
     */
    listInstanceProcessThreadsSlotNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ProcessThreadInfoCollection>): void;
    /**
     * Gets all metric definitions of an app (or deployment slot, if specified).
     * @summary Gets all metric definitions of an app (or deployment slot, if specified).
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsListMetricDefinitionsSlotNextResponse>
     */
    listMetricDefinitionsSlotNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListMetricDefinitionsSlotNextResponse>;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param callback The callback
     */
    listMetricDefinitionsSlotNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.ResourceMetricDefinitionCollection>): void;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param options The optional parameters
     * @param callback The callback
     */
    listMetricDefinitionsSlotNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ResourceMetricDefinitionCollection>): void;
    /**
     * Gets performance metrics of an app (or deployment slot, if specified).
     * @summary Gets performance metrics of an app (or deployment slot, if specified).
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsListMetricsSlotNextResponse>
     */
    listMetricsSlotNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListMetricsSlotNextResponse>;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param callback The callback
     */
    listMetricsSlotNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.ResourceMetricCollection>): void;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param options The optional parameters
     * @param callback The callback
     */
    listMetricsSlotNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ResourceMetricCollection>): void;
    /**
     * Gets perfmon counters for web app.
     * @summary Gets perfmon counters for web app.
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsListPerfMonCountersSlotNextResponse>
     */
    listPerfMonCountersSlotNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListPerfMonCountersSlotNextResponse>;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param callback The callback
     */
    listPerfMonCountersSlotNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.PerfMonCounterCollection>): void;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param options The optional parameters
     * @param callback The callback
     */
    listPerfMonCountersSlotNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PerfMonCounterCollection>): void;
    /**
     * Get list of processes for a web site, or a deployment slot, or for a specific scaled-out
     * instance in a web site.
     * @summary Get list of processes for a web site, or a deployment slot, or for a specific
     * scaled-out instance in a web site.
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsListProcessesSlotNextResponse>
     */
    listProcessesSlotNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListProcessesSlotNextResponse>;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param callback The callback
     */
    listProcessesSlotNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.ProcessInfoCollection>): void;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param options The optional parameters
     * @param callback The callback
     */
    listProcessesSlotNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ProcessInfoCollection>): void;
    /**
     * List module information for a process by its ID for a specific scaled-out instance in a web
     * site.
     * @summary List module information for a process by its ID for a specific scaled-out instance in a
     * web site.
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsListProcessModulesSlotNextResponse>
     */
    listProcessModulesSlotNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListProcessModulesSlotNextResponse>;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param callback The callback
     */
    listProcessModulesSlotNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.ProcessModuleInfoCollection>): void;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param options The optional parameters
     * @param callback The callback
     */
    listProcessModulesSlotNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ProcessModuleInfoCollection>): void;
    /**
     * List the threads in a process by its ID for a specific scaled-out instance in a web site.
     * @summary List the threads in a process by its ID for a specific scaled-out instance in a web
     * site.
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsListProcessThreadsSlotNextResponse>
     */
    listProcessThreadsSlotNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListProcessThreadsSlotNextResponse>;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param callback The callback
     */
    listProcessThreadsSlotNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.ProcessThreadInfoCollection>): void;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param options The optional parameters
     * @param callback The callback
     */
    listProcessThreadsSlotNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ProcessThreadInfoCollection>): void;
    /**
     * Get public certificates for an app or a deployment slot.
     * @summary Get public certificates for an app or a deployment slot.
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsListPublicCertificatesSlotNextResponse>
     */
    listPublicCertificatesSlotNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListPublicCertificatesSlotNextResponse>;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param callback The callback
     */
    listPublicCertificatesSlotNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.PublicCertificateCollection>): void;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param options The optional parameters
     * @param callback The callback
     */
    listPublicCertificatesSlotNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PublicCertificateCollection>): void;
    /**
     * Get list of siteextensions for a web site, or a deployment slot.
     * @summary Get list of siteextensions for a web site, or a deployment slot.
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsListSiteExtensionsSlotNextResponse>
     */
    listSiteExtensionsSlotNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListSiteExtensionsSlotNextResponse>;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param callback The callback
     */
    listSiteExtensionsSlotNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.SiteExtensionInfoCollection>): void;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param options The optional parameters
     * @param callback The callback
     */
    listSiteExtensionsSlotNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SiteExtensionInfoCollection>): void;
    /**
     * Get the difference in configuration settings between two web app slots.
     * @summary Get the difference in configuration settings between two web app slots.
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsListSlotDifferencesSlotNextResponse>
     */
    listSlotDifferencesSlotNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListSlotDifferencesSlotNextResponse>;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param callback The callback
     */
    listSlotDifferencesSlotNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.SlotDifferenceCollection>): void;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param options The optional parameters
     * @param callback The callback
     */
    listSlotDifferencesSlotNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SlotDifferenceCollection>): void;
    /**
     * Returns all Snapshots to the user.
     * @summary Returns all Snapshots to the user.
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsListSnapshotsSlotNextResponse>
     */
    listSnapshotsSlotNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListSnapshotsSlotNextResponse>;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param callback The callback
     */
    listSnapshotsSlotNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.SnapshotCollection>): void;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param options The optional parameters
     * @param callback The callback
     */
    listSnapshotsSlotNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SnapshotCollection>): void;
    /**
     * Returns all Snapshots to the user from DRSecondary endpoint.
     * @summary Returns all Snapshots to the user from DRSecondary endpoint.
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsListSnapshotsFromDRSecondarySlotNextResponse>
     */
    listSnapshotsFromDRSecondarySlotNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListSnapshotsFromDRSecondarySlotNextResponse>;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param callback The callback
     */
    listSnapshotsFromDRSecondarySlotNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.SnapshotCollection>): void;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param options The optional parameters
     * @param callback The callback
     */
    listSnapshotsFromDRSecondarySlotNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SnapshotCollection>): void;
    /**
     * List triggered web jobs for an app, or a deployment slot.
     * @summary List triggered web jobs for an app, or a deployment slot.
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsListTriggeredWebJobsSlotNextResponse>
     */
    listTriggeredWebJobsSlotNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListTriggeredWebJobsSlotNextResponse>;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param callback The callback
     */
    listTriggeredWebJobsSlotNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.TriggeredWebJobCollection>): void;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param options The optional parameters
     * @param callback The callback
     */
    listTriggeredWebJobsSlotNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.TriggeredWebJobCollection>): void;
    /**
     * List a triggered web job's history for an app, or a deployment slot.
     * @summary List a triggered web job's history for an app, or a deployment slot.
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsListTriggeredWebJobHistorySlotNextResponse>
     */
    listTriggeredWebJobHistorySlotNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListTriggeredWebJobHistorySlotNextResponse>;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param callback The callback
     */
    listTriggeredWebJobHistorySlotNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.TriggeredJobHistoryCollection>): void;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param options The optional parameters
     * @param callback The callback
     */
    listTriggeredWebJobHistorySlotNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.TriggeredJobHistoryCollection>): void;
    /**
     * Gets the quota usage information of an app (or deployment slot, if specified).
     * @summary Gets the quota usage information of an app (or deployment slot, if specified).
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsListUsagesSlotNextResponse>
     */
    listUsagesSlotNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListUsagesSlotNextResponse>;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param callback The callback
     */
    listUsagesSlotNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.CsmUsageQuotaCollection>): void;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param options The optional parameters
     * @param callback The callback
     */
    listUsagesSlotNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CsmUsageQuotaCollection>): void;
    /**
     * List webjobs for an app, or a deployment slot.
     * @summary List webjobs for an app, or a deployment slot.
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsListWebJobsSlotNextResponse>
     */
    listWebJobsSlotNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListWebJobsSlotNextResponse>;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param callback The callback
     */
    listWebJobsSlotNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.WebJobCollection>): void;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param options The optional parameters
     * @param callback The callback
     */
    listWebJobsSlotNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.WebJobCollection>): void;
    /**
     * Get the difference in configuration settings between two web app slots.
     * @summary Get the difference in configuration settings between two web app slots.
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsListSlotDifferencesFromProductionNextResponse>
     */
    listSlotDifferencesFromProductionNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListSlotDifferencesFromProductionNextResponse>;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param callback The callback
     */
    listSlotDifferencesFromProductionNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.SlotDifferenceCollection>): void;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param options The optional parameters
     * @param callback The callback
     */
    listSlotDifferencesFromProductionNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SlotDifferenceCollection>): void;
    /**
     * Returns all Snapshots to the user.
     * @summary Returns all Snapshots to the user.
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsListSnapshotsNextResponse>
     */
    listSnapshotsNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListSnapshotsNextResponse>;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param callback The callback
     */
    listSnapshotsNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.SnapshotCollection>): void;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param options The optional parameters
     * @param callback The callback
     */
    listSnapshotsNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SnapshotCollection>): void;
    /**
     * Returns all Snapshots to the user from DRSecondary endpoint.
     * @summary Returns all Snapshots to the user from DRSecondary endpoint.
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsListSnapshotsFromDRSecondaryNextResponse>
     */
    listSnapshotsFromDRSecondaryNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListSnapshotsFromDRSecondaryNextResponse>;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param callback The callback
     */
    listSnapshotsFromDRSecondaryNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.SnapshotCollection>): void;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param options The optional parameters
     * @param callback The callback
     */
    listSnapshotsFromDRSecondaryNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SnapshotCollection>): void;
    /**
     * List triggered web jobs for an app, or a deployment slot.
     * @summary List triggered web jobs for an app, or a deployment slot.
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsListTriggeredWebJobsNextResponse>
     */
    listTriggeredWebJobsNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListTriggeredWebJobsNextResponse>;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param callback The callback
     */
    listTriggeredWebJobsNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.TriggeredWebJobCollection>): void;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param options The optional parameters
     * @param callback The callback
     */
    listTriggeredWebJobsNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.TriggeredWebJobCollection>): void;
    /**
     * List a triggered web job's history for an app, or a deployment slot.
     * @summary List a triggered web job's history for an app, or a deployment slot.
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsListTriggeredWebJobHistoryNextResponse>
     */
    listTriggeredWebJobHistoryNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListTriggeredWebJobHistoryNextResponse>;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param callback The callback
     */
    listTriggeredWebJobHistoryNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.TriggeredJobHistoryCollection>): void;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param options The optional parameters
     * @param callback The callback
     */
    listTriggeredWebJobHistoryNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.TriggeredJobHistoryCollection>): void;
    /**
     * Gets the quota usage information of an app (or deployment slot, if specified).
     * @summary Gets the quota usage information of an app (or deployment slot, if specified).
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsListUsagesNextResponse>
     */
    listUsagesNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListUsagesNextResponse>;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param callback The callback
     */
    listUsagesNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.CsmUsageQuotaCollection>): void;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param options The optional parameters
     * @param callback The callback
     */
    listUsagesNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CsmUsageQuotaCollection>): void;
    /**
     * List webjobs for an app, or a deployment slot.
     * @summary List webjobs for an app, or a deployment slot.
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsListWebJobsNextResponse>
     */
    listWebJobsNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.WebAppsListWebJobsNextResponse>;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param callback The callback
     */
    listWebJobsNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.WebJobCollection>): void;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param options The optional parameters
     * @param callback The callback
     */
    listWebJobsNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.WebJobCollection>): void;
}
//# sourceMappingURL=webApps.d.ts.map