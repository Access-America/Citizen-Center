/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
import * as tslib_1 from "tslib";
import * as msRest from "@azure/ms-rest-js";
import * as Mappers from "../models/certificatesMappers";
import * as Parameters from "../models/parameters";
/** Class representing a Certificates. */
var Certificates = /** @class */ (function () {
    /**
     * Create a Certificates.
     * @param {WebSiteManagementClientContext} client Reference to the service client.
     */
    function Certificates(client) {
        this.client = client;
    }
    Certificates.prototype.list = function (options, callback) {
        return this.client.sendOperationRequest({
            options: options
        }, listOperationSpec, callback);
    };
    Certificates.prototype.listByResourceGroup = function (resourceGroupName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            options: options
        }, listByResourceGroupOperationSpec, callback);
    };
    Certificates.prototype.get = function (resourceGroupName, name, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            options: options
        }, getOperationSpec, callback);
    };
    Certificates.prototype.createOrUpdate = function (resourceGroupName, name, certificateEnvelope, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            certificateEnvelope: certificateEnvelope,
            options: options
        }, createOrUpdateOperationSpec, callback);
    };
    Certificates.prototype.deleteMethod = function (resourceGroupName, name, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            options: options
        }, deleteMethodOperationSpec, callback);
    };
    Certificates.prototype.update = function (resourceGroupName, name, certificateEnvelope, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            certificateEnvelope: certificateEnvelope,
            options: options
        }, updateOperationSpec, callback);
    };
    Certificates.prototype.listNext = function (nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, listNextOperationSpec, callback);
    };
    Certificates.prototype.listByResourceGroupNext = function (nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, listByResourceGroupNextOperationSpec, callback);
    };
    return Certificates;
}());
export { Certificates };
// Operation Specifications
var serializer = new msRest.Serializer(Mappers);
var listOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/providers/Microsoft.Web/certificates",
    urlParameters: [
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.CertificateCollection
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var listByResourceGroupOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/certificates",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.CertificateCollection
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var getOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/certificates/{name}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.Certificate
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var createOrUpdateOperationSpec = {
    httpMethod: "PUT",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/certificates/{name}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "certificateEnvelope",
        mapper: tslib_1.__assign({}, Mappers.Certificate, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.Certificate
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var deleteMethodOperationSpec = {
    httpMethod: "DELETE",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/certificates/{name}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {},
        204: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var updateOperationSpec = {
    httpMethod: "PATCH",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/certificates/{name}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "certificateEnvelope",
        mapper: tslib_1.__assign({}, Mappers.CertificatePatchResource, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.Certificate
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var listNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.CertificateCollection
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var listByResourceGroupNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.CertificateCollection
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
//# sourceMappingURL=certificates.js.map