/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
import * as tslib_1 from "tslib";
import * as msRest from "@azure/ms-rest-js";
import * as Mappers from "../models/webAppsMappers";
import * as Parameters from "../models/parameters";
/** Class representing a WebApps. */
var WebApps = /** @class */ (function () {
    /**
     * Create a WebApps.
     * @param {WebSiteManagementClientContext} client Reference to the service client.
     */
    function WebApps(client) {
        this.client = client;
    }
    WebApps.prototype.list = function (options, callback) {
        return this.client.sendOperationRequest({
            options: options
        }, listOperationSpec, callback);
    };
    WebApps.prototype.listByResourceGroup = function (resourceGroupName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            options: options
        }, listByResourceGroupOperationSpec, callback);
    };
    WebApps.prototype.get = function (resourceGroupName, name, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            options: options
        }, getOperationSpec, callback);
    };
    /**
     * Creates a new web, mobile, or API app in an existing resource group, or updates an existing app.
     * @summary Creates a new web, mobile, or API app in an existing resource group, or updates an
     * existing app.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Unique name of the app to create or update. To create or update a deployment slot,
     * use the {slot} parameter.
     * @param siteEnvelope A JSON representation of the app properties. See example.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsCreateOrUpdateResponse>
     */
    WebApps.prototype.createOrUpdate = function (resourceGroupName, name, siteEnvelope, options) {
        return this.beginCreateOrUpdate(resourceGroupName, name, siteEnvelope, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    WebApps.prototype.deleteMethod = function (resourceGroupName, name, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            options: options
        }, deleteMethodOperationSpec, callback);
    };
    WebApps.prototype.update = function (resourceGroupName, name, siteEnvelope, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            siteEnvelope: siteEnvelope,
            options: options
        }, updateOperationSpec, callback);
    };
    WebApps.prototype.analyzeCustomHostname = function (resourceGroupName, name, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            options: options
        }, analyzeCustomHostnameOperationSpec, callback);
    };
    WebApps.prototype.applySlotConfigToProduction = function (resourceGroupName, name, slotSwapEntity, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            slotSwapEntity: slotSwapEntity,
            options: options
        }, applySlotConfigToProductionOperationSpec, callback);
    };
    WebApps.prototype.backup = function (resourceGroupName, name, request, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            request: request,
            options: options
        }, backupOperationSpec, callback);
    };
    WebApps.prototype.listBackups = function (resourceGroupName, name, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            options: options
        }, listBackupsOperationSpec, callback);
    };
    WebApps.prototype.getBackupStatus = function (resourceGroupName, name, backupId, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            backupId: backupId,
            options: options
        }, getBackupStatusOperationSpec, callback);
    };
    WebApps.prototype.deleteBackup = function (resourceGroupName, name, backupId, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            backupId: backupId,
            options: options
        }, deleteBackupOperationSpec, callback);
    };
    WebApps.prototype.listBackupStatusSecrets = function (resourceGroupName, name, backupId, request, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            backupId: backupId,
            request: request,
            options: options
        }, listBackupStatusSecretsOperationSpec, callback);
    };
    /**
     * Restores a specific backup to another app (or deployment slot, if specified).
     * @summary Restores a specific backup to another app (or deployment slot, if specified).
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param backupId ID of the backup.
     * @param request Information on restore request .
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    WebApps.prototype.restore = function (resourceGroupName, name, backupId, request, options) {
        return this.beginRestore(resourceGroupName, name, backupId, request, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    WebApps.prototype.listConfigurations = function (resourceGroupName, name, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            options: options
        }, listConfigurationsOperationSpec, callback);
    };
    WebApps.prototype.updateApplicationSettings = function (resourceGroupName, name, appSettings, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            appSettings: appSettings,
            options: options
        }, updateApplicationSettingsOperationSpec, callback);
    };
    WebApps.prototype.listApplicationSettings = function (resourceGroupName, name, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            options: options
        }, listApplicationSettingsOperationSpec, callback);
    };
    WebApps.prototype.updateAuthSettings = function (resourceGroupName, name, siteAuthSettings, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            siteAuthSettings: siteAuthSettings,
            options: options
        }, updateAuthSettingsOperationSpec, callback);
    };
    WebApps.prototype.getAuthSettings = function (resourceGroupName, name, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            options: options
        }, getAuthSettingsOperationSpec, callback);
    };
    WebApps.prototype.updateAzureStorageAccounts = function (resourceGroupName, name, azureStorageAccounts, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            azureStorageAccounts: azureStorageAccounts,
            options: options
        }, updateAzureStorageAccountsOperationSpec, callback);
    };
    WebApps.prototype.listAzureStorageAccounts = function (resourceGroupName, name, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            options: options
        }, listAzureStorageAccountsOperationSpec, callback);
    };
    WebApps.prototype.updateBackupConfiguration = function (resourceGroupName, name, request, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            request: request,
            options: options
        }, updateBackupConfigurationOperationSpec, callback);
    };
    WebApps.prototype.deleteBackupConfiguration = function (resourceGroupName, name, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            options: options
        }, deleteBackupConfigurationOperationSpec, callback);
    };
    WebApps.prototype.getBackupConfiguration = function (resourceGroupName, name, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            options: options
        }, getBackupConfigurationOperationSpec, callback);
    };
    WebApps.prototype.updateConnectionStrings = function (resourceGroupName, name, connectionStrings, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            connectionStrings: connectionStrings,
            options: options
        }, updateConnectionStringsOperationSpec, callback);
    };
    WebApps.prototype.listConnectionStrings = function (resourceGroupName, name, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            options: options
        }, listConnectionStringsOperationSpec, callback);
    };
    WebApps.prototype.getDiagnosticLogsConfiguration = function (resourceGroupName, name, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            options: options
        }, getDiagnosticLogsConfigurationOperationSpec, callback);
    };
    WebApps.prototype.updateDiagnosticLogsConfig = function (resourceGroupName, name, siteLogsConfig, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            siteLogsConfig: siteLogsConfig,
            options: options
        }, updateDiagnosticLogsConfigOperationSpec, callback);
    };
    WebApps.prototype.updateMetadata = function (resourceGroupName, name, metadata, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            metadata: metadata,
            options: options
        }, updateMetadataOperationSpec, callback);
    };
    WebApps.prototype.listMetadata = function (resourceGroupName, name, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            options: options
        }, listMetadataOperationSpec, callback);
    };
    /**
     * Gets the Git/FTP publishing credentials of an app.
     * @summary Gets the Git/FTP publishing credentials of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsListPublishingCredentialsResponse>
     */
    WebApps.prototype.listPublishingCredentials = function (resourceGroupName, name, options) {
        return this.beginListPublishingCredentials(resourceGroupName, name, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    WebApps.prototype.updateSitePushSettings = function (resourceGroupName, name, pushSettings, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            pushSettings: pushSettings,
            options: options
        }, updateSitePushSettingsOperationSpec, callback);
    };
    WebApps.prototype.listSitePushSettings = function (resourceGroupName, name, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            options: options
        }, listSitePushSettingsOperationSpec, callback);
    };
    WebApps.prototype.listSlotConfigurationNames = function (resourceGroupName, name, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            options: options
        }, listSlotConfigurationNamesOperationSpec, callback);
    };
    WebApps.prototype.updateSlotConfigurationNames = function (resourceGroupName, name, slotConfigNames, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            slotConfigNames: slotConfigNames,
            options: options
        }, updateSlotConfigurationNamesOperationSpec, callback);
    };
    WebApps.prototype.getConfiguration = function (resourceGroupName, name, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            options: options
        }, getConfigurationOperationSpec, callback);
    };
    WebApps.prototype.createOrUpdateConfiguration = function (resourceGroupName, name, siteConfig, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            siteConfig: siteConfig,
            options: options
        }, createOrUpdateConfigurationOperationSpec, callback);
    };
    WebApps.prototype.updateConfiguration = function (resourceGroupName, name, siteConfig, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            siteConfig: siteConfig,
            options: options
        }, updateConfigurationOperationSpec, callback);
    };
    WebApps.prototype.listConfigurationSnapshotInfo = function (resourceGroupName, name, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            options: options
        }, listConfigurationSnapshotInfoOperationSpec, callback);
    };
    WebApps.prototype.getConfigurationSnapshot = function (resourceGroupName, name, snapshotId, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            snapshotId: snapshotId,
            options: options
        }, getConfigurationSnapshotOperationSpec, callback);
    };
    WebApps.prototype.recoverSiteConfigurationSnapshot = function (resourceGroupName, name, snapshotId, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            snapshotId: snapshotId,
            options: options
        }, recoverSiteConfigurationSnapshotOperationSpec, callback);
    };
    WebApps.prototype.getWebSiteContainerLogs = function (resourceGroupName, name, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            options: options
        }, getWebSiteContainerLogsOperationSpec, callback);
    };
    WebApps.prototype.getContainerLogsZip = function (resourceGroupName, name, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            options: options
        }, getContainerLogsZipOperationSpec, callback);
    };
    WebApps.prototype.listContinuousWebJobs = function (resourceGroupName, name, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            options: options
        }, listContinuousWebJobsOperationSpec, callback);
    };
    WebApps.prototype.getContinuousWebJob = function (resourceGroupName, name, webJobName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            webJobName: webJobName,
            options: options
        }, getContinuousWebJobOperationSpec, callback);
    };
    WebApps.prototype.deleteContinuousWebJob = function (resourceGroupName, name, webJobName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            webJobName: webJobName,
            options: options
        }, deleteContinuousWebJobOperationSpec, callback);
    };
    WebApps.prototype.startContinuousWebJob = function (resourceGroupName, name, webJobName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            webJobName: webJobName,
            options: options
        }, startContinuousWebJobOperationSpec, callback);
    };
    WebApps.prototype.stopContinuousWebJob = function (resourceGroupName, name, webJobName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            webJobName: webJobName,
            options: options
        }, stopContinuousWebJobOperationSpec, callback);
    };
    WebApps.prototype.listDeployments = function (resourceGroupName, name, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            options: options
        }, listDeploymentsOperationSpec, callback);
    };
    WebApps.prototype.getDeployment = function (resourceGroupName, name, id, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            id: id,
            options: options
        }, getDeploymentOperationSpec, callback);
    };
    WebApps.prototype.createDeployment = function (resourceGroupName, name, id, deployment, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            id: id,
            deployment: deployment,
            options: options
        }, createDeploymentOperationSpec, callback);
    };
    WebApps.prototype.deleteDeployment = function (resourceGroupName, name, id, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            id: id,
            options: options
        }, deleteDeploymentOperationSpec, callback);
    };
    WebApps.prototype.listDeploymentLog = function (resourceGroupName, name, id, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            id: id,
            options: options
        }, listDeploymentLogOperationSpec, callback);
    };
    WebApps.prototype.discoverBackup = function (resourceGroupName, name, request, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            request: request,
            options: options
        }, discoverBackupOperationSpec, callback);
    };
    WebApps.prototype.listDomainOwnershipIdentifiers = function (resourceGroupName, name, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            options: options
        }, listDomainOwnershipIdentifiersOperationSpec, callback);
    };
    WebApps.prototype.getDomainOwnershipIdentifier = function (resourceGroupName, name, domainOwnershipIdentifierName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            domainOwnershipIdentifierName: domainOwnershipIdentifierName,
            options: options
        }, getDomainOwnershipIdentifierOperationSpec, callback);
    };
    WebApps.prototype.createOrUpdateDomainOwnershipIdentifier = function (resourceGroupName, name, domainOwnershipIdentifierName, domainOwnershipIdentifier, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            domainOwnershipIdentifierName: domainOwnershipIdentifierName,
            domainOwnershipIdentifier: domainOwnershipIdentifier,
            options: options
        }, createOrUpdateDomainOwnershipIdentifierOperationSpec, callback);
    };
    WebApps.prototype.deleteDomainOwnershipIdentifier = function (resourceGroupName, name, domainOwnershipIdentifierName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            domainOwnershipIdentifierName: domainOwnershipIdentifierName,
            options: options
        }, deleteDomainOwnershipIdentifierOperationSpec, callback);
    };
    WebApps.prototype.updateDomainOwnershipIdentifier = function (resourceGroupName, name, domainOwnershipIdentifierName, domainOwnershipIdentifier, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            domainOwnershipIdentifierName: domainOwnershipIdentifierName,
            domainOwnershipIdentifier: domainOwnershipIdentifier,
            options: options
        }, updateDomainOwnershipIdentifierOperationSpec, callback);
    };
    WebApps.prototype.getMSDeployStatus = function (resourceGroupName, name, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            options: options
        }, getMSDeployStatusOperationSpec, callback);
    };
    /**
     * Invoke the MSDeploy web app extension.
     * @summary Invoke the MSDeploy web app extension.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of web app.
     * @param mSDeploy Details of MSDeploy operation
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsCreateMSDeployOperationResponse>
     */
    WebApps.prototype.createMSDeployOperation = function (resourceGroupName, name, mSDeploy, options) {
        return this.beginCreateMSDeployOperation(resourceGroupName, name, mSDeploy, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    WebApps.prototype.getMSDeployLog = function (resourceGroupName, name, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            options: options
        }, getMSDeployLogOperationSpec, callback);
    };
    WebApps.prototype.listFunctions = function (resourceGroupName, name, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            options: options
        }, listFunctionsOperationSpec, callback);
    };
    WebApps.prototype.getFunctionsAdminToken = function (resourceGroupName, name, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            options: options
        }, getFunctionsAdminTokenOperationSpec, callback);
    };
    WebApps.prototype.getFunction = function (resourceGroupName, name, functionName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            functionName: functionName,
            options: options
        }, getFunctionOperationSpec, callback);
    };
    /**
     * Create function for web site, or a deployment slot.
     * @summary Create function for web site, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param functionName Function name.
     * @param functionEnvelope Function details.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsCreateFunctionResponse>
     */
    WebApps.prototype.createFunction = function (resourceGroupName, name, functionName, functionEnvelope, options) {
        return this.beginCreateFunction(resourceGroupName, name, functionName, functionEnvelope, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    WebApps.prototype.deleteFunction = function (resourceGroupName, name, functionName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            functionName: functionName,
            options: options
        }, deleteFunctionOperationSpec, callback);
    };
    WebApps.prototype.listFunctionSecrets = function (resourceGroupName, name, functionName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            functionName: functionName,
            options: options
        }, listFunctionSecretsOperationSpec, callback);
    };
    WebApps.prototype.listHostNameBindings = function (resourceGroupName, name, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            options: options
        }, listHostNameBindingsOperationSpec, callback);
    };
    WebApps.prototype.getHostNameBinding = function (resourceGroupName, name, hostName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            hostName: hostName,
            options: options
        }, getHostNameBindingOperationSpec, callback);
    };
    WebApps.prototype.createOrUpdateHostNameBinding = function (resourceGroupName, name, hostName, hostNameBinding, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            hostName: hostName,
            hostNameBinding: hostNameBinding,
            options: options
        }, createOrUpdateHostNameBindingOperationSpec, callback);
    };
    WebApps.prototype.deleteHostNameBinding = function (resourceGroupName, name, hostName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            hostName: hostName,
            options: options
        }, deleteHostNameBindingOperationSpec, callback);
    };
    WebApps.prototype.getHybridConnection = function (resourceGroupName, name, namespaceName, relayName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            namespaceName: namespaceName,
            relayName: relayName,
            options: options
        }, getHybridConnectionOperationSpec, callback);
    };
    WebApps.prototype.createOrUpdateHybridConnection = function (resourceGroupName, name, namespaceName, relayName, connectionEnvelope, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            namespaceName: namespaceName,
            relayName: relayName,
            connectionEnvelope: connectionEnvelope,
            options: options
        }, createOrUpdateHybridConnectionOperationSpec, callback);
    };
    WebApps.prototype.deleteHybridConnection = function (resourceGroupName, name, namespaceName, relayName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            namespaceName: namespaceName,
            relayName: relayName,
            options: options
        }, deleteHybridConnectionOperationSpec, callback);
    };
    WebApps.prototype.updateHybridConnection = function (resourceGroupName, name, namespaceName, relayName, connectionEnvelope, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            namespaceName: namespaceName,
            relayName: relayName,
            connectionEnvelope: connectionEnvelope,
            options: options
        }, updateHybridConnectionOperationSpec, callback);
    };
    WebApps.prototype.listHybridConnectionKeys = function (resourceGroupName, name, namespaceName, relayName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            namespaceName: namespaceName,
            relayName: relayName,
            options: options
        }, listHybridConnectionKeysOperationSpec, callback);
    };
    WebApps.prototype.listHybridConnections = function (resourceGroupName, name, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            options: options
        }, listHybridConnectionsOperationSpec, callback);
    };
    WebApps.prototype.listRelayServiceConnections = function (resourceGroupName, name, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            options: options
        }, listRelayServiceConnectionsOperationSpec, callback);
    };
    WebApps.prototype.getRelayServiceConnection = function (resourceGroupName, name, entityName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            entityName: entityName,
            options: options
        }, getRelayServiceConnectionOperationSpec, callback);
    };
    WebApps.prototype.createOrUpdateRelayServiceConnection = function (resourceGroupName, name, entityName, connectionEnvelope, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            entityName: entityName,
            connectionEnvelope: connectionEnvelope,
            options: options
        }, createOrUpdateRelayServiceConnectionOperationSpec, callback);
    };
    WebApps.prototype.deleteRelayServiceConnection = function (resourceGroupName, name, entityName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            entityName: entityName,
            options: options
        }, deleteRelayServiceConnectionOperationSpec, callback);
    };
    WebApps.prototype.updateRelayServiceConnection = function (resourceGroupName, name, entityName, connectionEnvelope, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            entityName: entityName,
            connectionEnvelope: connectionEnvelope,
            options: options
        }, updateRelayServiceConnectionOperationSpec, callback);
    };
    WebApps.prototype.listInstanceIdentifiers = function (resourceGroupName, name, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            options: options
        }, listInstanceIdentifiersOperationSpec, callback);
    };
    WebApps.prototype.getInstanceMsDeployStatus = function (resourceGroupName, name, instanceId, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            instanceId: instanceId,
            options: options
        }, getInstanceMsDeployStatusOperationSpec, callback);
    };
    /**
     * Invoke the MSDeploy web app extension.
     * @summary Invoke the MSDeploy web app extension.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of web app.
     * @param instanceId ID of web app instance.
     * @param mSDeploy Details of MSDeploy operation
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsCreateInstanceMSDeployOperationResponse>
     */
    WebApps.prototype.createInstanceMSDeployOperation = function (resourceGroupName, name, instanceId, mSDeploy, options) {
        return this.beginCreateInstanceMSDeployOperation(resourceGroupName, name, instanceId, mSDeploy, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    WebApps.prototype.getInstanceMSDeployLog = function (resourceGroupName, name, instanceId, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            instanceId: instanceId,
            options: options
        }, getInstanceMSDeployLogOperationSpec, callback);
    };
    WebApps.prototype.listInstanceProcesses = function (resourceGroupName, name, instanceId, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            instanceId: instanceId,
            options: options
        }, listInstanceProcessesOperationSpec, callback);
    };
    WebApps.prototype.getInstanceProcess = function (resourceGroupName, name, processId, instanceId, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            processId: processId,
            instanceId: instanceId,
            options: options
        }, getInstanceProcessOperationSpec, callback);
    };
    WebApps.prototype.deleteInstanceProcess = function (resourceGroupName, name, processId, instanceId, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            processId: processId,
            instanceId: instanceId,
            options: options
        }, deleteInstanceProcessOperationSpec, callback);
    };
    WebApps.prototype.getInstanceProcessDump = function (resourceGroupName, name, processId, instanceId, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            processId: processId,
            instanceId: instanceId,
            options: options
        }, getInstanceProcessDumpOperationSpec, callback);
    };
    WebApps.prototype.listInstanceProcessModules = function (resourceGroupName, name, processId, instanceId, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            processId: processId,
            instanceId: instanceId,
            options: options
        }, listInstanceProcessModulesOperationSpec, callback);
    };
    WebApps.prototype.getInstanceProcessModule = function (resourceGroupName, name, processId, baseAddress, instanceId, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            processId: processId,
            baseAddress: baseAddress,
            instanceId: instanceId,
            options: options
        }, getInstanceProcessModuleOperationSpec, callback);
    };
    WebApps.prototype.listInstanceProcessThreads = function (resourceGroupName, name, processId, instanceId, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            processId: processId,
            instanceId: instanceId,
            options: options
        }, listInstanceProcessThreadsOperationSpec, callback);
    };
    WebApps.prototype.getInstanceProcessThread = function (resourceGroupName, name, processId, threadId, instanceId, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            processId: processId,
            threadId: threadId,
            instanceId: instanceId,
            options: options
        }, getInstanceProcessThreadOperationSpec, callback);
    };
    WebApps.prototype.isCloneable = function (resourceGroupName, name, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            options: options
        }, isCloneableOperationSpec, callback);
    };
    WebApps.prototype.listSyncFunctionTriggers = function (resourceGroupName, name, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            options: options
        }, listSyncFunctionTriggersOperationSpec, callback);
    };
    WebApps.prototype.listMetricDefinitions = function (resourceGroupName, name, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            options: options
        }, listMetricDefinitionsOperationSpec, callback);
    };
    WebApps.prototype.listMetrics = function (resourceGroupName, name, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            options: options
        }, listMetricsOperationSpec, callback);
    };
    /**
     * Restores a web app.
     * @summary Restores a web app.
     * @param subscriptionName Azure subscription.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of web app.
     * @param migrationOptions Migration migrationOptions.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsMigrateStorageResponse>
     */
    WebApps.prototype.migrateStorage = function (subscriptionName, resourceGroupName, name, migrationOptions, options) {
        return this.beginMigrateStorage(subscriptionName, resourceGroupName, name, migrationOptions, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    /**
     * Migrates a local (in-app) MySql database to a remote MySql database.
     * @summary Migrates a local (in-app) MySql database to a remote MySql database.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of web app.
     * @param migrationRequestEnvelope MySql migration options.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsMigrateMySqlResponse>
     */
    WebApps.prototype.migrateMySql = function (resourceGroupName, name, migrationRequestEnvelope, options) {
        return this.beginMigrateMySql(resourceGroupName, name, migrationRequestEnvelope, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    WebApps.prototype.getMigrateMySqlStatus = function (resourceGroupName, name, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            options: options
        }, getMigrateMySqlStatusOperationSpec, callback);
    };
    WebApps.prototype.getSwiftVirtualNetworkConnection = function (resourceGroupName, name, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            options: options
        }, getSwiftVirtualNetworkConnectionOperationSpec, callback);
    };
    WebApps.prototype.createOrUpdateSwiftVirtualNetworkConnection = function (resourceGroupName, name, connectionEnvelope, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            connectionEnvelope: connectionEnvelope,
            options: options
        }, createOrUpdateSwiftVirtualNetworkConnectionOperationSpec, callback);
    };
    WebApps.prototype.deleteSwiftVirtualNetwork = function (resourceGroupName, name, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            options: options
        }, deleteSwiftVirtualNetworkOperationSpec, callback);
    };
    WebApps.prototype.updateSwiftVirtualNetworkConnection = function (resourceGroupName, name, connectionEnvelope, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            connectionEnvelope: connectionEnvelope,
            options: options
        }, updateSwiftVirtualNetworkConnectionOperationSpec, callback);
    };
    WebApps.prototype.listNetworkFeatures = function (resourceGroupName, name, view, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            view: view,
            options: options
        }, listNetworkFeaturesOperationSpec, callback);
    };
    WebApps.prototype.getNetworkTraceOperation = function (resourceGroupName, name, operationId, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            operationId: operationId,
            options: options
        }, getNetworkTraceOperationOperationSpec, callback);
    };
    WebApps.prototype.startWebSiteNetworkTrace = function (resourceGroupName, name, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            options: options
        }, startWebSiteNetworkTraceOperationSpec, callback);
    };
    /**
     * Start capturing network packets for the site.
     * @summary Start capturing network packets for the site.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name The name of the web app.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsStartWebSiteNetworkTraceOperationResponse>
     */
    WebApps.prototype.startWebSiteNetworkTraceOperation = function (resourceGroupName, name, options) {
        return this.beginStartWebSiteNetworkTraceOperation(resourceGroupName, name, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    WebApps.prototype.stopWebSiteNetworkTrace = function (resourceGroupName, name, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            options: options
        }, stopWebSiteNetworkTraceOperationSpec, callback);
    };
    WebApps.prototype.getNetworkTraces = function (resourceGroupName, name, operationId, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            operationId: operationId,
            options: options
        }, getNetworkTracesOperationSpec, callback);
    };
    WebApps.prototype.getNetworkTraceOperationV2 = function (resourceGroupName, name, operationId, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            operationId: operationId,
            options: options
        }, getNetworkTraceOperationV2OperationSpec, callback);
    };
    WebApps.prototype.getNetworkTracesV2 = function (resourceGroupName, name, operationId, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            operationId: operationId,
            options: options
        }, getNetworkTracesV2OperationSpec, callback);
    };
    WebApps.prototype.generateNewSitePublishingPassword = function (resourceGroupName, name, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            options: options
        }, generateNewSitePublishingPasswordOperationSpec, callback);
    };
    WebApps.prototype.listPerfMonCounters = function (resourceGroupName, name, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            options: options
        }, listPerfMonCountersOperationSpec, callback);
    };
    WebApps.prototype.getSitePhpErrorLogFlag = function (resourceGroupName, name, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            options: options
        }, getSitePhpErrorLogFlagOperationSpec, callback);
    };
    WebApps.prototype.listPremierAddOns = function (resourceGroupName, name, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            options: options
        }, listPremierAddOnsOperationSpec, callback);
    };
    WebApps.prototype.getPremierAddOn = function (resourceGroupName, name, premierAddOnName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            premierAddOnName: premierAddOnName,
            options: options
        }, getPremierAddOnOperationSpec, callback);
    };
    WebApps.prototype.addPremierAddOn = function (resourceGroupName, name, premierAddOnName, premierAddOn, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            premierAddOnName: premierAddOnName,
            premierAddOn: premierAddOn,
            options: options
        }, addPremierAddOnOperationSpec, callback);
    };
    WebApps.prototype.deletePremierAddOn = function (resourceGroupName, name, premierAddOnName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            premierAddOnName: premierAddOnName,
            options: options
        }, deletePremierAddOnOperationSpec, callback);
    };
    WebApps.prototype.updatePremierAddOn = function (resourceGroupName, name, premierAddOnName, premierAddOn, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            premierAddOnName: premierAddOnName,
            premierAddOn: premierAddOn,
            options: options
        }, updatePremierAddOnOperationSpec, callback);
    };
    WebApps.prototype.getPrivateAccess = function (resourceGroupName, name, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            options: options
        }, getPrivateAccessOperationSpec, callback);
    };
    WebApps.prototype.putPrivateAccessVnet = function (resourceGroupName, name, access, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            access: access,
            options: options
        }, putPrivateAccessVnetOperationSpec, callback);
    };
    WebApps.prototype.listProcesses = function (resourceGroupName, name, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            options: options
        }, listProcessesOperationSpec, callback);
    };
    WebApps.prototype.getProcess = function (resourceGroupName, name, processId, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            processId: processId,
            options: options
        }, getProcessOperationSpec, callback);
    };
    WebApps.prototype.deleteProcess = function (resourceGroupName, name, processId, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            processId: processId,
            options: options
        }, deleteProcessOperationSpec, callback);
    };
    WebApps.prototype.getProcessDump = function (resourceGroupName, name, processId, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            processId: processId,
            options: options
        }, getProcessDumpOperationSpec, callback);
    };
    WebApps.prototype.listProcessModules = function (resourceGroupName, name, processId, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            processId: processId,
            options: options
        }, listProcessModulesOperationSpec, callback);
    };
    WebApps.prototype.getProcessModule = function (resourceGroupName, name, processId, baseAddress, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            processId: processId,
            baseAddress: baseAddress,
            options: options
        }, getProcessModuleOperationSpec, callback);
    };
    WebApps.prototype.listProcessThreads = function (resourceGroupName, name, processId, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            processId: processId,
            options: options
        }, listProcessThreadsOperationSpec, callback);
    };
    WebApps.prototype.getProcessThread = function (resourceGroupName, name, processId, threadId, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            processId: processId,
            threadId: threadId,
            options: options
        }, getProcessThreadOperationSpec, callback);
    };
    WebApps.prototype.listPublicCertificates = function (resourceGroupName, name, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            options: options
        }, listPublicCertificatesOperationSpec, callback);
    };
    WebApps.prototype.getPublicCertificate = function (resourceGroupName, name, publicCertificateName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            publicCertificateName: publicCertificateName,
            options: options
        }, getPublicCertificateOperationSpec, callback);
    };
    WebApps.prototype.createOrUpdatePublicCertificate = function (resourceGroupName, name, publicCertificateName, publicCertificate, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            publicCertificateName: publicCertificateName,
            publicCertificate: publicCertificate,
            options: options
        }, createOrUpdatePublicCertificateOperationSpec, callback);
    };
    WebApps.prototype.deletePublicCertificate = function (resourceGroupName, name, publicCertificateName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            publicCertificateName: publicCertificateName,
            options: options
        }, deletePublicCertificateOperationSpec, callback);
    };
    WebApps.prototype.listPublishingProfileXmlWithSecrets = function (resourceGroupName, name, publishingProfileOptions, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            publishingProfileOptions: publishingProfileOptions,
            options: options
        }, listPublishingProfileXmlWithSecretsOperationSpec, callback);
    };
    WebApps.prototype.resetProductionSlotConfig = function (resourceGroupName, name, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            options: options
        }, resetProductionSlotConfigOperationSpec, callback);
    };
    WebApps.prototype.restart = function (resourceGroupName, name, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            options: options
        }, restartOperationSpec, callback);
    };
    /**
     * Restores an app from a backup blob in Azure Storage.
     * @summary Restores an app from a backup blob in Azure Storage.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param request Information on restore request .
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    WebApps.prototype.restoreFromBackupBlob = function (resourceGroupName, name, request, options) {
        return this.beginRestoreFromBackupBlob(resourceGroupName, name, request, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    /**
     * Restores a deleted web app to this web app.
     * @summary Restores a deleted web app to this web app.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of web app.
     * @param restoreRequest Deleted web app restore information.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    WebApps.prototype.restoreFromDeletedApp = function (resourceGroupName, name, restoreRequest, options) {
        return this.beginRestoreFromDeletedApp(resourceGroupName, name, restoreRequest, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    /**
     * Restores a web app from a snapshot.
     * @summary Restores a web app from a snapshot.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of web app.
     * @param restoreRequest Snapshot restore settings. Snapshot information can be obtained by calling
     * GetDeletedSites or GetSiteSnapshots API.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    WebApps.prototype.restoreSnapshot = function (resourceGroupName, name, restoreRequest, options) {
        return this.beginRestoreSnapshot(resourceGroupName, name, restoreRequest, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    WebApps.prototype.listSiteExtensions = function (resourceGroupName, name, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            options: options
        }, listSiteExtensionsOperationSpec, callback);
    };
    WebApps.prototype.getSiteExtension = function (resourceGroupName, name, siteExtensionId, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            siteExtensionId: siteExtensionId,
            options: options
        }, getSiteExtensionOperationSpec, callback);
    };
    /**
     * Install site extension on a web site, or a deployment slot.
     * @summary Install site extension on a web site, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param siteExtensionId Site extension name.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsInstallSiteExtensionResponse>
     */
    WebApps.prototype.installSiteExtension = function (resourceGroupName, name, siteExtensionId, options) {
        return this.beginInstallSiteExtension(resourceGroupName, name, siteExtensionId, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    WebApps.prototype.deleteSiteExtension = function (resourceGroupName, name, siteExtensionId, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            siteExtensionId: siteExtensionId,
            options: options
        }, deleteSiteExtensionOperationSpec, callback);
    };
    WebApps.prototype.listSlots = function (resourceGroupName, name, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            options: options
        }, listSlotsOperationSpec, callback);
    };
    WebApps.prototype.getSlot = function (resourceGroupName, name, slot, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            slot: slot,
            options: options
        }, getSlotOperationSpec, callback);
    };
    /**
     * Creates a new web, mobile, or API app in an existing resource group, or updates an existing app.
     * @summary Creates a new web, mobile, or API app in an existing resource group, or updates an
     * existing app.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Unique name of the app to create or update. To create or update a deployment slot,
     * use the {slot} parameter.
     * @param siteEnvelope A JSON representation of the app properties. See example.
     * @param slot Name of the deployment slot to create or update. By default, this API attempts to
     * create or modify the production slot.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsCreateOrUpdateSlotResponse>
     */
    WebApps.prototype.createOrUpdateSlot = function (resourceGroupName, name, siteEnvelope, slot, options) {
        return this.beginCreateOrUpdateSlot(resourceGroupName, name, siteEnvelope, slot, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    WebApps.prototype.deleteSlot = function (resourceGroupName, name, slot, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            slot: slot,
            options: options
        }, deleteSlotOperationSpec, callback);
    };
    WebApps.prototype.updateSlot = function (resourceGroupName, name, siteEnvelope, slot, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            siteEnvelope: siteEnvelope,
            slot: slot,
            options: options
        }, updateSlotOperationSpec, callback);
    };
    WebApps.prototype.analyzeCustomHostnameSlot = function (resourceGroupName, name, slot, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            slot: slot,
            options: options
        }, analyzeCustomHostnameSlotOperationSpec, callback);
    };
    WebApps.prototype.applySlotConfigurationSlot = function (resourceGroupName, name, slotSwapEntity, slot, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            slotSwapEntity: slotSwapEntity,
            slot: slot,
            options: options
        }, applySlotConfigurationSlotOperationSpec, callback);
    };
    WebApps.prototype.backupSlot = function (resourceGroupName, name, request, slot, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            request: request,
            slot: slot,
            options: options
        }, backupSlotOperationSpec, callback);
    };
    WebApps.prototype.listBackupsSlot = function (resourceGroupName, name, slot, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            slot: slot,
            options: options
        }, listBackupsSlotOperationSpec, callback);
    };
    WebApps.prototype.getBackupStatusSlot = function (resourceGroupName, name, backupId, slot, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            backupId: backupId,
            slot: slot,
            options: options
        }, getBackupStatusSlotOperationSpec, callback);
    };
    WebApps.prototype.deleteBackupSlot = function (resourceGroupName, name, backupId, slot, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            backupId: backupId,
            slot: slot,
            options: options
        }, deleteBackupSlotOperationSpec, callback);
    };
    WebApps.prototype.listBackupStatusSecretsSlot = function (resourceGroupName, name, backupId, request, slot, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            backupId: backupId,
            request: request,
            slot: slot,
            options: options
        }, listBackupStatusSecretsSlotOperationSpec, callback);
    };
    /**
     * Restores a specific backup to another app (or deployment slot, if specified).
     * @summary Restores a specific backup to another app (or deployment slot, if specified).
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param backupId ID of the backup.
     * @param request Information on restore request .
     * @param slot Name of the deployment slot. If a slot is not specified, the API will restore a
     * backup of the production slot.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    WebApps.prototype.restoreSlot = function (resourceGroupName, name, backupId, request, slot, options) {
        return this.beginRestoreSlot(resourceGroupName, name, backupId, request, slot, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    WebApps.prototype.listConfigurationsSlot = function (resourceGroupName, name, slot, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            slot: slot,
            options: options
        }, listConfigurationsSlotOperationSpec, callback);
    };
    WebApps.prototype.updateApplicationSettingsSlot = function (resourceGroupName, name, appSettings, slot, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            appSettings: appSettings,
            slot: slot,
            options: options
        }, updateApplicationSettingsSlotOperationSpec, callback);
    };
    WebApps.prototype.listApplicationSettingsSlot = function (resourceGroupName, name, slot, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            slot: slot,
            options: options
        }, listApplicationSettingsSlotOperationSpec, callback);
    };
    WebApps.prototype.updateAuthSettingsSlot = function (resourceGroupName, name, siteAuthSettings, slot, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            siteAuthSettings: siteAuthSettings,
            slot: slot,
            options: options
        }, updateAuthSettingsSlotOperationSpec, callback);
    };
    WebApps.prototype.getAuthSettingsSlot = function (resourceGroupName, name, slot, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            slot: slot,
            options: options
        }, getAuthSettingsSlotOperationSpec, callback);
    };
    WebApps.prototype.updateAzureStorageAccountsSlot = function (resourceGroupName, name, azureStorageAccounts, slot, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            azureStorageAccounts: azureStorageAccounts,
            slot: slot,
            options: options
        }, updateAzureStorageAccountsSlotOperationSpec, callback);
    };
    WebApps.prototype.listAzureStorageAccountsSlot = function (resourceGroupName, name, slot, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            slot: slot,
            options: options
        }, listAzureStorageAccountsSlotOperationSpec, callback);
    };
    WebApps.prototype.updateBackupConfigurationSlot = function (resourceGroupName, name, request, slot, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            request: request,
            slot: slot,
            options: options
        }, updateBackupConfigurationSlotOperationSpec, callback);
    };
    WebApps.prototype.deleteBackupConfigurationSlot = function (resourceGroupName, name, slot, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            slot: slot,
            options: options
        }, deleteBackupConfigurationSlotOperationSpec, callback);
    };
    WebApps.prototype.getBackupConfigurationSlot = function (resourceGroupName, name, slot, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            slot: slot,
            options: options
        }, getBackupConfigurationSlotOperationSpec, callback);
    };
    WebApps.prototype.updateConnectionStringsSlot = function (resourceGroupName, name, connectionStrings, slot, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            connectionStrings: connectionStrings,
            slot: slot,
            options: options
        }, updateConnectionStringsSlotOperationSpec, callback);
    };
    WebApps.prototype.listConnectionStringsSlot = function (resourceGroupName, name, slot, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            slot: slot,
            options: options
        }, listConnectionStringsSlotOperationSpec, callback);
    };
    WebApps.prototype.getDiagnosticLogsConfigurationSlot = function (resourceGroupName, name, slot, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            slot: slot,
            options: options
        }, getDiagnosticLogsConfigurationSlotOperationSpec, callback);
    };
    WebApps.prototype.updateDiagnosticLogsConfigSlot = function (resourceGroupName, name, siteLogsConfig, slot, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            siteLogsConfig: siteLogsConfig,
            slot: slot,
            options: options
        }, updateDiagnosticLogsConfigSlotOperationSpec, callback);
    };
    WebApps.prototype.updateMetadataSlot = function (resourceGroupName, name, metadata, slot, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            metadata: metadata,
            slot: slot,
            options: options
        }, updateMetadataSlotOperationSpec, callback);
    };
    WebApps.prototype.listMetadataSlot = function (resourceGroupName, name, slot, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            slot: slot,
            options: options
        }, listMetadataSlotOperationSpec, callback);
    };
    /**
     * Gets the Git/FTP publishing credentials of an app.
     * @summary Gets the Git/FTP publishing credentials of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get the
     * publishing credentials for the production slot.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsListPublishingCredentialsSlotResponse>
     */
    WebApps.prototype.listPublishingCredentialsSlot = function (resourceGroupName, name, slot, options) {
        return this.beginListPublishingCredentialsSlot(resourceGroupName, name, slot, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    WebApps.prototype.updateSitePushSettingsSlot = function (resourceGroupName, name, pushSettings, slot, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            pushSettings: pushSettings,
            slot: slot,
            options: options
        }, updateSitePushSettingsSlotOperationSpec, callback);
    };
    WebApps.prototype.listSitePushSettingsSlot = function (resourceGroupName, name, slot, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            slot: slot,
            options: options
        }, listSitePushSettingsSlotOperationSpec, callback);
    };
    WebApps.prototype.getConfigurationSlot = function (resourceGroupName, name, slot, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            slot: slot,
            options: options
        }, getConfigurationSlotOperationSpec, callback);
    };
    WebApps.prototype.createOrUpdateConfigurationSlot = function (resourceGroupName, name, siteConfig, slot, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            siteConfig: siteConfig,
            slot: slot,
            options: options
        }, createOrUpdateConfigurationSlotOperationSpec, callback);
    };
    WebApps.prototype.updateConfigurationSlot = function (resourceGroupName, name, siteConfig, slot, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            siteConfig: siteConfig,
            slot: slot,
            options: options
        }, updateConfigurationSlotOperationSpec, callback);
    };
    WebApps.prototype.listConfigurationSnapshotInfoSlot = function (resourceGroupName, name, slot, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            slot: slot,
            options: options
        }, listConfigurationSnapshotInfoSlotOperationSpec, callback);
    };
    WebApps.prototype.getConfigurationSnapshotSlot = function (resourceGroupName, name, snapshotId, slot, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            snapshotId: snapshotId,
            slot: slot,
            options: options
        }, getConfigurationSnapshotSlotOperationSpec, callback);
    };
    WebApps.prototype.recoverSiteConfigurationSnapshotSlot = function (resourceGroupName, name, snapshotId, slot, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            snapshotId: snapshotId,
            slot: slot,
            options: options
        }, recoverSiteConfigurationSnapshotSlotOperationSpec, callback);
    };
    WebApps.prototype.getWebSiteContainerLogsSlot = function (resourceGroupName, name, slot, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            slot: slot,
            options: options
        }, getWebSiteContainerLogsSlotOperationSpec, callback);
    };
    WebApps.prototype.getContainerLogsZipSlot = function (resourceGroupName, name, slot, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            slot: slot,
            options: options
        }, getContainerLogsZipSlotOperationSpec, callback);
    };
    WebApps.prototype.listContinuousWebJobsSlot = function (resourceGroupName, name, slot, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            slot: slot,
            options: options
        }, listContinuousWebJobsSlotOperationSpec, callback);
    };
    WebApps.prototype.getContinuousWebJobSlot = function (resourceGroupName, name, webJobName, slot, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            webJobName: webJobName,
            slot: slot,
            options: options
        }, getContinuousWebJobSlotOperationSpec, callback);
    };
    WebApps.prototype.deleteContinuousWebJobSlot = function (resourceGroupName, name, webJobName, slot, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            webJobName: webJobName,
            slot: slot,
            options: options
        }, deleteContinuousWebJobSlotOperationSpec, callback);
    };
    WebApps.prototype.startContinuousWebJobSlot = function (resourceGroupName, name, webJobName, slot, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            webJobName: webJobName,
            slot: slot,
            options: options
        }, startContinuousWebJobSlotOperationSpec, callback);
    };
    WebApps.prototype.stopContinuousWebJobSlot = function (resourceGroupName, name, webJobName, slot, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            webJobName: webJobName,
            slot: slot,
            options: options
        }, stopContinuousWebJobSlotOperationSpec, callback);
    };
    WebApps.prototype.listDeploymentsSlot = function (resourceGroupName, name, slot, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            slot: slot,
            options: options
        }, listDeploymentsSlotOperationSpec, callback);
    };
    WebApps.prototype.getDeploymentSlot = function (resourceGroupName, name, id, slot, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            id: id,
            slot: slot,
            options: options
        }, getDeploymentSlotOperationSpec, callback);
    };
    WebApps.prototype.createDeploymentSlot = function (resourceGroupName, name, id, slot, deployment, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            id: id,
            slot: slot,
            deployment: deployment,
            options: options
        }, createDeploymentSlotOperationSpec, callback);
    };
    WebApps.prototype.deleteDeploymentSlot = function (resourceGroupName, name, id, slot, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            id: id,
            slot: slot,
            options: options
        }, deleteDeploymentSlotOperationSpec, callback);
    };
    WebApps.prototype.listDeploymentLogSlot = function (resourceGroupName, name, id, slot, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            id: id,
            slot: slot,
            options: options
        }, listDeploymentLogSlotOperationSpec, callback);
    };
    WebApps.prototype.discoverBackupSlot = function (resourceGroupName, name, request, slot, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            request: request,
            slot: slot,
            options: options
        }, discoverBackupSlotOperationSpec, callback);
    };
    WebApps.prototype.listDomainOwnershipIdentifiersSlot = function (resourceGroupName, name, slot, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            slot: slot,
            options: options
        }, listDomainOwnershipIdentifiersSlotOperationSpec, callback);
    };
    WebApps.prototype.getDomainOwnershipIdentifierSlot = function (resourceGroupName, name, domainOwnershipIdentifierName, slot, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            domainOwnershipIdentifierName: domainOwnershipIdentifierName,
            slot: slot,
            options: options
        }, getDomainOwnershipIdentifierSlotOperationSpec, callback);
    };
    WebApps.prototype.createOrUpdateDomainOwnershipIdentifierSlot = function (resourceGroupName, name, domainOwnershipIdentifierName, domainOwnershipIdentifier, slot, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            domainOwnershipIdentifierName: domainOwnershipIdentifierName,
            domainOwnershipIdentifier: domainOwnershipIdentifier,
            slot: slot,
            options: options
        }, createOrUpdateDomainOwnershipIdentifierSlotOperationSpec, callback);
    };
    WebApps.prototype.deleteDomainOwnershipIdentifierSlot = function (resourceGroupName, name, domainOwnershipIdentifierName, slot, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            domainOwnershipIdentifierName: domainOwnershipIdentifierName,
            slot: slot,
            options: options
        }, deleteDomainOwnershipIdentifierSlotOperationSpec, callback);
    };
    WebApps.prototype.updateDomainOwnershipIdentifierSlot = function (resourceGroupName, name, domainOwnershipIdentifierName, domainOwnershipIdentifier, slot, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            domainOwnershipIdentifierName: domainOwnershipIdentifierName,
            domainOwnershipIdentifier: domainOwnershipIdentifier,
            slot: slot,
            options: options
        }, updateDomainOwnershipIdentifierSlotOperationSpec, callback);
    };
    WebApps.prototype.getMSDeployStatusSlot = function (resourceGroupName, name, slot, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            slot: slot,
            options: options
        }, getMSDeployStatusSlotOperationSpec, callback);
    };
    /**
     * Invoke the MSDeploy web app extension.
     * @summary Invoke the MSDeploy web app extension.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param mSDeploy Details of MSDeploy operation
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsCreateMSDeployOperationSlotResponse>
     */
    WebApps.prototype.createMSDeployOperationSlot = function (resourceGroupName, name, slot, mSDeploy, options) {
        return this.beginCreateMSDeployOperationSlot(resourceGroupName, name, slot, mSDeploy, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    WebApps.prototype.getMSDeployLogSlot = function (resourceGroupName, name, slot, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            slot: slot,
            options: options
        }, getMSDeployLogSlotOperationSpec, callback);
    };
    WebApps.prototype.listInstanceFunctionsSlot = function (resourceGroupName, name, slot, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            slot: slot,
            options: options
        }, listInstanceFunctionsSlotOperationSpec, callback);
    };
    WebApps.prototype.getFunctionsAdminTokenSlot = function (resourceGroupName, name, slot, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            slot: slot,
            options: options
        }, getFunctionsAdminTokenSlotOperationSpec, callback);
    };
    WebApps.prototype.getInstanceFunctionSlot = function (resourceGroupName, name, functionName, slot, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            functionName: functionName,
            slot: slot,
            options: options
        }, getInstanceFunctionSlotOperationSpec, callback);
    };
    /**
     * Create function for web site, or a deployment slot.
     * @summary Create function for web site, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param functionName Function name.
     * @param slot Name of the deployment slot. If a slot is not specified, the API deletes a
     * deployment for the production slot.
     * @param functionEnvelope Function details.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsCreateInstanceFunctionSlotResponse>
     */
    WebApps.prototype.createInstanceFunctionSlot = function (resourceGroupName, name, functionName, slot, functionEnvelope, options) {
        return this.beginCreateInstanceFunctionSlot(resourceGroupName, name, functionName, slot, functionEnvelope, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    WebApps.prototype.deleteInstanceFunctionSlot = function (resourceGroupName, name, functionName, slot, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            functionName: functionName,
            slot: slot,
            options: options
        }, deleteInstanceFunctionSlotOperationSpec, callback);
    };
    WebApps.prototype.listFunctionSecretsSlot = function (resourceGroupName, name, functionName, slot, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            functionName: functionName,
            slot: slot,
            options: options
        }, listFunctionSecretsSlotOperationSpec, callback);
    };
    WebApps.prototype.listHostNameBindingsSlot = function (resourceGroupName, name, slot, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            slot: slot,
            options: options
        }, listHostNameBindingsSlotOperationSpec, callback);
    };
    WebApps.prototype.getHostNameBindingSlot = function (resourceGroupName, name, slot, hostName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            slot: slot,
            hostName: hostName,
            options: options
        }, getHostNameBindingSlotOperationSpec, callback);
    };
    WebApps.prototype.createOrUpdateHostNameBindingSlot = function (resourceGroupName, name, hostName, hostNameBinding, slot, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            hostName: hostName,
            hostNameBinding: hostNameBinding,
            slot: slot,
            options: options
        }, createOrUpdateHostNameBindingSlotOperationSpec, callback);
    };
    WebApps.prototype.deleteHostNameBindingSlot = function (resourceGroupName, name, slot, hostName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            slot: slot,
            hostName: hostName,
            options: options
        }, deleteHostNameBindingSlotOperationSpec, callback);
    };
    WebApps.prototype.getHybridConnectionSlot = function (resourceGroupName, name, namespaceName, relayName, slot, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            namespaceName: namespaceName,
            relayName: relayName,
            slot: slot,
            options: options
        }, getHybridConnectionSlotOperationSpec, callback);
    };
    WebApps.prototype.createOrUpdateHybridConnectionSlot = function (resourceGroupName, name, namespaceName, relayName, connectionEnvelope, slot, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            namespaceName: namespaceName,
            relayName: relayName,
            connectionEnvelope: connectionEnvelope,
            slot: slot,
            options: options
        }, createOrUpdateHybridConnectionSlotOperationSpec, callback);
    };
    WebApps.prototype.deleteHybridConnectionSlot = function (resourceGroupName, name, namespaceName, relayName, slot, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            namespaceName: namespaceName,
            relayName: relayName,
            slot: slot,
            options: options
        }, deleteHybridConnectionSlotOperationSpec, callback);
    };
    WebApps.prototype.updateHybridConnectionSlot = function (resourceGroupName, name, namespaceName, relayName, connectionEnvelope, slot, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            namespaceName: namespaceName,
            relayName: relayName,
            connectionEnvelope: connectionEnvelope,
            slot: slot,
            options: options
        }, updateHybridConnectionSlotOperationSpec, callback);
    };
    WebApps.prototype.listHybridConnectionKeysSlot = function (resourceGroupName, name, namespaceName, relayName, slot, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            namespaceName: namespaceName,
            relayName: relayName,
            slot: slot,
            options: options
        }, listHybridConnectionKeysSlotOperationSpec, callback);
    };
    WebApps.prototype.listHybridConnectionsSlot = function (resourceGroupName, name, slot, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            slot: slot,
            options: options
        }, listHybridConnectionsSlotOperationSpec, callback);
    };
    WebApps.prototype.listRelayServiceConnectionsSlot = function (resourceGroupName, name, slot, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            slot: slot,
            options: options
        }, listRelayServiceConnectionsSlotOperationSpec, callback);
    };
    WebApps.prototype.getRelayServiceConnectionSlot = function (resourceGroupName, name, entityName, slot, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            entityName: entityName,
            slot: slot,
            options: options
        }, getRelayServiceConnectionSlotOperationSpec, callback);
    };
    WebApps.prototype.createOrUpdateRelayServiceConnectionSlot = function (resourceGroupName, name, entityName, connectionEnvelope, slot, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            entityName: entityName,
            connectionEnvelope: connectionEnvelope,
            slot: slot,
            options: options
        }, createOrUpdateRelayServiceConnectionSlotOperationSpec, callback);
    };
    WebApps.prototype.deleteRelayServiceConnectionSlot = function (resourceGroupName, name, entityName, slot, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            entityName: entityName,
            slot: slot,
            options: options
        }, deleteRelayServiceConnectionSlotOperationSpec, callback);
    };
    WebApps.prototype.updateRelayServiceConnectionSlot = function (resourceGroupName, name, entityName, connectionEnvelope, slot, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            entityName: entityName,
            connectionEnvelope: connectionEnvelope,
            slot: slot,
            options: options
        }, updateRelayServiceConnectionSlotOperationSpec, callback);
    };
    WebApps.prototype.listInstanceIdentifiersSlot = function (resourceGroupName, name, slot, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            slot: slot,
            options: options
        }, listInstanceIdentifiersSlotOperationSpec, callback);
    };
    WebApps.prototype.getInstanceMsDeployStatusSlot = function (resourceGroupName, name, slot, instanceId, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            slot: slot,
            instanceId: instanceId,
            options: options
        }, getInstanceMsDeployStatusSlotOperationSpec, callback);
    };
    /**
     * Invoke the MSDeploy web app extension.
     * @summary Invoke the MSDeploy web app extension.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param instanceId ID of web app instance.
     * @param mSDeploy Details of MSDeploy operation
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsCreateInstanceMSDeployOperationSlotResponse>
     */
    WebApps.prototype.createInstanceMSDeployOperationSlot = function (resourceGroupName, name, slot, instanceId, mSDeploy, options) {
        return this.beginCreateInstanceMSDeployOperationSlot(resourceGroupName, name, slot, instanceId, mSDeploy, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    WebApps.prototype.getInstanceMSDeployLogSlot = function (resourceGroupName, name, slot, instanceId, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            slot: slot,
            instanceId: instanceId,
            options: options
        }, getInstanceMSDeployLogSlotOperationSpec, callback);
    };
    WebApps.prototype.listInstanceProcessesSlot = function (resourceGroupName, name, slot, instanceId, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            slot: slot,
            instanceId: instanceId,
            options: options
        }, listInstanceProcessesSlotOperationSpec, callback);
    };
    WebApps.prototype.getInstanceProcessSlot = function (resourceGroupName, name, processId, slot, instanceId, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            processId: processId,
            slot: slot,
            instanceId: instanceId,
            options: options
        }, getInstanceProcessSlotOperationSpec, callback);
    };
    WebApps.prototype.deleteInstanceProcessSlot = function (resourceGroupName, name, processId, slot, instanceId, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            processId: processId,
            slot: slot,
            instanceId: instanceId,
            options: options
        }, deleteInstanceProcessSlotOperationSpec, callback);
    };
    WebApps.prototype.getInstanceProcessDumpSlot = function (resourceGroupName, name, processId, slot, instanceId, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            processId: processId,
            slot: slot,
            instanceId: instanceId,
            options: options
        }, getInstanceProcessDumpSlotOperationSpec, callback);
    };
    WebApps.prototype.listInstanceProcessModulesSlot = function (resourceGroupName, name, processId, slot, instanceId, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            processId: processId,
            slot: slot,
            instanceId: instanceId,
            options: options
        }, listInstanceProcessModulesSlotOperationSpec, callback);
    };
    WebApps.prototype.getInstanceProcessModuleSlot = function (resourceGroupName, name, processId, baseAddress, slot, instanceId, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            processId: processId,
            baseAddress: baseAddress,
            slot: slot,
            instanceId: instanceId,
            options: options
        }, getInstanceProcessModuleSlotOperationSpec, callback);
    };
    WebApps.prototype.listInstanceProcessThreadsSlot = function (resourceGroupName, name, processId, slot, instanceId, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            processId: processId,
            slot: slot,
            instanceId: instanceId,
            options: options
        }, listInstanceProcessThreadsSlotOperationSpec, callback);
    };
    WebApps.prototype.getInstanceProcessThreadSlot = function (resourceGroupName, name, processId, threadId, slot, instanceId, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            processId: processId,
            threadId: threadId,
            slot: slot,
            instanceId: instanceId,
            options: options
        }, getInstanceProcessThreadSlotOperationSpec, callback);
    };
    WebApps.prototype.isCloneableSlot = function (resourceGroupName, name, slot, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            slot: slot,
            options: options
        }, isCloneableSlotOperationSpec, callback);
    };
    WebApps.prototype.listSyncFunctionTriggersSlot = function (resourceGroupName, name, slot, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            slot: slot,
            options: options
        }, listSyncFunctionTriggersSlotOperationSpec, callback);
    };
    WebApps.prototype.listMetricDefinitionsSlot = function (resourceGroupName, name, slot, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            slot: slot,
            options: options
        }, listMetricDefinitionsSlotOperationSpec, callback);
    };
    WebApps.prototype.listMetricsSlot = function (resourceGroupName, name, slot, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            slot: slot,
            options: options
        }, listMetricsSlotOperationSpec, callback);
    };
    WebApps.prototype.getMigrateMySqlStatusSlot = function (resourceGroupName, name, slot, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            slot: slot,
            options: options
        }, getMigrateMySqlStatusSlotOperationSpec, callback);
    };
    WebApps.prototype.getSwiftVirtualNetworkConnectionSlot = function (resourceGroupName, name, slot, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            slot: slot,
            options: options
        }, getSwiftVirtualNetworkConnectionSlotOperationSpec, callback);
    };
    WebApps.prototype.createOrUpdateSwiftVirtualNetworkConnectionSlot = function (resourceGroupName, name, connectionEnvelope, slot, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            connectionEnvelope: connectionEnvelope,
            slot: slot,
            options: options
        }, createOrUpdateSwiftVirtualNetworkConnectionSlotOperationSpec, callback);
    };
    WebApps.prototype.deleteSwiftVirtualNetworkSlot = function (resourceGroupName, name, slot, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            slot: slot,
            options: options
        }, deleteSwiftVirtualNetworkSlotOperationSpec, callback);
    };
    WebApps.prototype.updateSwiftVirtualNetworkConnectionSlot = function (resourceGroupName, name, connectionEnvelope, slot, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            connectionEnvelope: connectionEnvelope,
            slot: slot,
            options: options
        }, updateSwiftVirtualNetworkConnectionSlotOperationSpec, callback);
    };
    WebApps.prototype.listNetworkFeaturesSlot = function (resourceGroupName, name, view, slot, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            view: view,
            slot: slot,
            options: options
        }, listNetworkFeaturesSlotOperationSpec, callback);
    };
    WebApps.prototype.getNetworkTraceOperationSlot = function (resourceGroupName, name, operationId, slot, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            operationId: operationId,
            slot: slot,
            options: options
        }, getNetworkTraceOperationSlotOperationSpec, callback);
    };
    WebApps.prototype.startWebSiteNetworkTraceSlot = function (resourceGroupName, name, slot, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            slot: slot,
            options: options
        }, startWebSiteNetworkTraceSlotOperationSpec, callback);
    };
    /**
     * Start capturing network packets for the site.
     * @summary Start capturing network packets for the site.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name The name of the web app.
     * @param slot The name of the slot for this web app.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsStartWebSiteNetworkTraceOperationSlotResponse>
     */
    WebApps.prototype.startWebSiteNetworkTraceOperationSlot = function (resourceGroupName, name, slot, options) {
        return this.beginStartWebSiteNetworkTraceOperationSlot(resourceGroupName, name, slot, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    WebApps.prototype.stopWebSiteNetworkTraceSlot = function (resourceGroupName, name, slot, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            slot: slot,
            options: options
        }, stopWebSiteNetworkTraceSlotOperationSpec, callback);
    };
    WebApps.prototype.getNetworkTracesSlot = function (resourceGroupName, name, operationId, slot, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            operationId: operationId,
            slot: slot,
            options: options
        }, getNetworkTracesSlotOperationSpec, callback);
    };
    WebApps.prototype.getNetworkTraceOperationSlotV2 = function (resourceGroupName, name, operationId, slot, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            operationId: operationId,
            slot: slot,
            options: options
        }, getNetworkTraceOperationSlotV2OperationSpec, callback);
    };
    WebApps.prototype.getNetworkTracesSlotV2 = function (resourceGroupName, name, operationId, slot, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            operationId: operationId,
            slot: slot,
            options: options
        }, getNetworkTracesSlotV2OperationSpec, callback);
    };
    WebApps.prototype.generateNewSitePublishingPasswordSlot = function (resourceGroupName, name, slot, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            slot: slot,
            options: options
        }, generateNewSitePublishingPasswordSlotOperationSpec, callback);
    };
    WebApps.prototype.listPerfMonCountersSlot = function (resourceGroupName, name, slot, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            slot: slot,
            options: options
        }, listPerfMonCountersSlotOperationSpec, callback);
    };
    WebApps.prototype.getSitePhpErrorLogFlagSlot = function (resourceGroupName, name, slot, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            slot: slot,
            options: options
        }, getSitePhpErrorLogFlagSlotOperationSpec, callback);
    };
    WebApps.prototype.listPremierAddOnsSlot = function (resourceGroupName, name, slot, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            slot: slot,
            options: options
        }, listPremierAddOnsSlotOperationSpec, callback);
    };
    WebApps.prototype.getPremierAddOnSlot = function (resourceGroupName, name, premierAddOnName, slot, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            premierAddOnName: premierAddOnName,
            slot: slot,
            options: options
        }, getPremierAddOnSlotOperationSpec, callback);
    };
    WebApps.prototype.addPremierAddOnSlot = function (resourceGroupName, name, premierAddOnName, premierAddOn, slot, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            premierAddOnName: premierAddOnName,
            premierAddOn: premierAddOn,
            slot: slot,
            options: options
        }, addPremierAddOnSlotOperationSpec, callback);
    };
    WebApps.prototype.deletePremierAddOnSlot = function (resourceGroupName, name, premierAddOnName, slot, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            premierAddOnName: premierAddOnName,
            slot: slot,
            options: options
        }, deletePremierAddOnSlotOperationSpec, callback);
    };
    WebApps.prototype.updatePremierAddOnSlot = function (resourceGroupName, name, premierAddOnName, premierAddOn, slot, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            premierAddOnName: premierAddOnName,
            premierAddOn: premierAddOn,
            slot: slot,
            options: options
        }, updatePremierAddOnSlotOperationSpec, callback);
    };
    WebApps.prototype.getPrivateAccessSlot = function (resourceGroupName, name, slot, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            slot: slot,
            options: options
        }, getPrivateAccessSlotOperationSpec, callback);
    };
    WebApps.prototype.putPrivateAccessVnetSlot = function (resourceGroupName, name, access, slot, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            access: access,
            slot: slot,
            options: options
        }, putPrivateAccessVnetSlotOperationSpec, callback);
    };
    WebApps.prototype.listProcessesSlot = function (resourceGroupName, name, slot, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            slot: slot,
            options: options
        }, listProcessesSlotOperationSpec, callback);
    };
    WebApps.prototype.getProcessSlot = function (resourceGroupName, name, processId, slot, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            processId: processId,
            slot: slot,
            options: options
        }, getProcessSlotOperationSpec, callback);
    };
    WebApps.prototype.deleteProcessSlot = function (resourceGroupName, name, processId, slot, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            processId: processId,
            slot: slot,
            options: options
        }, deleteProcessSlotOperationSpec, callback);
    };
    WebApps.prototype.getProcessDumpSlot = function (resourceGroupName, name, processId, slot, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            processId: processId,
            slot: slot,
            options: options
        }, getProcessDumpSlotOperationSpec, callback);
    };
    WebApps.prototype.listProcessModulesSlot = function (resourceGroupName, name, processId, slot, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            processId: processId,
            slot: slot,
            options: options
        }, listProcessModulesSlotOperationSpec, callback);
    };
    WebApps.prototype.getProcessModuleSlot = function (resourceGroupName, name, processId, baseAddress, slot, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            processId: processId,
            baseAddress: baseAddress,
            slot: slot,
            options: options
        }, getProcessModuleSlotOperationSpec, callback);
    };
    WebApps.prototype.listProcessThreadsSlot = function (resourceGroupName, name, processId, slot, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            processId: processId,
            slot: slot,
            options: options
        }, listProcessThreadsSlotOperationSpec, callback);
    };
    WebApps.prototype.getProcessThreadSlot = function (resourceGroupName, name, processId, threadId, slot, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            processId: processId,
            threadId: threadId,
            slot: slot,
            options: options
        }, getProcessThreadSlotOperationSpec, callback);
    };
    WebApps.prototype.listPublicCertificatesSlot = function (resourceGroupName, name, slot, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            slot: slot,
            options: options
        }, listPublicCertificatesSlotOperationSpec, callback);
    };
    WebApps.prototype.getPublicCertificateSlot = function (resourceGroupName, name, slot, publicCertificateName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            slot: slot,
            publicCertificateName: publicCertificateName,
            options: options
        }, getPublicCertificateSlotOperationSpec, callback);
    };
    WebApps.prototype.createOrUpdatePublicCertificateSlot = function (resourceGroupName, name, publicCertificateName, publicCertificate, slot, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            publicCertificateName: publicCertificateName,
            publicCertificate: publicCertificate,
            slot: slot,
            options: options
        }, createOrUpdatePublicCertificateSlotOperationSpec, callback);
    };
    WebApps.prototype.deletePublicCertificateSlot = function (resourceGroupName, name, slot, publicCertificateName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            slot: slot,
            publicCertificateName: publicCertificateName,
            options: options
        }, deletePublicCertificateSlotOperationSpec, callback);
    };
    WebApps.prototype.listPublishingProfileXmlWithSecretsSlot = function (resourceGroupName, name, publishingProfileOptions, slot, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            publishingProfileOptions: publishingProfileOptions,
            slot: slot,
            options: options
        }, listPublishingProfileXmlWithSecretsSlotOperationSpec, callback);
    };
    WebApps.prototype.resetSlotConfigurationSlot = function (resourceGroupName, name, slot, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            slot: slot,
            options: options
        }, resetSlotConfigurationSlotOperationSpec, callback);
    };
    WebApps.prototype.restartSlot = function (resourceGroupName, name, slot, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            slot: slot,
            options: options
        }, restartSlotOperationSpec, callback);
    };
    /**
     * Restores an app from a backup blob in Azure Storage.
     * @summary Restores an app from a backup blob in Azure Storage.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param request Information on restore request .
     * @param slot Name of the deployment slot. If a slot is not specified, the API will restore a
     * backup of the production slot.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    WebApps.prototype.restoreFromBackupBlobSlot = function (resourceGroupName, name, request, slot, options) {
        return this.beginRestoreFromBackupBlobSlot(resourceGroupName, name, request, slot, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    /**
     * Restores a deleted web app to this web app.
     * @summary Restores a deleted web app to this web app.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of web app.
     * @param restoreRequest Deleted web app restore information.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    WebApps.prototype.restoreFromDeletedAppSlot = function (resourceGroupName, name, restoreRequest, slot, options) {
        return this.beginRestoreFromDeletedAppSlot(resourceGroupName, name, restoreRequest, slot, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    /**
     * Restores a web app from a snapshot.
     * @summary Restores a web app from a snapshot.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of web app.
     * @param restoreRequest Snapshot restore settings. Snapshot information can be obtained by calling
     * GetDeletedSites or GetSiteSnapshots API.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    WebApps.prototype.restoreSnapshotSlot = function (resourceGroupName, name, restoreRequest, slot, options) {
        return this.beginRestoreSnapshotSlot(resourceGroupName, name, restoreRequest, slot, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    WebApps.prototype.listSiteExtensionsSlot = function (resourceGroupName, name, slot, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            slot: slot,
            options: options
        }, listSiteExtensionsSlotOperationSpec, callback);
    };
    WebApps.prototype.getSiteExtensionSlot = function (resourceGroupName, name, siteExtensionId, slot, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            siteExtensionId: siteExtensionId,
            slot: slot,
            options: options
        }, getSiteExtensionSlotOperationSpec, callback);
    };
    /**
     * Install site extension on a web site, or a deployment slot.
     * @summary Install site extension on a web site, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param siteExtensionId Site extension name.
     * @param slot Name of the deployment slot. If a slot is not specified, the API deletes a
     * deployment for the production slot.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsInstallSiteExtensionSlotResponse>
     */
    WebApps.prototype.installSiteExtensionSlot = function (resourceGroupName, name, siteExtensionId, slot, options) {
        return this.beginInstallSiteExtensionSlot(resourceGroupName, name, siteExtensionId, slot, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    WebApps.prototype.deleteSiteExtensionSlot = function (resourceGroupName, name, siteExtensionId, slot, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            siteExtensionId: siteExtensionId,
            slot: slot,
            options: options
        }, deleteSiteExtensionSlotOperationSpec, callback);
    };
    WebApps.prototype.listSlotDifferencesSlot = function (resourceGroupName, name, slotSwapEntity, slot, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            slotSwapEntity: slotSwapEntity,
            slot: slot,
            options: options
        }, listSlotDifferencesSlotOperationSpec, callback);
    };
    /**
     * Swaps two deployment slots of an app.
     * @summary Swaps two deployment slots of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slotSwapEntity JSON object that contains the target slot name. See example.
     * @param slot Name of the source slot. If a slot is not specified, the production slot is used as
     * the source slot.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    WebApps.prototype.swapSlotSlot = function (resourceGroupName, name, slotSwapEntity, slot, options) {
        return this.beginSwapSlotSlot(resourceGroupName, name, slotSwapEntity, slot, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    WebApps.prototype.listSnapshotsSlot = function (resourceGroupName, name, slot, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            slot: slot,
            options: options
        }, listSnapshotsSlotOperationSpec, callback);
    };
    WebApps.prototype.listSnapshotsFromDRSecondarySlot = function (resourceGroupName, name, slot, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            slot: slot,
            options: options
        }, listSnapshotsFromDRSecondarySlotOperationSpec, callback);
    };
    WebApps.prototype.getSourceControlSlot = function (resourceGroupName, name, slot, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            slot: slot,
            options: options
        }, getSourceControlSlotOperationSpec, callback);
    };
    /**
     * Updates the source control configuration of an app.
     * @summary Updates the source control configuration of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param siteSourceControl JSON representation of a SiteSourceControl object. See example.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will update the
     * source control configuration for the production slot.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsCreateOrUpdateSourceControlSlotResponse>
     */
    WebApps.prototype.createOrUpdateSourceControlSlot = function (resourceGroupName, name, siteSourceControl, slot, options) {
        return this.beginCreateOrUpdateSourceControlSlot(resourceGroupName, name, siteSourceControl, slot, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    WebApps.prototype.deleteSourceControlSlot = function (resourceGroupName, name, slot, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            slot: slot,
            options: options
        }, deleteSourceControlSlotOperationSpec, callback);
    };
    WebApps.prototype.updateSourceControlSlot = function (resourceGroupName, name, siteSourceControl, slot, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            siteSourceControl: siteSourceControl,
            slot: slot,
            options: options
        }, updateSourceControlSlotOperationSpec, callback);
    };
    WebApps.prototype.startSlot = function (resourceGroupName, name, slot, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            slot: slot,
            options: options
        }, startSlotOperationSpec, callback);
    };
    /**
     * Start capturing network packets for the site.
     * @summary Start capturing network packets for the site.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name The name of the web app.
     * @param slot The name of the slot for this web app.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsStartNetworkTraceSlotResponse>
     */
    WebApps.prototype.startNetworkTraceSlot = function (resourceGroupName, name, slot, options) {
        return this.beginStartNetworkTraceSlot(resourceGroupName, name, slot, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    WebApps.prototype.stopSlot = function (resourceGroupName, name, slot, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            slot: slot,
            options: options
        }, stopSlotOperationSpec, callback);
    };
    WebApps.prototype.stopNetworkTraceSlot = function (resourceGroupName, name, slot, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            slot: slot,
            options: options
        }, stopNetworkTraceSlotOperationSpec, callback);
    };
    WebApps.prototype.syncRepositorySlot = function (resourceGroupName, name, slot, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            slot: slot,
            options: options
        }, syncRepositorySlotOperationSpec, callback);
    };
    WebApps.prototype.syncFunctionTriggersSlot = function (resourceGroupName, name, slot, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            slot: slot,
            options: options
        }, syncFunctionTriggersSlotOperationSpec, callback);
    };
    WebApps.prototype.listTriggeredWebJobsSlot = function (resourceGroupName, name, slot, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            slot: slot,
            options: options
        }, listTriggeredWebJobsSlotOperationSpec, callback);
    };
    WebApps.prototype.getTriggeredWebJobSlot = function (resourceGroupName, name, webJobName, slot, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            webJobName: webJobName,
            slot: slot,
            options: options
        }, getTriggeredWebJobSlotOperationSpec, callback);
    };
    WebApps.prototype.deleteTriggeredWebJobSlot = function (resourceGroupName, name, webJobName, slot, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            webJobName: webJobName,
            slot: slot,
            options: options
        }, deleteTriggeredWebJobSlotOperationSpec, callback);
    };
    WebApps.prototype.listTriggeredWebJobHistorySlot = function (resourceGroupName, name, webJobName, slot, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            webJobName: webJobName,
            slot: slot,
            options: options
        }, listTriggeredWebJobHistorySlotOperationSpec, callback);
    };
    WebApps.prototype.getTriggeredWebJobHistorySlot = function (resourceGroupName, name, webJobName, id, slot, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            webJobName: webJobName,
            id: id,
            slot: slot,
            options: options
        }, getTriggeredWebJobHistorySlotOperationSpec, callback);
    };
    WebApps.prototype.runTriggeredWebJobSlot = function (resourceGroupName, name, webJobName, slot, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            webJobName: webJobName,
            slot: slot,
            options: options
        }, runTriggeredWebJobSlotOperationSpec, callback);
    };
    WebApps.prototype.listUsagesSlot = function (resourceGroupName, name, slot, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            slot: slot,
            options: options
        }, listUsagesSlotOperationSpec, callback);
    };
    WebApps.prototype.listVnetConnectionsSlot = function (resourceGroupName, name, slot, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            slot: slot,
            options: options
        }, listVnetConnectionsSlotOperationSpec, callback);
    };
    WebApps.prototype.getVnetConnectionSlot = function (resourceGroupName, name, vnetName, slot, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            vnetName: vnetName,
            slot: slot,
            options: options
        }, getVnetConnectionSlotOperationSpec, callback);
    };
    WebApps.prototype.createOrUpdateVnetConnectionSlot = function (resourceGroupName, name, vnetName, connectionEnvelope, slot, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            vnetName: vnetName,
            connectionEnvelope: connectionEnvelope,
            slot: slot,
            options: options
        }, createOrUpdateVnetConnectionSlotOperationSpec, callback);
    };
    WebApps.prototype.deleteVnetConnectionSlot = function (resourceGroupName, name, vnetName, slot, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            vnetName: vnetName,
            slot: slot,
            options: options
        }, deleteVnetConnectionSlotOperationSpec, callback);
    };
    WebApps.prototype.updateVnetConnectionSlot = function (resourceGroupName, name, vnetName, connectionEnvelope, slot, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            vnetName: vnetName,
            connectionEnvelope: connectionEnvelope,
            slot: slot,
            options: options
        }, updateVnetConnectionSlotOperationSpec, callback);
    };
    WebApps.prototype.getVnetConnectionGatewaySlot = function (resourceGroupName, name, vnetName, gatewayName, slot, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            vnetName: vnetName,
            gatewayName: gatewayName,
            slot: slot,
            options: options
        }, getVnetConnectionGatewaySlotOperationSpec, callback);
    };
    WebApps.prototype.createOrUpdateVnetConnectionGatewaySlot = function (resourceGroupName, name, vnetName, gatewayName, connectionEnvelope, slot, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            vnetName: vnetName,
            gatewayName: gatewayName,
            connectionEnvelope: connectionEnvelope,
            slot: slot,
            options: options
        }, createOrUpdateVnetConnectionGatewaySlotOperationSpec, callback);
    };
    WebApps.prototype.updateVnetConnectionGatewaySlot = function (resourceGroupName, name, vnetName, gatewayName, connectionEnvelope, slot, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            vnetName: vnetName,
            gatewayName: gatewayName,
            connectionEnvelope: connectionEnvelope,
            slot: slot,
            options: options
        }, updateVnetConnectionGatewaySlotOperationSpec, callback);
    };
    WebApps.prototype.listWebJobsSlot = function (resourceGroupName, name, slot, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            slot: slot,
            options: options
        }, listWebJobsSlotOperationSpec, callback);
    };
    WebApps.prototype.getWebJobSlot = function (resourceGroupName, name, webJobName, slot, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            webJobName: webJobName,
            slot: slot,
            options: options
        }, getWebJobSlotOperationSpec, callback);
    };
    WebApps.prototype.listSlotDifferencesFromProduction = function (resourceGroupName, name, slotSwapEntity, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            slotSwapEntity: slotSwapEntity,
            options: options
        }, listSlotDifferencesFromProductionOperationSpec, callback);
    };
    /**
     * Swaps two deployment slots of an app.
     * @summary Swaps two deployment slots of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slotSwapEntity JSON object that contains the target slot name. See example.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    WebApps.prototype.swapSlotWithProduction = function (resourceGroupName, name, slotSwapEntity, options) {
        return this.beginSwapSlotWithProduction(resourceGroupName, name, slotSwapEntity, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    WebApps.prototype.listSnapshots = function (resourceGroupName, name, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            options: options
        }, listSnapshotsOperationSpec, callback);
    };
    WebApps.prototype.listSnapshotsFromDRSecondary = function (resourceGroupName, name, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            options: options
        }, listSnapshotsFromDRSecondaryOperationSpec, callback);
    };
    WebApps.prototype.getSourceControl = function (resourceGroupName, name, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            options: options
        }, getSourceControlOperationSpec, callback);
    };
    /**
     * Updates the source control configuration of an app.
     * @summary Updates the source control configuration of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param siteSourceControl JSON representation of a SiteSourceControl object. See example.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsCreateOrUpdateSourceControlResponse>
     */
    WebApps.prototype.createOrUpdateSourceControl = function (resourceGroupName, name, siteSourceControl, options) {
        return this.beginCreateOrUpdateSourceControl(resourceGroupName, name, siteSourceControl, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    WebApps.prototype.deleteSourceControl = function (resourceGroupName, name, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            options: options
        }, deleteSourceControlOperationSpec, callback);
    };
    WebApps.prototype.updateSourceControl = function (resourceGroupName, name, siteSourceControl, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            siteSourceControl: siteSourceControl,
            options: options
        }, updateSourceControlOperationSpec, callback);
    };
    WebApps.prototype.start = function (resourceGroupName, name, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            options: options
        }, startOperationSpec, callback);
    };
    /**
     * Start capturing network packets for the site.
     * @summary Start capturing network packets for the site.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name The name of the web app.
     * @param [options] The optional parameters
     * @returns Promise<Models.WebAppsStartNetworkTraceResponse>
     */
    WebApps.prototype.startNetworkTrace = function (resourceGroupName, name, options) {
        return this.beginStartNetworkTrace(resourceGroupName, name, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    WebApps.prototype.stop = function (resourceGroupName, name, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            options: options
        }, stopOperationSpec, callback);
    };
    WebApps.prototype.stopNetworkTrace = function (resourceGroupName, name, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            options: options
        }, stopNetworkTraceOperationSpec, callback);
    };
    WebApps.prototype.syncRepository = function (resourceGroupName, name, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            options: options
        }, syncRepositoryOperationSpec, callback);
    };
    WebApps.prototype.syncFunctionTriggers = function (resourceGroupName, name, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            options: options
        }, syncFunctionTriggersOperationSpec, callback);
    };
    WebApps.prototype.listTriggeredWebJobs = function (resourceGroupName, name, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            options: options
        }, listTriggeredWebJobsOperationSpec, callback);
    };
    WebApps.prototype.getTriggeredWebJob = function (resourceGroupName, name, webJobName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            webJobName: webJobName,
            options: options
        }, getTriggeredWebJobOperationSpec, callback);
    };
    WebApps.prototype.deleteTriggeredWebJob = function (resourceGroupName, name, webJobName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            webJobName: webJobName,
            options: options
        }, deleteTriggeredWebJobOperationSpec, callback);
    };
    WebApps.prototype.listTriggeredWebJobHistory = function (resourceGroupName, name, webJobName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            webJobName: webJobName,
            options: options
        }, listTriggeredWebJobHistoryOperationSpec, callback);
    };
    WebApps.prototype.getTriggeredWebJobHistory = function (resourceGroupName, name, webJobName, id, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            webJobName: webJobName,
            id: id,
            options: options
        }, getTriggeredWebJobHistoryOperationSpec, callback);
    };
    WebApps.prototype.runTriggeredWebJob = function (resourceGroupName, name, webJobName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            webJobName: webJobName,
            options: options
        }, runTriggeredWebJobOperationSpec, callback);
    };
    WebApps.prototype.listUsages = function (resourceGroupName, name, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            options: options
        }, listUsagesOperationSpec, callback);
    };
    WebApps.prototype.listVnetConnections = function (resourceGroupName, name, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            options: options
        }, listVnetConnectionsOperationSpec, callback);
    };
    WebApps.prototype.getVnetConnection = function (resourceGroupName, name, vnetName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            vnetName: vnetName,
            options: options
        }, getVnetConnectionOperationSpec, callback);
    };
    WebApps.prototype.createOrUpdateVnetConnection = function (resourceGroupName, name, vnetName, connectionEnvelope, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            vnetName: vnetName,
            connectionEnvelope: connectionEnvelope,
            options: options
        }, createOrUpdateVnetConnectionOperationSpec, callback);
    };
    WebApps.prototype.deleteVnetConnection = function (resourceGroupName, name, vnetName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            vnetName: vnetName,
            options: options
        }, deleteVnetConnectionOperationSpec, callback);
    };
    WebApps.prototype.updateVnetConnection = function (resourceGroupName, name, vnetName, connectionEnvelope, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            vnetName: vnetName,
            connectionEnvelope: connectionEnvelope,
            options: options
        }, updateVnetConnectionOperationSpec, callback);
    };
    WebApps.prototype.getVnetConnectionGateway = function (resourceGroupName, name, vnetName, gatewayName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            vnetName: vnetName,
            gatewayName: gatewayName,
            options: options
        }, getVnetConnectionGatewayOperationSpec, callback);
    };
    WebApps.prototype.createOrUpdateVnetConnectionGateway = function (resourceGroupName, name, vnetName, gatewayName, connectionEnvelope, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            vnetName: vnetName,
            gatewayName: gatewayName,
            connectionEnvelope: connectionEnvelope,
            options: options
        }, createOrUpdateVnetConnectionGatewayOperationSpec, callback);
    };
    WebApps.prototype.updateVnetConnectionGateway = function (resourceGroupName, name, vnetName, gatewayName, connectionEnvelope, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            vnetName: vnetName,
            gatewayName: gatewayName,
            connectionEnvelope: connectionEnvelope,
            options: options
        }, updateVnetConnectionGatewayOperationSpec, callback);
    };
    WebApps.prototype.listWebJobs = function (resourceGroupName, name, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            options: options
        }, listWebJobsOperationSpec, callback);
    };
    WebApps.prototype.getWebJob = function (resourceGroupName, name, webJobName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            webJobName: webJobName,
            options: options
        }, getWebJobOperationSpec, callback);
    };
    /**
     * Creates a new web, mobile, or API app in an existing resource group, or updates an existing app.
     * @summary Creates a new web, mobile, or API app in an existing resource group, or updates an
     * existing app.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Unique name of the app to create or update. To create or update a deployment slot,
     * use the {slot} parameter.
     * @param siteEnvelope A JSON representation of the app properties. See example.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    WebApps.prototype.beginCreateOrUpdate = function (resourceGroupName, name, siteEnvelope, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            name: name,
            siteEnvelope: siteEnvelope,
            options: options
        }, beginCreateOrUpdateOperationSpec, options);
    };
    /**
     * Restores a specific backup to another app (or deployment slot, if specified).
     * @summary Restores a specific backup to another app (or deployment slot, if specified).
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param backupId ID of the backup.
     * @param request Information on restore request .
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    WebApps.prototype.beginRestore = function (resourceGroupName, name, backupId, request, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            name: name,
            backupId: backupId,
            request: request,
            options: options
        }, beginRestoreOperationSpec, options);
    };
    /**
     * Gets the Git/FTP publishing credentials of an app.
     * @summary Gets the Git/FTP publishing credentials of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    WebApps.prototype.beginListPublishingCredentials = function (resourceGroupName, name, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            name: name,
            options: options
        }, beginListPublishingCredentialsOperationSpec, options);
    };
    /**
     * Invoke the MSDeploy web app extension.
     * @summary Invoke the MSDeploy web app extension.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of web app.
     * @param mSDeploy Details of MSDeploy operation
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    WebApps.prototype.beginCreateMSDeployOperation = function (resourceGroupName, name, mSDeploy, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            name: name,
            mSDeploy: mSDeploy,
            options: options
        }, beginCreateMSDeployOperationOperationSpec, options);
    };
    /**
     * Create function for web site, or a deployment slot.
     * @summary Create function for web site, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param functionName Function name.
     * @param functionEnvelope Function details.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    WebApps.prototype.beginCreateFunction = function (resourceGroupName, name, functionName, functionEnvelope, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            name: name,
            functionName: functionName,
            functionEnvelope: functionEnvelope,
            options: options
        }, beginCreateFunctionOperationSpec, options);
    };
    /**
     * Invoke the MSDeploy web app extension.
     * @summary Invoke the MSDeploy web app extension.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of web app.
     * @param instanceId ID of web app instance.
     * @param mSDeploy Details of MSDeploy operation
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    WebApps.prototype.beginCreateInstanceMSDeployOperation = function (resourceGroupName, name, instanceId, mSDeploy, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            name: name,
            instanceId: instanceId,
            mSDeploy: mSDeploy,
            options: options
        }, beginCreateInstanceMSDeployOperationOperationSpec, options);
    };
    /**
     * Restores a web app.
     * @summary Restores a web app.
     * @param subscriptionName Azure subscription.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of web app.
     * @param migrationOptions Migration migrationOptions.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    WebApps.prototype.beginMigrateStorage = function (subscriptionName, resourceGroupName, name, migrationOptions, options) {
        return this.client.sendLRORequest({
            subscriptionName: subscriptionName,
            resourceGroupName: resourceGroupName,
            name: name,
            migrationOptions: migrationOptions,
            options: options
        }, beginMigrateStorageOperationSpec, options);
    };
    /**
     * Migrates a local (in-app) MySql database to a remote MySql database.
     * @summary Migrates a local (in-app) MySql database to a remote MySql database.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of web app.
     * @param migrationRequestEnvelope MySql migration options.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    WebApps.prototype.beginMigrateMySql = function (resourceGroupName, name, migrationRequestEnvelope, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            name: name,
            migrationRequestEnvelope: migrationRequestEnvelope,
            options: options
        }, beginMigrateMySqlOperationSpec, options);
    };
    /**
     * Start capturing network packets for the site.
     * @summary Start capturing network packets for the site.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name The name of the web app.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    WebApps.prototype.beginStartWebSiteNetworkTraceOperation = function (resourceGroupName, name, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            name: name,
            options: options
        }, beginStartWebSiteNetworkTraceOperationOperationSpec, options);
    };
    /**
     * Restores an app from a backup blob in Azure Storage.
     * @summary Restores an app from a backup blob in Azure Storage.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param request Information on restore request .
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    WebApps.prototype.beginRestoreFromBackupBlob = function (resourceGroupName, name, request, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            name: name,
            request: request,
            options: options
        }, beginRestoreFromBackupBlobOperationSpec, options);
    };
    /**
     * Restores a deleted web app to this web app.
     * @summary Restores a deleted web app to this web app.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of web app.
     * @param restoreRequest Deleted web app restore information.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    WebApps.prototype.beginRestoreFromDeletedApp = function (resourceGroupName, name, restoreRequest, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            name: name,
            restoreRequest: restoreRequest,
            options: options
        }, beginRestoreFromDeletedAppOperationSpec, options);
    };
    /**
     * Restores a web app from a snapshot.
     * @summary Restores a web app from a snapshot.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of web app.
     * @param restoreRequest Snapshot restore settings. Snapshot information can be obtained by calling
     * GetDeletedSites or GetSiteSnapshots API.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    WebApps.prototype.beginRestoreSnapshot = function (resourceGroupName, name, restoreRequest, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            name: name,
            restoreRequest: restoreRequest,
            options: options
        }, beginRestoreSnapshotOperationSpec, options);
    };
    /**
     * Install site extension on a web site, or a deployment slot.
     * @summary Install site extension on a web site, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param siteExtensionId Site extension name.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    WebApps.prototype.beginInstallSiteExtension = function (resourceGroupName, name, siteExtensionId, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            name: name,
            siteExtensionId: siteExtensionId,
            options: options
        }, beginInstallSiteExtensionOperationSpec, options);
    };
    /**
     * Creates a new web, mobile, or API app in an existing resource group, or updates an existing app.
     * @summary Creates a new web, mobile, or API app in an existing resource group, or updates an
     * existing app.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Unique name of the app to create or update. To create or update a deployment slot,
     * use the {slot} parameter.
     * @param siteEnvelope A JSON representation of the app properties. See example.
     * @param slot Name of the deployment slot to create or update. By default, this API attempts to
     * create or modify the production slot.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    WebApps.prototype.beginCreateOrUpdateSlot = function (resourceGroupName, name, siteEnvelope, slot, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            name: name,
            siteEnvelope: siteEnvelope,
            slot: slot,
            options: options
        }, beginCreateOrUpdateSlotOperationSpec, options);
    };
    /**
     * Restores a specific backup to another app (or deployment slot, if specified).
     * @summary Restores a specific backup to another app (or deployment slot, if specified).
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param backupId ID of the backup.
     * @param request Information on restore request .
     * @param slot Name of the deployment slot. If a slot is not specified, the API will restore a
     * backup of the production slot.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    WebApps.prototype.beginRestoreSlot = function (resourceGroupName, name, backupId, request, slot, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            name: name,
            backupId: backupId,
            request: request,
            slot: slot,
            options: options
        }, beginRestoreSlotOperationSpec, options);
    };
    /**
     * Gets the Git/FTP publishing credentials of an app.
     * @summary Gets the Git/FTP publishing credentials of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get the
     * publishing credentials for the production slot.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    WebApps.prototype.beginListPublishingCredentialsSlot = function (resourceGroupName, name, slot, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            name: name,
            slot: slot,
            options: options
        }, beginListPublishingCredentialsSlotOperationSpec, options);
    };
    /**
     * Invoke the MSDeploy web app extension.
     * @summary Invoke the MSDeploy web app extension.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param mSDeploy Details of MSDeploy operation
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    WebApps.prototype.beginCreateMSDeployOperationSlot = function (resourceGroupName, name, slot, mSDeploy, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            name: name,
            slot: slot,
            mSDeploy: mSDeploy,
            options: options
        }, beginCreateMSDeployOperationSlotOperationSpec, options);
    };
    /**
     * Create function for web site, or a deployment slot.
     * @summary Create function for web site, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param functionName Function name.
     * @param slot Name of the deployment slot. If a slot is not specified, the API deletes a
     * deployment for the production slot.
     * @param functionEnvelope Function details.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    WebApps.prototype.beginCreateInstanceFunctionSlot = function (resourceGroupName, name, functionName, slot, functionEnvelope, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            name: name,
            functionName: functionName,
            slot: slot,
            functionEnvelope: functionEnvelope,
            options: options
        }, beginCreateInstanceFunctionSlotOperationSpec, options);
    };
    /**
     * Invoke the MSDeploy web app extension.
     * @summary Invoke the MSDeploy web app extension.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param instanceId ID of web app instance.
     * @param mSDeploy Details of MSDeploy operation
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    WebApps.prototype.beginCreateInstanceMSDeployOperationSlot = function (resourceGroupName, name, slot, instanceId, mSDeploy, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            name: name,
            slot: slot,
            instanceId: instanceId,
            mSDeploy: mSDeploy,
            options: options
        }, beginCreateInstanceMSDeployOperationSlotOperationSpec, options);
    };
    /**
     * Start capturing network packets for the site.
     * @summary Start capturing network packets for the site.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name The name of the web app.
     * @param slot The name of the slot for this web app.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    WebApps.prototype.beginStartWebSiteNetworkTraceOperationSlot = function (resourceGroupName, name, slot, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            name: name,
            slot: slot,
            options: options
        }, beginStartWebSiteNetworkTraceOperationSlotOperationSpec, options);
    };
    /**
     * Restores an app from a backup blob in Azure Storage.
     * @summary Restores an app from a backup blob in Azure Storage.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param request Information on restore request .
     * @param slot Name of the deployment slot. If a slot is not specified, the API will restore a
     * backup of the production slot.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    WebApps.prototype.beginRestoreFromBackupBlobSlot = function (resourceGroupName, name, request, slot, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            name: name,
            request: request,
            slot: slot,
            options: options
        }, beginRestoreFromBackupBlobSlotOperationSpec, options);
    };
    /**
     * Restores a deleted web app to this web app.
     * @summary Restores a deleted web app to this web app.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of web app.
     * @param restoreRequest Deleted web app restore information.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    WebApps.prototype.beginRestoreFromDeletedAppSlot = function (resourceGroupName, name, restoreRequest, slot, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            name: name,
            restoreRequest: restoreRequest,
            slot: slot,
            options: options
        }, beginRestoreFromDeletedAppSlotOperationSpec, options);
    };
    /**
     * Restores a web app from a snapshot.
     * @summary Restores a web app from a snapshot.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of web app.
     * @param restoreRequest Snapshot restore settings. Snapshot information can be obtained by calling
     * GetDeletedSites or GetSiteSnapshots API.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    WebApps.prototype.beginRestoreSnapshotSlot = function (resourceGroupName, name, restoreRequest, slot, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            name: name,
            restoreRequest: restoreRequest,
            slot: slot,
            options: options
        }, beginRestoreSnapshotSlotOperationSpec, options);
    };
    /**
     * Install site extension on a web site, or a deployment slot.
     * @summary Install site extension on a web site, or a deployment slot.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param siteExtensionId Site extension name.
     * @param slot Name of the deployment slot. If a slot is not specified, the API deletes a
     * deployment for the production slot.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    WebApps.prototype.beginInstallSiteExtensionSlot = function (resourceGroupName, name, siteExtensionId, slot, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            name: name,
            siteExtensionId: siteExtensionId,
            slot: slot,
            options: options
        }, beginInstallSiteExtensionSlotOperationSpec, options);
    };
    /**
     * Swaps two deployment slots of an app.
     * @summary Swaps two deployment slots of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slotSwapEntity JSON object that contains the target slot name. See example.
     * @param slot Name of the source slot. If a slot is not specified, the production slot is used as
     * the source slot.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    WebApps.prototype.beginSwapSlotSlot = function (resourceGroupName, name, slotSwapEntity, slot, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            name: name,
            slotSwapEntity: slotSwapEntity,
            slot: slot,
            options: options
        }, beginSwapSlotSlotOperationSpec, options);
    };
    /**
     * Updates the source control configuration of an app.
     * @summary Updates the source control configuration of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param siteSourceControl JSON representation of a SiteSourceControl object. See example.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will update the
     * source control configuration for the production slot.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    WebApps.prototype.beginCreateOrUpdateSourceControlSlot = function (resourceGroupName, name, siteSourceControl, slot, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            name: name,
            siteSourceControl: siteSourceControl,
            slot: slot,
            options: options
        }, beginCreateOrUpdateSourceControlSlotOperationSpec, options);
    };
    /**
     * Start capturing network packets for the site.
     * @summary Start capturing network packets for the site.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name The name of the web app.
     * @param slot The name of the slot for this web app.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    WebApps.prototype.beginStartNetworkTraceSlot = function (resourceGroupName, name, slot, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            name: name,
            slot: slot,
            options: options
        }, beginStartNetworkTraceSlotOperationSpec, options);
    };
    /**
     * Swaps two deployment slots of an app.
     * @summary Swaps two deployment slots of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slotSwapEntity JSON object that contains the target slot name. See example.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    WebApps.prototype.beginSwapSlotWithProduction = function (resourceGroupName, name, slotSwapEntity, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            name: name,
            slotSwapEntity: slotSwapEntity,
            options: options
        }, beginSwapSlotWithProductionOperationSpec, options);
    };
    /**
     * Updates the source control configuration of an app.
     * @summary Updates the source control configuration of an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param siteSourceControl JSON representation of a SiteSourceControl object. See example.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    WebApps.prototype.beginCreateOrUpdateSourceControl = function (resourceGroupName, name, siteSourceControl, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            name: name,
            siteSourceControl: siteSourceControl,
            options: options
        }, beginCreateOrUpdateSourceControlOperationSpec, options);
    };
    /**
     * Start capturing network packets for the site.
     * @summary Start capturing network packets for the site.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name The name of the web app.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    WebApps.prototype.beginStartNetworkTrace = function (resourceGroupName, name, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            name: name,
            options: options
        }, beginStartNetworkTraceOperationSpec, options);
    };
    WebApps.prototype.listNext = function (nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, listNextOperationSpec, callback);
    };
    WebApps.prototype.listByResourceGroupNext = function (nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, listByResourceGroupNextOperationSpec, callback);
    };
    WebApps.prototype.listBackupsNext = function (nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, listBackupsNextOperationSpec, callback);
    };
    WebApps.prototype.listConfigurationsNext = function (nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, listConfigurationsNextOperationSpec, callback);
    };
    WebApps.prototype.listConfigurationSnapshotInfoNext = function (nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, listConfigurationSnapshotInfoNextOperationSpec, callback);
    };
    WebApps.prototype.listContinuousWebJobsNext = function (nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, listContinuousWebJobsNextOperationSpec, callback);
    };
    WebApps.prototype.listDeploymentsNext = function (nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, listDeploymentsNextOperationSpec, callback);
    };
    WebApps.prototype.listDomainOwnershipIdentifiersNext = function (nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, listDomainOwnershipIdentifiersNextOperationSpec, callback);
    };
    WebApps.prototype.listFunctionsNext = function (nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, listFunctionsNextOperationSpec, callback);
    };
    WebApps.prototype.listHostNameBindingsNext = function (nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, listHostNameBindingsNextOperationSpec, callback);
    };
    WebApps.prototype.listInstanceIdentifiersNext = function (nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, listInstanceIdentifiersNextOperationSpec, callback);
    };
    WebApps.prototype.listInstanceProcessesNext = function (nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, listInstanceProcessesNextOperationSpec, callback);
    };
    WebApps.prototype.listInstanceProcessModulesNext = function (nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, listInstanceProcessModulesNextOperationSpec, callback);
    };
    WebApps.prototype.listInstanceProcessThreadsNext = function (nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, listInstanceProcessThreadsNextOperationSpec, callback);
    };
    WebApps.prototype.listMetricDefinitionsNext = function (nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, listMetricDefinitionsNextOperationSpec, callback);
    };
    WebApps.prototype.listMetricsNext = function (nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, listMetricsNextOperationSpec, callback);
    };
    WebApps.prototype.listPerfMonCountersNext = function (nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, listPerfMonCountersNextOperationSpec, callback);
    };
    WebApps.prototype.listProcessesNext = function (nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, listProcessesNextOperationSpec, callback);
    };
    WebApps.prototype.listProcessModulesNext = function (nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, listProcessModulesNextOperationSpec, callback);
    };
    WebApps.prototype.listProcessThreadsNext = function (nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, listProcessThreadsNextOperationSpec, callback);
    };
    WebApps.prototype.listPublicCertificatesNext = function (nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, listPublicCertificatesNextOperationSpec, callback);
    };
    WebApps.prototype.listSiteExtensionsNext = function (nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, listSiteExtensionsNextOperationSpec, callback);
    };
    WebApps.prototype.listSlotsNext = function (nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, listSlotsNextOperationSpec, callback);
    };
    WebApps.prototype.listBackupsSlotNext = function (nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, listBackupsSlotNextOperationSpec, callback);
    };
    WebApps.prototype.listConfigurationsSlotNext = function (nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, listConfigurationsSlotNextOperationSpec, callback);
    };
    WebApps.prototype.listConfigurationSnapshotInfoSlotNext = function (nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, listConfigurationSnapshotInfoSlotNextOperationSpec, callback);
    };
    WebApps.prototype.listContinuousWebJobsSlotNext = function (nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, listContinuousWebJobsSlotNextOperationSpec, callback);
    };
    WebApps.prototype.listDeploymentsSlotNext = function (nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, listDeploymentsSlotNextOperationSpec, callback);
    };
    WebApps.prototype.listDomainOwnershipIdentifiersSlotNext = function (nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, listDomainOwnershipIdentifiersSlotNextOperationSpec, callback);
    };
    WebApps.prototype.listInstanceFunctionsSlotNext = function (nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, listInstanceFunctionsSlotNextOperationSpec, callback);
    };
    WebApps.prototype.listHostNameBindingsSlotNext = function (nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, listHostNameBindingsSlotNextOperationSpec, callback);
    };
    WebApps.prototype.listInstanceIdentifiersSlotNext = function (nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, listInstanceIdentifiersSlotNextOperationSpec, callback);
    };
    WebApps.prototype.listInstanceProcessesSlotNext = function (nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, listInstanceProcessesSlotNextOperationSpec, callback);
    };
    WebApps.prototype.listInstanceProcessModulesSlotNext = function (nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, listInstanceProcessModulesSlotNextOperationSpec, callback);
    };
    WebApps.prototype.listInstanceProcessThreadsSlotNext = function (nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, listInstanceProcessThreadsSlotNextOperationSpec, callback);
    };
    WebApps.prototype.listMetricDefinitionsSlotNext = function (nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, listMetricDefinitionsSlotNextOperationSpec, callback);
    };
    WebApps.prototype.listMetricsSlotNext = function (nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, listMetricsSlotNextOperationSpec, callback);
    };
    WebApps.prototype.listPerfMonCountersSlotNext = function (nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, listPerfMonCountersSlotNextOperationSpec, callback);
    };
    WebApps.prototype.listProcessesSlotNext = function (nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, listProcessesSlotNextOperationSpec, callback);
    };
    WebApps.prototype.listProcessModulesSlotNext = function (nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, listProcessModulesSlotNextOperationSpec, callback);
    };
    WebApps.prototype.listProcessThreadsSlotNext = function (nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, listProcessThreadsSlotNextOperationSpec, callback);
    };
    WebApps.prototype.listPublicCertificatesSlotNext = function (nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, listPublicCertificatesSlotNextOperationSpec, callback);
    };
    WebApps.prototype.listSiteExtensionsSlotNext = function (nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, listSiteExtensionsSlotNextOperationSpec, callback);
    };
    WebApps.prototype.listSlotDifferencesSlotNext = function (nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, listSlotDifferencesSlotNextOperationSpec, callback);
    };
    WebApps.prototype.listSnapshotsSlotNext = function (nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, listSnapshotsSlotNextOperationSpec, callback);
    };
    WebApps.prototype.listSnapshotsFromDRSecondarySlotNext = function (nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, listSnapshotsFromDRSecondarySlotNextOperationSpec, callback);
    };
    WebApps.prototype.listTriggeredWebJobsSlotNext = function (nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, listTriggeredWebJobsSlotNextOperationSpec, callback);
    };
    WebApps.prototype.listTriggeredWebJobHistorySlotNext = function (nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, listTriggeredWebJobHistorySlotNextOperationSpec, callback);
    };
    WebApps.prototype.listUsagesSlotNext = function (nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, listUsagesSlotNextOperationSpec, callback);
    };
    WebApps.prototype.listWebJobsSlotNext = function (nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, listWebJobsSlotNextOperationSpec, callback);
    };
    WebApps.prototype.listSlotDifferencesFromProductionNext = function (nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, listSlotDifferencesFromProductionNextOperationSpec, callback);
    };
    WebApps.prototype.listSnapshotsNext = function (nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, listSnapshotsNextOperationSpec, callback);
    };
    WebApps.prototype.listSnapshotsFromDRSecondaryNext = function (nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, listSnapshotsFromDRSecondaryNextOperationSpec, callback);
    };
    WebApps.prototype.listTriggeredWebJobsNext = function (nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, listTriggeredWebJobsNextOperationSpec, callback);
    };
    WebApps.prototype.listTriggeredWebJobHistoryNext = function (nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, listTriggeredWebJobHistoryNextOperationSpec, callback);
    };
    WebApps.prototype.listUsagesNext = function (nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, listUsagesNextOperationSpec, callback);
    };
    WebApps.prototype.listWebJobsNext = function (nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, listWebJobsNextOperationSpec, callback);
    };
    return WebApps;
}());
export { WebApps };
// Operation Specifications
var serializer = new msRest.Serializer(Mappers);
var listOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/providers/Microsoft.Web/sites",
    urlParameters: [
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.WebAppCollection
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var listByResourceGroupOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.includeSlots,
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.WebAppCollection
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var getOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.Site
        },
        404: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var deleteMethodOperationSpec = {
    httpMethod: "DELETE",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.deleteMetrics,
        Parameters.deleteEmptyServerFarm,
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {},
        204: {},
        404: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var updateOperationSpec = {
    httpMethod: "PATCH",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "siteEnvelope",
        mapper: tslib_1.__assign({}, Mappers.SitePatchResource, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.Site
        },
        202: {
            bodyMapper: Mappers.Site
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var analyzeCustomHostnameOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/analyzeCustomHostname",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.hostName0,
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.CustomHostnameAnalysisResult
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var applySlotConfigToProductionOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/applySlotConfig",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "slotSwapEntity",
        mapper: tslib_1.__assign({}, Mappers.CsmSlotEntity, { required: true })
    },
    responses: {
        200: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var backupOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/backup",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "request",
        mapper: tslib_1.__assign({}, Mappers.BackupRequest, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.BackupItem
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var listBackupsOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/backups",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.BackupItemCollection
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var getBackupStatusOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/backups/{backupId}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.backupId,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.BackupItem
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var deleteBackupOperationSpec = {
    httpMethod: "DELETE",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/backups/{backupId}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.backupId,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {},
        404: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var listBackupStatusSecretsOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/backups/{backupId}/list",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.backupId,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "request",
        mapper: tslib_1.__assign({}, Mappers.BackupRequest, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.BackupItem
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var listConfigurationsOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.SiteConfigResourceCollection
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var updateApplicationSettingsOperationSpec = {
    httpMethod: "PUT",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/appsettings",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "appSettings",
        mapper: tslib_1.__assign({}, Mappers.StringDictionary, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.StringDictionary
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var listApplicationSettingsOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/appsettings/list",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.StringDictionary
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var updateAuthSettingsOperationSpec = {
    httpMethod: "PUT",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/authsettings",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "siteAuthSettings",
        mapper: tslib_1.__assign({}, Mappers.SiteAuthSettings, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.SiteAuthSettings
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var getAuthSettingsOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/authsettings/list",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.SiteAuthSettings
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var updateAzureStorageAccountsOperationSpec = {
    httpMethod: "PUT",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/azurestorageaccounts",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "azureStorageAccounts",
        mapper: tslib_1.__assign({}, Mappers.AzureStoragePropertyDictionaryResource, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.AzureStoragePropertyDictionaryResource
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var listAzureStorageAccountsOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/azurestorageaccounts/list",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.AzureStoragePropertyDictionaryResource
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var updateBackupConfigurationOperationSpec = {
    httpMethod: "PUT",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/backup",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "request",
        mapper: tslib_1.__assign({}, Mappers.BackupRequest, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.BackupRequest
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var deleteBackupConfigurationOperationSpec = {
    httpMethod: "DELETE",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/backup",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var getBackupConfigurationOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/backup/list",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.BackupRequest
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var updateConnectionStringsOperationSpec = {
    httpMethod: "PUT",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/connectionstrings",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "connectionStrings",
        mapper: tslib_1.__assign({}, Mappers.ConnectionStringDictionary, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.ConnectionStringDictionary
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var listConnectionStringsOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/connectionstrings/list",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.ConnectionStringDictionary
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var getDiagnosticLogsConfigurationOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/logs",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.SiteLogsConfig
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var updateDiagnosticLogsConfigOperationSpec = {
    httpMethod: "PUT",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/logs",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "siteLogsConfig",
        mapper: tslib_1.__assign({}, Mappers.SiteLogsConfig, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.SiteLogsConfig
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var updateMetadataOperationSpec = {
    httpMethod: "PUT",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/metadata",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "metadata",
        mapper: tslib_1.__assign({}, Mappers.StringDictionary, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.StringDictionary
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var listMetadataOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/metadata/list",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.StringDictionary
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var updateSitePushSettingsOperationSpec = {
    httpMethod: "PUT",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/pushsettings",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "pushSettings",
        mapper: tslib_1.__assign({}, Mappers.PushSettings, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.PushSettings
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var listSitePushSettingsOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/pushsettings/list",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.PushSettings
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var listSlotConfigurationNamesOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/slotConfigNames",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.SlotConfigNamesResource
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var updateSlotConfigurationNamesOperationSpec = {
    httpMethod: "PUT",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/slotConfigNames",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "slotConfigNames",
        mapper: tslib_1.__assign({}, Mappers.SlotConfigNamesResource, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.SlotConfigNamesResource
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var getConfigurationOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/web",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.SiteConfigResource
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var createOrUpdateConfigurationOperationSpec = {
    httpMethod: "PUT",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/web",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "siteConfig",
        mapper: tslib_1.__assign({}, Mappers.SiteConfigResource, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.SiteConfigResource
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var updateConfigurationOperationSpec = {
    httpMethod: "PATCH",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/web",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "siteConfig",
        mapper: tslib_1.__assign({}, Mappers.SiteConfigResource, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.SiteConfigResource
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var listConfigurationSnapshotInfoOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/web/snapshots",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.SiteConfigurationSnapshotInfoCollection
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var getConfigurationSnapshotOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/web/snapshots/{snapshotId}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.snapshotId,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.SiteConfigResource
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var recoverSiteConfigurationSnapshotOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/web/snapshots/{snapshotId}/recover",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.snapshotId,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        204: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var getWebSiteContainerLogsOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/containerlogs",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Stream"
                }
            }
        },
        204: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var getContainerLogsZipOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/containerlogs/zip/download",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Stream"
                }
            }
        },
        204: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var listContinuousWebJobsOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/continuouswebjobs",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.ContinuousWebJobCollection
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var getContinuousWebJobOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/continuouswebjobs/{webJobName}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.webJobName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.ContinuousWebJob
        },
        404: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var deleteContinuousWebJobOperationSpec = {
    httpMethod: "DELETE",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/continuouswebjobs/{webJobName}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.webJobName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {},
        204: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var startContinuousWebJobOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/continuouswebjobs/{webJobName}/start",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.webJobName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {},
        404: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var stopContinuousWebJobOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/continuouswebjobs/{webJobName}/stop",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.webJobName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {},
        404: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var listDeploymentsOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/deployments",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.DeploymentCollection
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var getDeploymentOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/deployments/{id}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.id,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.Deployment
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var createDeploymentOperationSpec = {
    httpMethod: "PUT",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/deployments/{id}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.id,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "deployment",
        mapper: tslib_1.__assign({}, Mappers.Deployment, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.Deployment
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var deleteDeploymentOperationSpec = {
    httpMethod: "DELETE",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/deployments/{id}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.id,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {},
        204: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var listDeploymentLogOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/deployments/{id}/log",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.id,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.Deployment
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var discoverBackupOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/discoverbackup",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "request",
        mapper: tslib_1.__assign({}, Mappers.RestoreRequest, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.RestoreRequest
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var listDomainOwnershipIdentifiersOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/domainOwnershipIdentifiers",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.IdentifierCollection
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var getDomainOwnershipIdentifierOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/domainOwnershipIdentifiers/{domainOwnershipIdentifierName}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.domainOwnershipIdentifierName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.Identifier
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var createOrUpdateDomainOwnershipIdentifierOperationSpec = {
    httpMethod: "PUT",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/domainOwnershipIdentifiers/{domainOwnershipIdentifierName}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.domainOwnershipIdentifierName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "domainOwnershipIdentifier",
        mapper: tslib_1.__assign({}, Mappers.Identifier, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.Identifier
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var deleteDomainOwnershipIdentifierOperationSpec = {
    httpMethod: "DELETE",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/domainOwnershipIdentifiers/{domainOwnershipIdentifierName}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.domainOwnershipIdentifierName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {},
        204: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var updateDomainOwnershipIdentifierOperationSpec = {
    httpMethod: "PATCH",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/domainOwnershipIdentifiers/{domainOwnershipIdentifierName}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.domainOwnershipIdentifierName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "domainOwnershipIdentifier",
        mapper: tslib_1.__assign({}, Mappers.Identifier, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.Identifier
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var getMSDeployStatusOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/extensions/MSDeploy",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.MSDeployStatus
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var getMSDeployLogOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/extensions/MSDeploy/log",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.MSDeployLog
        },
        404: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var listFunctionsOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/functions",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.FunctionEnvelopeCollection
        },
        404: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var getFunctionsAdminTokenOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/functions/admin/token",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "String"
                }
            }
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var getFunctionOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/functions/{functionName}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.functionName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.FunctionEnvelope
        },
        404: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var deleteFunctionOperationSpec = {
    httpMethod: "DELETE",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/functions/{functionName}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.functionName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        204: {},
        404: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var listFunctionSecretsOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/functions/{functionName}/listsecrets",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.functionName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.FunctionSecrets
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var listHostNameBindingsOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hostNameBindings",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.HostNameBindingCollection
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var getHostNameBindingOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hostNameBindings/{hostName}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.hostName1,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.HostNameBinding
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var createOrUpdateHostNameBindingOperationSpec = {
    httpMethod: "PUT",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hostNameBindings/{hostName}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.hostName1,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "hostNameBinding",
        mapper: tslib_1.__assign({}, Mappers.HostNameBinding, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.HostNameBinding
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var deleteHostNameBindingOperationSpec = {
    httpMethod: "DELETE",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hostNameBindings/{hostName}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.hostName1,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {},
        204: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var getHybridConnectionOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hybridConnectionNamespaces/{namespaceName}/relays/{relayName}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.namespaceName,
        Parameters.relayName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.HybridConnection
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var createOrUpdateHybridConnectionOperationSpec = {
    httpMethod: "PUT",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hybridConnectionNamespaces/{namespaceName}/relays/{relayName}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.namespaceName,
        Parameters.relayName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "connectionEnvelope",
        mapper: tslib_1.__assign({}, Mappers.HybridConnection, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.HybridConnection
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var deleteHybridConnectionOperationSpec = {
    httpMethod: "DELETE",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hybridConnectionNamespaces/{namespaceName}/relays/{relayName}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.namespaceName,
        Parameters.relayName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {},
        404: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var updateHybridConnectionOperationSpec = {
    httpMethod: "PATCH",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hybridConnectionNamespaces/{namespaceName}/relays/{relayName}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.namespaceName,
        Parameters.relayName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "connectionEnvelope",
        mapper: tslib_1.__assign({}, Mappers.HybridConnection, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.HybridConnection
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var listHybridConnectionKeysOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hybridConnectionNamespaces/{namespaceName}/relays/{relayName}/listKeys",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.namespaceName,
        Parameters.relayName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.HybridConnectionKey
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var listHybridConnectionsOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hybridConnectionRelays",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.HybridConnection
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var listRelayServiceConnectionsOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hybridconnection",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.RelayServiceConnectionEntity
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var getRelayServiceConnectionOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hybridconnection/{entityName}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.entityName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.RelayServiceConnectionEntity
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var createOrUpdateRelayServiceConnectionOperationSpec = {
    httpMethod: "PUT",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hybridconnection/{entityName}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.entityName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "connectionEnvelope",
        mapper: tslib_1.__assign({}, Mappers.RelayServiceConnectionEntity, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.RelayServiceConnectionEntity
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var deleteRelayServiceConnectionOperationSpec = {
    httpMethod: "DELETE",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hybridconnection/{entityName}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.entityName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {},
        404: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var updateRelayServiceConnectionOperationSpec = {
    httpMethod: "PATCH",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hybridconnection/{entityName}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.entityName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "connectionEnvelope",
        mapper: tslib_1.__assign({}, Mappers.RelayServiceConnectionEntity, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.RelayServiceConnectionEntity
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var listInstanceIdentifiersOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.WebAppInstanceCollection
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var getInstanceMsDeployStatusOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances/{instanceId}/extensions/MSDeploy",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.instanceId,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.MSDeployStatus
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var getInstanceMSDeployLogOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances/{instanceId}/extensions/MSDeploy/log",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.instanceId,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.MSDeployLog
        },
        404: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var listInstanceProcessesOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances/{instanceId}/processes",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.instanceId,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.ProcessInfoCollection
        },
        404: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var getInstanceProcessOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances/{instanceId}/processes/{processId}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.processId,
        Parameters.instanceId,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.ProcessInfo
        },
        404: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var deleteInstanceProcessOperationSpec = {
    httpMethod: "DELETE",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances/{instanceId}/processes/{processId}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.processId,
        Parameters.instanceId,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        204: {},
        404: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var getInstanceProcessDumpOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances/{instanceId}/processes/{processId}/dump",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.processId,
        Parameters.instanceId,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Stream"
                }
            }
        },
        404: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var listInstanceProcessModulesOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances/{instanceId}/processes/{processId}/modules",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.processId,
        Parameters.instanceId,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.ProcessModuleInfoCollection
        },
        404: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var getInstanceProcessModuleOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances/{instanceId}/processes/{processId}/modules/{baseAddress}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.processId,
        Parameters.baseAddress,
        Parameters.instanceId,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.ProcessModuleInfo
        },
        404: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var listInstanceProcessThreadsOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances/{instanceId}/processes/{processId}/threads",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.processId,
        Parameters.instanceId,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.ProcessThreadInfoCollection
        },
        404: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var getInstanceProcessThreadOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances/{instanceId}/processes/{processId}/threads/{threadId}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.processId,
        Parameters.threadId,
        Parameters.instanceId,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.ProcessThreadInfo
        },
        404: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var isCloneableOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/iscloneable",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.SiteCloneability
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var listSyncFunctionTriggersOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/listsyncfunctiontriggerstatus",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.FunctionSecrets
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var listMetricDefinitionsOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/metricdefinitions",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.ResourceMetricDefinitionCollection
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var listMetricsOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/metrics",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.details,
        Parameters.filter,
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.ResourceMetricCollection
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var getMigrateMySqlStatusOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/migratemysql/status",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.MigrateMySqlStatus
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var getSwiftVirtualNetworkConnectionOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/networkConfig/virtualNetwork",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.SwiftVirtualNetwork
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var createOrUpdateSwiftVirtualNetworkConnectionOperationSpec = {
    httpMethod: "PUT",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/networkConfig/virtualNetwork",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "connectionEnvelope",
        mapper: tslib_1.__assign({}, Mappers.SwiftVirtualNetwork, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.SwiftVirtualNetwork
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var deleteSwiftVirtualNetworkOperationSpec = {
    httpMethod: "DELETE",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/networkConfig/virtualNetwork",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {},
        404: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var updateSwiftVirtualNetworkConnectionOperationSpec = {
    httpMethod: "PATCH",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/networkConfig/virtualNetwork",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "connectionEnvelope",
        mapper: tslib_1.__assign({}, Mappers.SwiftVirtualNetwork, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.SwiftVirtualNetwork
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var listNetworkFeaturesOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/networkFeatures/{view}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.view,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.NetworkFeatures
        },
        404: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var getNetworkTraceOperationOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/networkTrace/operationresults/{operationId}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.operationId,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "NetworkTrace"
                        }
                    }
                }
            }
        },
        202: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "NetworkTrace"
                        }
                    }
                }
            }
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var startWebSiteNetworkTraceOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/networkTrace/start",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.durationInSeconds,
        Parameters.maxFrameLength,
        Parameters.sasUrl,
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "String"
                }
            }
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var stopWebSiteNetworkTraceOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/networkTrace/stop",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {},
        204: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var getNetworkTracesOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/networkTrace/{operationId}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.operationId,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "NetworkTrace"
                        }
                    }
                }
            }
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var getNetworkTraceOperationV2OperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/networkTraces/current/operationresults/{operationId}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.operationId,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "NetworkTrace"
                        }
                    }
                }
            }
        },
        202: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "NetworkTrace"
                        }
                    }
                }
            }
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var getNetworkTracesV2OperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/networkTraces/{operationId}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.operationId,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "NetworkTrace"
                        }
                    }
                }
            }
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var generateNewSitePublishingPasswordOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/newpassword",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {},
        204: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var listPerfMonCountersOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/perfcounters",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.filter,
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.PerfMonCounterCollection
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var getSitePhpErrorLogFlagOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/phplogging",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.SitePhpErrorLogFlag
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var listPremierAddOnsOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/premieraddons",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.PremierAddOn
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var getPremierAddOnOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/premieraddons/{premierAddOnName}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.premierAddOnName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.PremierAddOn
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var addPremierAddOnOperationSpec = {
    httpMethod: "PUT",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/premieraddons/{premierAddOnName}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.premierAddOnName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "premierAddOn",
        mapper: tslib_1.__assign({}, Mappers.PremierAddOn, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.PremierAddOn
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var deletePremierAddOnOperationSpec = {
    httpMethod: "DELETE",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/premieraddons/{premierAddOnName}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.premierAddOnName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var updatePremierAddOnOperationSpec = {
    httpMethod: "PATCH",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/premieraddons/{premierAddOnName}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.premierAddOnName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "premierAddOn",
        mapper: tslib_1.__assign({}, Mappers.PremierAddOnPatchResource, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.PremierAddOn
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var getPrivateAccessOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/privateAccess/virtualNetworks",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.PrivateAccess
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var putPrivateAccessVnetOperationSpec = {
    httpMethod: "PUT",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/privateAccess/virtualNetworks",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "access",
        mapper: tslib_1.__assign({}, Mappers.PrivateAccess, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.PrivateAccess
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var listProcessesOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/processes",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.ProcessInfoCollection
        },
        404: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var getProcessOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/processes/{processId}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.processId,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.ProcessInfo
        },
        404: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var deleteProcessOperationSpec = {
    httpMethod: "DELETE",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/processes/{processId}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.processId,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        204: {},
        404: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var getProcessDumpOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/processes/{processId}/dump",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.processId,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Stream"
                }
            }
        },
        404: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var listProcessModulesOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/processes/{processId}/modules",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.processId,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.ProcessModuleInfoCollection
        },
        404: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var getProcessModuleOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/processes/{processId}/modules/{baseAddress}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.processId,
        Parameters.baseAddress,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.ProcessModuleInfo
        },
        404: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var listProcessThreadsOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/processes/{processId}/threads",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.processId,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.ProcessThreadInfoCollection
        },
        404: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var getProcessThreadOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/processes/{processId}/threads/{threadId}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.processId,
        Parameters.threadId,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.ProcessThreadInfo
        },
        404: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var listPublicCertificatesOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/publicCertificates",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.PublicCertificateCollection
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var getPublicCertificateOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/publicCertificates/{publicCertificateName}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.publicCertificateName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.PublicCertificate
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var createOrUpdatePublicCertificateOperationSpec = {
    httpMethod: "PUT",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/publicCertificates/{publicCertificateName}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.publicCertificateName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "publicCertificate",
        mapper: tslib_1.__assign({}, Mappers.PublicCertificate, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.PublicCertificate
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var deletePublicCertificateOperationSpec = {
    httpMethod: "DELETE",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/publicCertificates/{publicCertificateName}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.publicCertificateName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {},
        204: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var listPublishingProfileXmlWithSecretsOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/publishxml",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "publishingProfileOptions",
        mapper: tslib_1.__assign({}, Mappers.CsmPublishingProfileOptions, { required: true })
    },
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Stream"
                }
            }
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var resetProductionSlotConfigOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/resetSlotConfig",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var restartOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/restart",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.softRestart,
        Parameters.synchronous,
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var listSiteExtensionsOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/siteextensions",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.SiteExtensionInfoCollection
        },
        404: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var getSiteExtensionOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/siteextensions/{siteExtensionId}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.siteExtensionId,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.SiteExtensionInfo
        },
        404: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var deleteSiteExtensionOperationSpec = {
    httpMethod: "DELETE",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/siteextensions/{siteExtensionId}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.siteExtensionId,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        204: {},
        404: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var listSlotsOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.WebAppCollection
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var getSlotOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.slot,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.Site
        },
        404: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var deleteSlotOperationSpec = {
    httpMethod: "DELETE",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.slot,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.deleteMetrics,
        Parameters.deleteEmptyServerFarm,
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {},
        204: {},
        404: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var updateSlotOperationSpec = {
    httpMethod: "PATCH",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.slot,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "siteEnvelope",
        mapper: tslib_1.__assign({}, Mappers.SitePatchResource, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.Site
        },
        202: {
            bodyMapper: Mappers.Site
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var analyzeCustomHostnameSlotOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/analyzeCustomHostname",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.slot,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.hostName0,
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.CustomHostnameAnalysisResult
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var applySlotConfigurationSlotOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/applySlotConfig",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.slot,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "slotSwapEntity",
        mapper: tslib_1.__assign({}, Mappers.CsmSlotEntity, { required: true })
    },
    responses: {
        200: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var backupSlotOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/backup",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.slot,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "request",
        mapper: tslib_1.__assign({}, Mappers.BackupRequest, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.BackupItem
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var listBackupsSlotOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/backups",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.slot,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.BackupItemCollection
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var getBackupStatusSlotOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/backups/{backupId}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.backupId,
        Parameters.slot,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.BackupItem
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var deleteBackupSlotOperationSpec = {
    httpMethod: "DELETE",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/backups/{backupId}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.backupId,
        Parameters.slot,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {},
        404: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var listBackupStatusSecretsSlotOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/backups/{backupId}/list",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.backupId,
        Parameters.slot,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "request",
        mapper: tslib_1.__assign({}, Mappers.BackupRequest, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.BackupItem
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var listConfigurationsSlotOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.slot,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.SiteConfigResourceCollection
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var updateApplicationSettingsSlotOperationSpec = {
    httpMethod: "PUT",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/appsettings",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.slot,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "appSettings",
        mapper: tslib_1.__assign({}, Mappers.StringDictionary, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.StringDictionary
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var listApplicationSettingsSlotOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/appsettings/list",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.slot,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.StringDictionary
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var updateAuthSettingsSlotOperationSpec = {
    httpMethod: "PUT",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/authsettings",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.slot,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "siteAuthSettings",
        mapper: tslib_1.__assign({}, Mappers.SiteAuthSettings, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.SiteAuthSettings
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var getAuthSettingsSlotOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/authsettings/list",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.slot,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.SiteAuthSettings
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var updateAzureStorageAccountsSlotOperationSpec = {
    httpMethod: "PUT",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/azurestorageaccounts",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.slot,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "azureStorageAccounts",
        mapper: tslib_1.__assign({}, Mappers.AzureStoragePropertyDictionaryResource, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.AzureStoragePropertyDictionaryResource
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var listAzureStorageAccountsSlotOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/azurestorageaccounts/list",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.slot,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.AzureStoragePropertyDictionaryResource
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var updateBackupConfigurationSlotOperationSpec = {
    httpMethod: "PUT",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/backup",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.slot,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "request",
        mapper: tslib_1.__assign({}, Mappers.BackupRequest, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.BackupRequest
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var deleteBackupConfigurationSlotOperationSpec = {
    httpMethod: "DELETE",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/backup",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.slot,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var getBackupConfigurationSlotOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/backup/list",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.slot,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.BackupRequest
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var updateConnectionStringsSlotOperationSpec = {
    httpMethod: "PUT",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/connectionstrings",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.slot,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "connectionStrings",
        mapper: tslib_1.__assign({}, Mappers.ConnectionStringDictionary, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.ConnectionStringDictionary
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var listConnectionStringsSlotOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/connectionstrings/list",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.slot,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.ConnectionStringDictionary
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var getDiagnosticLogsConfigurationSlotOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/logs",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.slot,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.SiteLogsConfig
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var updateDiagnosticLogsConfigSlotOperationSpec = {
    httpMethod: "PUT",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/logs",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.slot,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "siteLogsConfig",
        mapper: tslib_1.__assign({}, Mappers.SiteLogsConfig, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.SiteLogsConfig
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var updateMetadataSlotOperationSpec = {
    httpMethod: "PUT",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/metadata",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.slot,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "metadata",
        mapper: tslib_1.__assign({}, Mappers.StringDictionary, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.StringDictionary
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var listMetadataSlotOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/metadata/list",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.slot,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.StringDictionary
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var updateSitePushSettingsSlotOperationSpec = {
    httpMethod: "PUT",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/pushsettings",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.slot,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "pushSettings",
        mapper: tslib_1.__assign({}, Mappers.PushSettings, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.PushSettings
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var listSitePushSettingsSlotOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/pushsettings/list",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.slot,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.PushSettings
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var getConfigurationSlotOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/web",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.slot,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.SiteConfigResource
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var createOrUpdateConfigurationSlotOperationSpec = {
    httpMethod: "PUT",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/web",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.slot,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "siteConfig",
        mapper: tslib_1.__assign({}, Mappers.SiteConfigResource, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.SiteConfigResource
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var updateConfigurationSlotOperationSpec = {
    httpMethod: "PATCH",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/web",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.slot,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "siteConfig",
        mapper: tslib_1.__assign({}, Mappers.SiteConfigResource, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.SiteConfigResource
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var listConfigurationSnapshotInfoSlotOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/web/snapshots",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.slot,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.SiteConfigurationSnapshotInfoCollection
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var getConfigurationSnapshotSlotOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/web/snapshots/{snapshotId}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.snapshotId,
        Parameters.slot,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.SiteConfigResource
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var recoverSiteConfigurationSnapshotSlotOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/web/snapshots/{snapshotId}/recover",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.snapshotId,
        Parameters.slot,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        204: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var getWebSiteContainerLogsSlotOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/containerlogs",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.slot,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Stream"
                }
            }
        },
        204: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var getContainerLogsZipSlotOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/containerlogs/zip/download",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.slot,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Stream"
                }
            }
        },
        204: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var listContinuousWebJobsSlotOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/continuouswebjobs",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.slot,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.ContinuousWebJobCollection
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var getContinuousWebJobSlotOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/continuouswebjobs/{webJobName}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.webJobName,
        Parameters.slot,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.ContinuousWebJob
        },
        404: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var deleteContinuousWebJobSlotOperationSpec = {
    httpMethod: "DELETE",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/continuouswebjobs/{webJobName}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.webJobName,
        Parameters.slot,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {},
        204: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var startContinuousWebJobSlotOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/continuouswebjobs/{webJobName}/start",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.webJobName,
        Parameters.slot,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {},
        404: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var stopContinuousWebJobSlotOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/continuouswebjobs/{webJobName}/stop",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.webJobName,
        Parameters.slot,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {},
        404: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var listDeploymentsSlotOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/deployments",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.slot,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.DeploymentCollection
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var getDeploymentSlotOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/deployments/{id}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.id,
        Parameters.slot,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.Deployment
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var createDeploymentSlotOperationSpec = {
    httpMethod: "PUT",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/deployments/{id}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.id,
        Parameters.slot,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "deployment",
        mapper: tslib_1.__assign({}, Mappers.Deployment, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.Deployment
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var deleteDeploymentSlotOperationSpec = {
    httpMethod: "DELETE",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/deployments/{id}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.id,
        Parameters.slot,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {},
        204: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var listDeploymentLogSlotOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/deployments/{id}/log",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.id,
        Parameters.slot,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.Deployment
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var discoverBackupSlotOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/discoverbackup",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.slot,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "request",
        mapper: tslib_1.__assign({}, Mappers.RestoreRequest, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.RestoreRequest
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var listDomainOwnershipIdentifiersSlotOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/domainOwnershipIdentifiers",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.slot,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.IdentifierCollection
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var getDomainOwnershipIdentifierSlotOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/domainOwnershipIdentifiers/{domainOwnershipIdentifierName}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.domainOwnershipIdentifierName,
        Parameters.slot,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.Identifier
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var createOrUpdateDomainOwnershipIdentifierSlotOperationSpec = {
    httpMethod: "PUT",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/domainOwnershipIdentifiers/{domainOwnershipIdentifierName}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.domainOwnershipIdentifierName,
        Parameters.slot,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "domainOwnershipIdentifier",
        mapper: tslib_1.__assign({}, Mappers.Identifier, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.Identifier
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var deleteDomainOwnershipIdentifierSlotOperationSpec = {
    httpMethod: "DELETE",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/domainOwnershipIdentifiers/{domainOwnershipIdentifierName}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.domainOwnershipIdentifierName,
        Parameters.slot,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {},
        204: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var updateDomainOwnershipIdentifierSlotOperationSpec = {
    httpMethod: "PATCH",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/domainOwnershipIdentifiers/{domainOwnershipIdentifierName}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.domainOwnershipIdentifierName,
        Parameters.slot,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "domainOwnershipIdentifier",
        mapper: tslib_1.__assign({}, Mappers.Identifier, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.Identifier
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var getMSDeployStatusSlotOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/extensions/MSDeploy",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.slot,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.MSDeployStatus
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var getMSDeployLogSlotOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/extensions/MSDeploy/log",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.slot,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.MSDeployLog
        },
        404: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var listInstanceFunctionsSlotOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/functions",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.slot,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.FunctionEnvelopeCollection
        },
        404: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var getFunctionsAdminTokenSlotOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/functions/admin/token",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.slot,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "String"
                }
            }
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var getInstanceFunctionSlotOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/functions/{functionName}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.functionName,
        Parameters.slot,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.FunctionEnvelope
        },
        404: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var deleteInstanceFunctionSlotOperationSpec = {
    httpMethod: "DELETE",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/functions/{functionName}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.functionName,
        Parameters.slot,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        204: {},
        404: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var listFunctionSecretsSlotOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/functions/{functionName}/listsecrets",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.functionName,
        Parameters.slot,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.FunctionSecrets
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var listHostNameBindingsSlotOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hostNameBindings",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.slot,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.HostNameBindingCollection
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var getHostNameBindingSlotOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hostNameBindings/{hostName}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.slot,
        Parameters.hostName1,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.HostNameBinding
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var createOrUpdateHostNameBindingSlotOperationSpec = {
    httpMethod: "PUT",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hostNameBindings/{hostName}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.hostName1,
        Parameters.slot,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "hostNameBinding",
        mapper: tslib_1.__assign({}, Mappers.HostNameBinding, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.HostNameBinding
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var deleteHostNameBindingSlotOperationSpec = {
    httpMethod: "DELETE",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hostNameBindings/{hostName}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.slot,
        Parameters.hostName1,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {},
        204: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var getHybridConnectionSlotOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hybridConnectionNamespaces/{namespaceName}/relays/{relayName}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.namespaceName,
        Parameters.relayName,
        Parameters.slot,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.HybridConnection
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var createOrUpdateHybridConnectionSlotOperationSpec = {
    httpMethod: "PUT",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hybridConnectionNamespaces/{namespaceName}/relays/{relayName}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.namespaceName,
        Parameters.relayName,
        Parameters.slot,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "connectionEnvelope",
        mapper: tslib_1.__assign({}, Mappers.HybridConnection, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.HybridConnection
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var deleteHybridConnectionSlotOperationSpec = {
    httpMethod: "DELETE",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hybridConnectionNamespaces/{namespaceName}/relays/{relayName}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.namespaceName,
        Parameters.relayName,
        Parameters.slot,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {},
        404: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var updateHybridConnectionSlotOperationSpec = {
    httpMethod: "PATCH",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hybridConnectionNamespaces/{namespaceName}/relays/{relayName}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.namespaceName,
        Parameters.relayName,
        Parameters.slot,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "connectionEnvelope",
        mapper: tslib_1.__assign({}, Mappers.HybridConnection, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.HybridConnection
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var listHybridConnectionKeysSlotOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hybridConnectionNamespaces/{namespaceName}/relays/{relayName}/listKeys",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.namespaceName,
        Parameters.relayName,
        Parameters.slot,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.HybridConnectionKey
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var listHybridConnectionsSlotOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hybridConnectionRelays",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.slot,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.HybridConnection
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var listRelayServiceConnectionsSlotOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hybridconnection",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.slot,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.RelayServiceConnectionEntity
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var getRelayServiceConnectionSlotOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hybridconnection/{entityName}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.entityName,
        Parameters.slot,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.RelayServiceConnectionEntity
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var createOrUpdateRelayServiceConnectionSlotOperationSpec = {
    httpMethod: "PUT",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hybridconnection/{entityName}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.entityName,
        Parameters.slot,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "connectionEnvelope",
        mapper: tslib_1.__assign({}, Mappers.RelayServiceConnectionEntity, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.RelayServiceConnectionEntity
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var deleteRelayServiceConnectionSlotOperationSpec = {
    httpMethod: "DELETE",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hybridconnection/{entityName}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.entityName,
        Parameters.slot,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {},
        404: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var updateRelayServiceConnectionSlotOperationSpec = {
    httpMethod: "PATCH",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hybridconnection/{entityName}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.entityName,
        Parameters.slot,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "connectionEnvelope",
        mapper: tslib_1.__assign({}, Mappers.RelayServiceConnectionEntity, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.RelayServiceConnectionEntity
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var listInstanceIdentifiersSlotOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.slot,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.WebAppInstanceCollection
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var getInstanceMsDeployStatusSlotOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances/{instanceId}/extensions/MSDeploy",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.slot,
        Parameters.instanceId,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.MSDeployStatus
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var getInstanceMSDeployLogSlotOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances/{instanceId}/extensions/MSDeploy/log",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.slot,
        Parameters.instanceId,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.MSDeployLog
        },
        404: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var listInstanceProcessesSlotOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances/{instanceId}/processes",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.slot,
        Parameters.instanceId,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.ProcessInfoCollection
        },
        404: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var getInstanceProcessSlotOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances/{instanceId}/processes/{processId}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.processId,
        Parameters.slot,
        Parameters.instanceId,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.ProcessInfo
        },
        404: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var deleteInstanceProcessSlotOperationSpec = {
    httpMethod: "DELETE",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances/{instanceId}/processes/{processId}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.processId,
        Parameters.slot,
        Parameters.instanceId,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        204: {},
        404: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var getInstanceProcessDumpSlotOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances/{instanceId}/processes/{processId}/dump",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.processId,
        Parameters.slot,
        Parameters.instanceId,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Stream"
                }
            }
        },
        404: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var listInstanceProcessModulesSlotOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances/{instanceId}/processes/{processId}/modules",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.processId,
        Parameters.slot,
        Parameters.instanceId,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.ProcessModuleInfoCollection
        },
        404: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var getInstanceProcessModuleSlotOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances/{instanceId}/processes/{processId}/modules/{baseAddress}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.processId,
        Parameters.baseAddress,
        Parameters.slot,
        Parameters.instanceId,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.ProcessModuleInfo
        },
        404: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var listInstanceProcessThreadsSlotOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances/{instanceId}/processes/{processId}/threads",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.processId,
        Parameters.slot,
        Parameters.instanceId,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.ProcessThreadInfoCollection
        },
        404: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var getInstanceProcessThreadSlotOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances/{instanceId}/processes/{processId}/threads/{threadId}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.processId,
        Parameters.threadId,
        Parameters.slot,
        Parameters.instanceId,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.ProcessThreadInfo
        },
        404: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var isCloneableSlotOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/iscloneable",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.slot,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.SiteCloneability
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var listSyncFunctionTriggersSlotOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/listsyncfunctiontriggerstatus",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.slot,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.FunctionSecrets
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var listMetricDefinitionsSlotOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/metricdefinitions",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.slot,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.ResourceMetricDefinitionCollection
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var listMetricsSlotOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/metrics",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.slot,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.details,
        Parameters.filter,
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.ResourceMetricCollection
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var getMigrateMySqlStatusSlotOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/migratemysql/status",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.slot,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.MigrateMySqlStatus
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var getSwiftVirtualNetworkConnectionSlotOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/networkConfig/virtualNetwork",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.slot,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.SwiftVirtualNetwork
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var createOrUpdateSwiftVirtualNetworkConnectionSlotOperationSpec = {
    httpMethod: "PUT",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/networkConfig/virtualNetwork",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.slot,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "connectionEnvelope",
        mapper: tslib_1.__assign({}, Mappers.SwiftVirtualNetwork, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.SwiftVirtualNetwork
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var deleteSwiftVirtualNetworkSlotOperationSpec = {
    httpMethod: "DELETE",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/networkConfig/virtualNetwork",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.slot,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {},
        404: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var updateSwiftVirtualNetworkConnectionSlotOperationSpec = {
    httpMethod: "PATCH",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/networkConfig/virtualNetwork",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.slot,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "connectionEnvelope",
        mapper: tslib_1.__assign({}, Mappers.SwiftVirtualNetwork, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.SwiftVirtualNetwork
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var listNetworkFeaturesSlotOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/networkFeatures/{view}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.view,
        Parameters.slot,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.NetworkFeatures
        },
        404: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var getNetworkTraceOperationSlotOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/networkTrace/operationresults/{operationId}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.operationId,
        Parameters.slot,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "NetworkTrace"
                        }
                    }
                }
            }
        },
        202: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "NetworkTrace"
                        }
                    }
                }
            }
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var startWebSiteNetworkTraceSlotOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/networkTrace/start",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.slot,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.durationInSeconds,
        Parameters.maxFrameLength,
        Parameters.sasUrl,
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "String"
                }
            }
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var stopWebSiteNetworkTraceSlotOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/networkTrace/stop",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.slot,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {},
        204: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var getNetworkTracesSlotOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/networkTrace/{operationId}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.operationId,
        Parameters.slot,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "NetworkTrace"
                        }
                    }
                }
            }
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var getNetworkTraceOperationSlotV2OperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/networkTraces/current/operationresults/{operationId}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.operationId,
        Parameters.slot,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "NetworkTrace"
                        }
                    }
                }
            }
        },
        202: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "NetworkTrace"
                        }
                    }
                }
            }
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var getNetworkTracesSlotV2OperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/networkTraces/{operationId}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.operationId,
        Parameters.slot,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "NetworkTrace"
                        }
                    }
                }
            }
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var generateNewSitePublishingPasswordSlotOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/newpassword",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.slot,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {},
        204: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var listPerfMonCountersSlotOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/perfcounters",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.slot,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.filter,
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.PerfMonCounterCollection
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var getSitePhpErrorLogFlagSlotOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/phplogging",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.slot,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.SitePhpErrorLogFlag
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var listPremierAddOnsSlotOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/premieraddons",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.slot,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.PremierAddOn
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var getPremierAddOnSlotOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/premieraddons/{premierAddOnName}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.premierAddOnName,
        Parameters.slot,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.PremierAddOn
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var addPremierAddOnSlotOperationSpec = {
    httpMethod: "PUT",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/premieraddons/{premierAddOnName}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.premierAddOnName,
        Parameters.slot,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "premierAddOn",
        mapper: tslib_1.__assign({}, Mappers.PremierAddOn, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.PremierAddOn
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var deletePremierAddOnSlotOperationSpec = {
    httpMethod: "DELETE",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/premieraddons/{premierAddOnName}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.premierAddOnName,
        Parameters.slot,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var updatePremierAddOnSlotOperationSpec = {
    httpMethod: "PATCH",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/premieraddons/{premierAddOnName}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.premierAddOnName,
        Parameters.slot,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "premierAddOn",
        mapper: tslib_1.__assign({}, Mappers.PremierAddOnPatchResource, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.PremierAddOn
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var getPrivateAccessSlotOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/privateAccess/virtualNetworks",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.slot,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.PrivateAccess
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var putPrivateAccessVnetSlotOperationSpec = {
    httpMethod: "PUT",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/privateAccess/virtualNetworks",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.slot,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "access",
        mapper: tslib_1.__assign({}, Mappers.PrivateAccess, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.PrivateAccess
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var listProcessesSlotOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/processes",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.slot,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.ProcessInfoCollection
        },
        404: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var getProcessSlotOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/processes/{processId}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.processId,
        Parameters.slot,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.ProcessInfo
        },
        404: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var deleteProcessSlotOperationSpec = {
    httpMethod: "DELETE",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/processes/{processId}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.processId,
        Parameters.slot,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        204: {},
        404: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var getProcessDumpSlotOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/processes/{processId}/dump",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.processId,
        Parameters.slot,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Stream"
                }
            }
        },
        404: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var listProcessModulesSlotOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/processes/{processId}/modules",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.processId,
        Parameters.slot,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.ProcessModuleInfoCollection
        },
        404: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var getProcessModuleSlotOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/processes/{processId}/modules/{baseAddress}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.processId,
        Parameters.baseAddress,
        Parameters.slot,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.ProcessModuleInfo
        },
        404: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var listProcessThreadsSlotOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/processes/{processId}/threads",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.processId,
        Parameters.slot,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.ProcessThreadInfoCollection
        },
        404: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var getProcessThreadSlotOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/processes/{processId}/threads/{threadId}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.processId,
        Parameters.threadId,
        Parameters.slot,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.ProcessThreadInfo
        },
        404: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var listPublicCertificatesSlotOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/publicCertificates",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.slot,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.PublicCertificateCollection
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var getPublicCertificateSlotOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/publicCertificates/{publicCertificateName}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.slot,
        Parameters.publicCertificateName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.PublicCertificate
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var createOrUpdatePublicCertificateSlotOperationSpec = {
    httpMethod: "PUT",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/publicCertificates/{publicCertificateName}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.publicCertificateName,
        Parameters.slot,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "publicCertificate",
        mapper: tslib_1.__assign({}, Mappers.PublicCertificate, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.PublicCertificate
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var deletePublicCertificateSlotOperationSpec = {
    httpMethod: "DELETE",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/publicCertificates/{publicCertificateName}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.slot,
        Parameters.publicCertificateName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {},
        204: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var listPublishingProfileXmlWithSecretsSlotOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/publishxml",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.slot,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "publishingProfileOptions",
        mapper: tslib_1.__assign({}, Mappers.CsmPublishingProfileOptions, { required: true })
    },
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Stream"
                }
            }
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var resetSlotConfigurationSlotOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/resetSlotConfig",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.slot,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var restartSlotOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/restart",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.slot,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.softRestart,
        Parameters.synchronous,
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var listSiteExtensionsSlotOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/siteextensions",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.slot,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.SiteExtensionInfoCollection
        },
        404: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var getSiteExtensionSlotOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/siteextensions/{siteExtensionId}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.siteExtensionId,
        Parameters.slot,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.SiteExtensionInfo
        },
        404: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var deleteSiteExtensionSlotOperationSpec = {
    httpMethod: "DELETE",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/siteextensions/{siteExtensionId}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.siteExtensionId,
        Parameters.slot,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        204: {},
        404: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var listSlotDifferencesSlotOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/slotsdiffs",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.slot,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "slotSwapEntity",
        mapper: tslib_1.__assign({}, Mappers.CsmSlotEntity, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.SlotDifferenceCollection
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var listSnapshotsSlotOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/snapshots",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.slot,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.SnapshotCollection
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var listSnapshotsFromDRSecondarySlotOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/snapshotsdr",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.slot,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.SnapshotCollection
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var getSourceControlSlotOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/sourcecontrols/web",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.slot,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.SiteSourceControl
        },
        201: {
            bodyMapper: Mappers.SiteSourceControl
        },
        202: {
            bodyMapper: Mappers.SiteSourceControl
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var deleteSourceControlSlotOperationSpec = {
    httpMethod: "DELETE",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/sourcecontrols/web",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.slot,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {},
        202: {},
        404: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var updateSourceControlSlotOperationSpec = {
    httpMethod: "PATCH",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/sourcecontrols/web",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.slot,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "siteSourceControl",
        mapper: tslib_1.__assign({}, Mappers.SiteSourceControl, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.SiteSourceControl
        },
        201: {
            bodyMapper: Mappers.SiteSourceControl
        },
        202: {
            bodyMapper: Mappers.SiteSourceControl
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var startSlotOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/start",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.slot,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var stopSlotOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/stop",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.slot,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var stopNetworkTraceSlotOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/stopNetworkTrace",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.slot,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {},
        204: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var syncRepositorySlotOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/sync",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.slot,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var syncFunctionTriggersSlotOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/syncfunctiontriggers",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.slot,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        204: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var listTriggeredWebJobsSlotOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/triggeredwebjobs",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.slot,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.TriggeredWebJobCollection
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var getTriggeredWebJobSlotOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/triggeredwebjobs/{webJobName}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.webJobName,
        Parameters.slot,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.TriggeredWebJob
        },
        404: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var deleteTriggeredWebJobSlotOperationSpec = {
    httpMethod: "DELETE",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/triggeredwebjobs/{webJobName}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.webJobName,
        Parameters.slot,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {},
        204: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var listTriggeredWebJobHistorySlotOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/triggeredwebjobs/{webJobName}/history",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.webJobName,
        Parameters.slot,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.TriggeredJobHistoryCollection
        },
        404: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var getTriggeredWebJobHistorySlotOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/triggeredwebjobs/{webJobName}/history/{id}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.webJobName,
        Parameters.id,
        Parameters.slot,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.TriggeredJobHistory
        },
        404: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var runTriggeredWebJobSlotOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/triggeredwebjobs/{webJobName}/run",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.webJobName,
        Parameters.slot,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {},
        404: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var listUsagesSlotOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/usages",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.slot,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.filter,
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.CsmUsageQuotaCollection
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var listVnetConnectionsSlotOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/virtualNetworkConnections",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.slot,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "VnetInfo"
                        }
                    }
                }
            }
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var getVnetConnectionSlotOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/virtualNetworkConnections/{vnetName}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.vnetName,
        Parameters.slot,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.VnetInfo
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var createOrUpdateVnetConnectionSlotOperationSpec = {
    httpMethod: "PUT",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/virtualNetworkConnections/{vnetName}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.vnetName,
        Parameters.slot,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "connectionEnvelope",
        mapper: tslib_1.__assign({}, Mappers.VnetInfo, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.VnetInfo
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var deleteVnetConnectionSlotOperationSpec = {
    httpMethod: "DELETE",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/virtualNetworkConnections/{vnetName}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.vnetName,
        Parameters.slot,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {},
        404: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var updateVnetConnectionSlotOperationSpec = {
    httpMethod: "PATCH",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/virtualNetworkConnections/{vnetName}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.vnetName,
        Parameters.slot,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "connectionEnvelope",
        mapper: tslib_1.__assign({}, Mappers.VnetInfo, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.VnetInfo
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var getVnetConnectionGatewaySlotOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/virtualNetworkConnections/{vnetName}/gateways/{gatewayName}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.vnetName,
        Parameters.gatewayName,
        Parameters.slot,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.VnetGateway
        },
        404: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var createOrUpdateVnetConnectionGatewaySlotOperationSpec = {
    httpMethod: "PUT",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/virtualNetworkConnections/{vnetName}/gateways/{gatewayName}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.vnetName,
        Parameters.gatewayName,
        Parameters.slot,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "connectionEnvelope",
        mapper: tslib_1.__assign({}, Mappers.VnetGateway, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.VnetGateway
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var updateVnetConnectionGatewaySlotOperationSpec = {
    httpMethod: "PATCH",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/virtualNetworkConnections/{vnetName}/gateways/{gatewayName}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.vnetName,
        Parameters.gatewayName,
        Parameters.slot,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "connectionEnvelope",
        mapper: tslib_1.__assign({}, Mappers.VnetGateway, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.VnetGateway
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var listWebJobsSlotOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/webjobs",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.slot,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.WebJobCollection
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var getWebJobSlotOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/webjobs/{webJobName}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.webJobName,
        Parameters.slot,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.WebJob
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var listSlotDifferencesFromProductionOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slotsdiffs",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "slotSwapEntity",
        mapper: tslib_1.__assign({}, Mappers.CsmSlotEntity, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.SlotDifferenceCollection
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var listSnapshotsOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/snapshots",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.SnapshotCollection
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var listSnapshotsFromDRSecondaryOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/snapshotsdr",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.SnapshotCollection
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var getSourceControlOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/sourcecontrols/web",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.SiteSourceControl
        },
        201: {
            bodyMapper: Mappers.SiteSourceControl
        },
        202: {
            bodyMapper: Mappers.SiteSourceControl
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var deleteSourceControlOperationSpec = {
    httpMethod: "DELETE",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/sourcecontrols/web",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {},
        202: {},
        404: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var updateSourceControlOperationSpec = {
    httpMethod: "PATCH",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/sourcecontrols/web",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "siteSourceControl",
        mapper: tslib_1.__assign({}, Mappers.SiteSourceControl, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.SiteSourceControl
        },
        201: {
            bodyMapper: Mappers.SiteSourceControl
        },
        202: {
            bodyMapper: Mappers.SiteSourceControl
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var startOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/start",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var stopOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/stop",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var stopNetworkTraceOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/stopNetworkTrace",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {},
        204: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var syncRepositoryOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/sync",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var syncFunctionTriggersOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/syncfunctiontriggers",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        204: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var listTriggeredWebJobsOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/triggeredwebjobs",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.TriggeredWebJobCollection
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var getTriggeredWebJobOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/triggeredwebjobs/{webJobName}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.webJobName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.TriggeredWebJob
        },
        404: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var deleteTriggeredWebJobOperationSpec = {
    httpMethod: "DELETE",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/triggeredwebjobs/{webJobName}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.webJobName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {},
        204: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var listTriggeredWebJobHistoryOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/triggeredwebjobs/{webJobName}/history",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.webJobName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.TriggeredJobHistoryCollection
        },
        404: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var getTriggeredWebJobHistoryOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/triggeredwebjobs/{webJobName}/history/{id}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.webJobName,
        Parameters.id,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.TriggeredJobHistory
        },
        404: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var runTriggeredWebJobOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/triggeredwebjobs/{webJobName}/run",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.webJobName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {},
        404: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var listUsagesOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/usages",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.filter,
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.CsmUsageQuotaCollection
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var listVnetConnectionsOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/virtualNetworkConnections",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "VnetInfo"
                        }
                    }
                }
            }
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var getVnetConnectionOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/virtualNetworkConnections/{vnetName}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.vnetName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.VnetInfo
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var createOrUpdateVnetConnectionOperationSpec = {
    httpMethod: "PUT",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/virtualNetworkConnections/{vnetName}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.vnetName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "connectionEnvelope",
        mapper: tslib_1.__assign({}, Mappers.VnetInfo, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.VnetInfo
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var deleteVnetConnectionOperationSpec = {
    httpMethod: "DELETE",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/virtualNetworkConnections/{vnetName}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.vnetName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {},
        404: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var updateVnetConnectionOperationSpec = {
    httpMethod: "PATCH",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/virtualNetworkConnections/{vnetName}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.vnetName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "connectionEnvelope",
        mapper: tslib_1.__assign({}, Mappers.VnetInfo, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.VnetInfo
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var getVnetConnectionGatewayOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/virtualNetworkConnections/{vnetName}/gateways/{gatewayName}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.vnetName,
        Parameters.gatewayName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.VnetGateway
        },
        404: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var createOrUpdateVnetConnectionGatewayOperationSpec = {
    httpMethod: "PUT",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/virtualNetworkConnections/{vnetName}/gateways/{gatewayName}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.vnetName,
        Parameters.gatewayName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "connectionEnvelope",
        mapper: tslib_1.__assign({}, Mappers.VnetGateway, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.VnetGateway
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var updateVnetConnectionGatewayOperationSpec = {
    httpMethod: "PATCH",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/virtualNetworkConnections/{vnetName}/gateways/{gatewayName}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.vnetName,
        Parameters.gatewayName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "connectionEnvelope",
        mapper: tslib_1.__assign({}, Mappers.VnetGateway, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.VnetGateway
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var listWebJobsOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/webjobs",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.WebJobCollection
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var getWebJobOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/webjobs/{webJobName}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.webJobName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.WebJob
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var beginCreateOrUpdateOperationSpec = {
    httpMethod: "PUT",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "siteEnvelope",
        mapper: tslib_1.__assign({}, Mappers.Site, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.Site
        },
        202: {
            bodyMapper: Mappers.Site
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var beginRestoreOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/backups/{backupId}/restore",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.backupId,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "request",
        mapper: tslib_1.__assign({}, Mappers.RestoreRequest, { required: true })
    },
    responses: {
        200: {},
        202: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var beginListPublishingCredentialsOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/publishingcredentials/list",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.User
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var beginCreateMSDeployOperationOperationSpec = {
    httpMethod: "PUT",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/extensions/MSDeploy",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "mSDeploy",
        mapper: tslib_1.__assign({}, Mappers.MSDeploy, { required: true })
    },
    responses: {
        201: {
            bodyMapper: Mappers.MSDeployStatus
        },
        409: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var beginCreateFunctionOperationSpec = {
    httpMethod: "PUT",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/functions/{functionName}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.functionName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "functionEnvelope",
        mapper: tslib_1.__assign({}, Mappers.FunctionEnvelope, { required: true })
    },
    responses: {
        201: {
            bodyMapper: Mappers.FunctionEnvelope
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var beginCreateInstanceMSDeployOperationOperationSpec = {
    httpMethod: "PUT",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances/{instanceId}/extensions/MSDeploy",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.instanceId,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "mSDeploy",
        mapper: tslib_1.__assign({}, Mappers.MSDeploy, { required: true })
    },
    responses: {
        201: {
            bodyMapper: Mappers.MSDeployStatus
        },
        409: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var beginMigrateStorageOperationSpec = {
    httpMethod: "PUT",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/migrate",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.subscriptionName,
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "migrationOptions",
        mapper: tslib_1.__assign({}, Mappers.StorageMigrationOptions, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.StorageMigrationResponse
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var beginMigrateMySqlOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/migratemysql",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "migrationRequestEnvelope",
        mapper: tslib_1.__assign({}, Mappers.MigrateMySqlRequest, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.Operation
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var beginStartWebSiteNetworkTraceOperationOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/networkTrace/startOperation",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.durationInSeconds,
        Parameters.maxFrameLength,
        Parameters.sasUrl,
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "NetworkTrace"
                        }
                    }
                }
            }
        },
        202: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "NetworkTrace"
                        }
                    }
                }
            }
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var beginRestoreFromBackupBlobOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/restoreFromBackupBlob",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "request",
        mapper: tslib_1.__assign({}, Mappers.RestoreRequest, { required: true })
    },
    responses: {
        200: {},
        202: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var beginRestoreFromDeletedAppOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/restoreFromDeletedApp",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "restoreRequest",
        mapper: tslib_1.__assign({}, Mappers.DeletedAppRestoreRequest, { required: true })
    },
    responses: {
        200: {},
        202: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var beginRestoreSnapshotOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/restoreSnapshot",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "restoreRequest",
        mapper: tslib_1.__assign({}, Mappers.SnapshotRestoreRequest, { required: true })
    },
    responses: {
        200: {},
        202: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var beginInstallSiteExtensionOperationSpec = {
    httpMethod: "PUT",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/siteextensions/{siteExtensionId}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.siteExtensionId,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.SiteExtensionInfo
        },
        201: {
            bodyMapper: Mappers.SiteExtensionInfo
        },
        429: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var beginCreateOrUpdateSlotOperationSpec = {
    httpMethod: "PUT",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.slot,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "siteEnvelope",
        mapper: tslib_1.__assign({}, Mappers.Site, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.Site
        },
        202: {
            bodyMapper: Mappers.Site
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var beginRestoreSlotOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/backups/{backupId}/restore",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.backupId,
        Parameters.slot,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "request",
        mapper: tslib_1.__assign({}, Mappers.RestoreRequest, { required: true })
    },
    responses: {
        200: {},
        202: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var beginListPublishingCredentialsSlotOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/publishingcredentials/list",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.slot,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.User
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var beginCreateMSDeployOperationSlotOperationSpec = {
    httpMethod: "PUT",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/extensions/MSDeploy",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.slot,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "mSDeploy",
        mapper: tslib_1.__assign({}, Mappers.MSDeploy, { required: true })
    },
    responses: {
        201: {
            bodyMapper: Mappers.MSDeployStatus
        },
        409: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var beginCreateInstanceFunctionSlotOperationSpec = {
    httpMethod: "PUT",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/functions/{functionName}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.functionName,
        Parameters.slot,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "functionEnvelope",
        mapper: tslib_1.__assign({}, Mappers.FunctionEnvelope, { required: true })
    },
    responses: {
        201: {
            bodyMapper: Mappers.FunctionEnvelope
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var beginCreateInstanceMSDeployOperationSlotOperationSpec = {
    httpMethod: "PUT",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances/{instanceId}/extensions/MSDeploy",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.slot,
        Parameters.instanceId,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "mSDeploy",
        mapper: tslib_1.__assign({}, Mappers.MSDeploy, { required: true })
    },
    responses: {
        201: {
            bodyMapper: Mappers.MSDeployStatus
        },
        409: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var beginStartWebSiteNetworkTraceOperationSlotOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/networkTrace/startOperation",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.slot,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.durationInSeconds,
        Parameters.maxFrameLength,
        Parameters.sasUrl,
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "NetworkTrace"
                        }
                    }
                }
            }
        },
        202: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "NetworkTrace"
                        }
                    }
                }
            }
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var beginRestoreFromBackupBlobSlotOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/restoreFromBackupBlob",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.slot,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "request",
        mapper: tslib_1.__assign({}, Mappers.RestoreRequest, { required: true })
    },
    responses: {
        200: {},
        202: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var beginRestoreFromDeletedAppSlotOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/restoreFromDeletedApp",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.slot,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "restoreRequest",
        mapper: tslib_1.__assign({}, Mappers.DeletedAppRestoreRequest, { required: true })
    },
    responses: {
        200: {},
        202: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var beginRestoreSnapshotSlotOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/restoreSnapshot",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.slot,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "restoreRequest",
        mapper: tslib_1.__assign({}, Mappers.SnapshotRestoreRequest, { required: true })
    },
    responses: {
        200: {},
        202: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var beginInstallSiteExtensionSlotOperationSpec = {
    httpMethod: "PUT",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/siteextensions/{siteExtensionId}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.siteExtensionId,
        Parameters.slot,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.SiteExtensionInfo
        },
        201: {
            bodyMapper: Mappers.SiteExtensionInfo
        },
        429: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var beginSwapSlotSlotOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/slotsswap",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.slot,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "slotSwapEntity",
        mapper: tslib_1.__assign({}, Mappers.CsmSlotEntity, { required: true })
    },
    responses: {
        200: {},
        202: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var beginCreateOrUpdateSourceControlSlotOperationSpec = {
    httpMethod: "PUT",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/sourcecontrols/web",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.slot,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "siteSourceControl",
        mapper: tslib_1.__assign({}, Mappers.SiteSourceControl, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.SiteSourceControl
        },
        201: {
            bodyMapper: Mappers.SiteSourceControl
        },
        202: {
            bodyMapper: Mappers.SiteSourceControl
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var beginStartNetworkTraceSlotOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/startNetworkTrace",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.slot,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.durationInSeconds,
        Parameters.maxFrameLength,
        Parameters.sasUrl,
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "NetworkTrace"
                        }
                    }
                }
            }
        },
        202: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "NetworkTrace"
                        }
                    }
                }
            }
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var beginSwapSlotWithProductionOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slotsswap",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "slotSwapEntity",
        mapper: tslib_1.__assign({}, Mappers.CsmSlotEntity, { required: true })
    },
    responses: {
        200: {},
        202: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var beginCreateOrUpdateSourceControlOperationSpec = {
    httpMethod: "PUT",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/sourcecontrols/web",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "siteSourceControl",
        mapper: tslib_1.__assign({}, Mappers.SiteSourceControl, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.SiteSourceControl
        },
        201: {
            bodyMapper: Mappers.SiteSourceControl
        },
        202: {
            bodyMapper: Mappers.SiteSourceControl
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var beginStartNetworkTraceOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/startNetworkTrace",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.durationInSeconds,
        Parameters.maxFrameLength,
        Parameters.sasUrl,
        Parameters.apiVersion1
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "NetworkTrace"
                        }
                    }
                }
            }
        },
        202: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "NetworkTrace"
                        }
                    }
                }
            }
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var listNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.WebAppCollection
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var listByResourceGroupNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.WebAppCollection
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var listBackupsNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.BackupItemCollection
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var listConfigurationsNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.SiteConfigResourceCollection
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var listConfigurationSnapshotInfoNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.SiteConfigurationSnapshotInfoCollection
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var listContinuousWebJobsNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.ContinuousWebJobCollection
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var listDeploymentsNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.DeploymentCollection
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var listDomainOwnershipIdentifiersNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.IdentifierCollection
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var listFunctionsNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.FunctionEnvelopeCollection
        },
        404: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var listHostNameBindingsNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.HostNameBindingCollection
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var listInstanceIdentifiersNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.WebAppInstanceCollection
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var listInstanceProcessesNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.ProcessInfoCollection
        },
        404: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var listInstanceProcessModulesNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.ProcessModuleInfoCollection
        },
        404: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var listInstanceProcessThreadsNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.ProcessThreadInfoCollection
        },
        404: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var listMetricDefinitionsNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.ResourceMetricDefinitionCollection
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var listMetricsNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.ResourceMetricCollection
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var listPerfMonCountersNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.PerfMonCounterCollection
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var listProcessesNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.ProcessInfoCollection
        },
        404: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var listProcessModulesNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.ProcessModuleInfoCollection
        },
        404: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var listProcessThreadsNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.ProcessThreadInfoCollection
        },
        404: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var listPublicCertificatesNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.PublicCertificateCollection
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var listSiteExtensionsNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.SiteExtensionInfoCollection
        },
        404: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var listSlotsNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.WebAppCollection
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var listBackupsSlotNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.BackupItemCollection
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var listConfigurationsSlotNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.SiteConfigResourceCollection
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var listConfigurationSnapshotInfoSlotNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.SiteConfigurationSnapshotInfoCollection
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var listContinuousWebJobsSlotNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.ContinuousWebJobCollection
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var listDeploymentsSlotNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.DeploymentCollection
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var listDomainOwnershipIdentifiersSlotNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.IdentifierCollection
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var listInstanceFunctionsSlotNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.FunctionEnvelopeCollection
        },
        404: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var listHostNameBindingsSlotNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.HostNameBindingCollection
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var listInstanceIdentifiersSlotNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.WebAppInstanceCollection
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var listInstanceProcessesSlotNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.ProcessInfoCollection
        },
        404: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var listInstanceProcessModulesSlotNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.ProcessModuleInfoCollection
        },
        404: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var listInstanceProcessThreadsSlotNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.ProcessThreadInfoCollection
        },
        404: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var listMetricDefinitionsSlotNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.ResourceMetricDefinitionCollection
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var listMetricsSlotNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.ResourceMetricCollection
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var listPerfMonCountersSlotNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.PerfMonCounterCollection
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var listProcessesSlotNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.ProcessInfoCollection
        },
        404: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var listProcessModulesSlotNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.ProcessModuleInfoCollection
        },
        404: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var listProcessThreadsSlotNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.ProcessThreadInfoCollection
        },
        404: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var listPublicCertificatesSlotNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.PublicCertificateCollection
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var listSiteExtensionsSlotNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.SiteExtensionInfoCollection
        },
        404: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var listSlotDifferencesSlotNextOperationSpec = {
    httpMethod: "POST",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.SlotDifferenceCollection
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var listSnapshotsSlotNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.SnapshotCollection
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var listSnapshotsFromDRSecondarySlotNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.SnapshotCollection
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var listTriggeredWebJobsSlotNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.TriggeredWebJobCollection
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var listTriggeredWebJobHistorySlotNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.TriggeredJobHistoryCollection
        },
        404: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var listUsagesSlotNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.CsmUsageQuotaCollection
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var listWebJobsSlotNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.WebJobCollection
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var listSlotDifferencesFromProductionNextOperationSpec = {
    httpMethod: "POST",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.SlotDifferenceCollection
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var listSnapshotsNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.SnapshotCollection
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var listSnapshotsFromDRSecondaryNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.SnapshotCollection
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var listTriggeredWebJobsNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.TriggeredWebJobCollection
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var listTriggeredWebJobHistoryNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.TriggeredJobHistoryCollection
        },
        404: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var listUsagesNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.CsmUsageQuotaCollection
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var listWebJobsNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.WebJobCollection
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
//# sourceMappingURL=webApps.js.map