/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
import * as msRest from "@azure/ms-rest-js";
import * as Mappers from "../models/diagnosticsMappers";
import * as Parameters from "../models/parameters";
/** Class representing a Diagnostics. */
var Diagnostics = /** @class */ (function () {
    /**
     * Create a Diagnostics.
     * @param {WebSiteManagementClientContext} client Reference to the service client.
     */
    function Diagnostics(client) {
        this.client = client;
    }
    Diagnostics.prototype.listHostingEnvironmentDetectorResponses = function (resourceGroupName, name, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            options: options
        }, listHostingEnvironmentDetectorResponsesOperationSpec, callback);
    };
    Diagnostics.prototype.getHostingEnvironmentDetectorResponse = function (resourceGroupName, name, detectorName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            detectorName: detectorName,
            options: options
        }, getHostingEnvironmentDetectorResponseOperationSpec, callback);
    };
    Diagnostics.prototype.listSiteDetectorResponses = function (resourceGroupName, siteName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            siteName: siteName,
            options: options
        }, listSiteDetectorResponsesOperationSpec, callback);
    };
    Diagnostics.prototype.getSiteDetectorResponse = function (resourceGroupName, siteName, detectorName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            siteName: siteName,
            detectorName: detectorName,
            options: options
        }, getSiteDetectorResponseOperationSpec, callback);
    };
    Diagnostics.prototype.listSiteDiagnosticCategories = function (resourceGroupName, siteName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            siteName: siteName,
            options: options
        }, listSiteDiagnosticCategoriesOperationSpec, callback);
    };
    Diagnostics.prototype.getSiteDiagnosticCategory = function (resourceGroupName, siteName, diagnosticCategory, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            siteName: siteName,
            diagnosticCategory: diagnosticCategory,
            options: options
        }, getSiteDiagnosticCategoryOperationSpec, callback);
    };
    Diagnostics.prototype.listSiteAnalyses = function (resourceGroupName, siteName, diagnosticCategory, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            siteName: siteName,
            diagnosticCategory: diagnosticCategory,
            options: options
        }, listSiteAnalysesOperationSpec, callback);
    };
    Diagnostics.prototype.getSiteAnalysis = function (resourceGroupName, siteName, diagnosticCategory, analysisName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            siteName: siteName,
            diagnosticCategory: diagnosticCategory,
            analysisName: analysisName,
            options: options
        }, getSiteAnalysisOperationSpec, callback);
    };
    Diagnostics.prototype.executeSiteAnalysis = function (resourceGroupName, siteName, diagnosticCategory, analysisName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            siteName: siteName,
            diagnosticCategory: diagnosticCategory,
            analysisName: analysisName,
            options: options
        }, executeSiteAnalysisOperationSpec, callback);
    };
    Diagnostics.prototype.listSiteDetectors = function (resourceGroupName, siteName, diagnosticCategory, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            siteName: siteName,
            diagnosticCategory: diagnosticCategory,
            options: options
        }, listSiteDetectorsOperationSpec, callback);
    };
    Diagnostics.prototype.getSiteDetector = function (resourceGroupName, siteName, diagnosticCategory, detectorName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            siteName: siteName,
            diagnosticCategory: diagnosticCategory,
            detectorName: detectorName,
            options: options
        }, getSiteDetectorOperationSpec, callback);
    };
    Diagnostics.prototype.executeSiteDetector = function (resourceGroupName, siteName, detectorName, diagnosticCategory, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            siteName: siteName,
            detectorName: detectorName,
            diagnosticCategory: diagnosticCategory,
            options: options
        }, executeSiteDetectorOperationSpec, callback);
    };
    Diagnostics.prototype.listSiteDetectorResponsesSlot = function (resourceGroupName, siteName, slot, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            siteName: siteName,
            slot: slot,
            options: options
        }, listSiteDetectorResponsesSlotOperationSpec, callback);
    };
    Diagnostics.prototype.getSiteDetectorResponseSlot = function (resourceGroupName, siteName, detectorName, slot, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            siteName: siteName,
            detectorName: detectorName,
            slot: slot,
            options: options
        }, getSiteDetectorResponseSlotOperationSpec, callback);
    };
    Diagnostics.prototype.listSiteDiagnosticCategoriesSlot = function (resourceGroupName, siteName, slot, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            siteName: siteName,
            slot: slot,
            options: options
        }, listSiteDiagnosticCategoriesSlotOperationSpec, callback);
    };
    Diagnostics.prototype.getSiteDiagnosticCategorySlot = function (resourceGroupName, siteName, diagnosticCategory, slot, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            siteName: siteName,
            diagnosticCategory: diagnosticCategory,
            slot: slot,
            options: options
        }, getSiteDiagnosticCategorySlotOperationSpec, callback);
    };
    Diagnostics.prototype.listSiteAnalysesSlot = function (resourceGroupName, siteName, diagnosticCategory, slot, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            siteName: siteName,
            diagnosticCategory: diagnosticCategory,
            slot: slot,
            options: options
        }, listSiteAnalysesSlotOperationSpec, callback);
    };
    Diagnostics.prototype.getSiteAnalysisSlot = function (resourceGroupName, siteName, diagnosticCategory, analysisName, slot, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            siteName: siteName,
            diagnosticCategory: diagnosticCategory,
            analysisName: analysisName,
            slot: slot,
            options: options
        }, getSiteAnalysisSlotOperationSpec, callback);
    };
    Diagnostics.prototype.executeSiteAnalysisSlot = function (resourceGroupName, siteName, diagnosticCategory, analysisName, slot, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            siteName: siteName,
            diagnosticCategory: diagnosticCategory,
            analysisName: analysisName,
            slot: slot,
            options: options
        }, executeSiteAnalysisSlotOperationSpec, callback);
    };
    Diagnostics.prototype.listSiteDetectorsSlot = function (resourceGroupName, siteName, diagnosticCategory, slot, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            siteName: siteName,
            diagnosticCategory: diagnosticCategory,
            slot: slot,
            options: options
        }, listSiteDetectorsSlotOperationSpec, callback);
    };
    Diagnostics.prototype.getSiteDetectorSlot = function (resourceGroupName, siteName, diagnosticCategory, detectorName, slot, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            siteName: siteName,
            diagnosticCategory: diagnosticCategory,
            detectorName: detectorName,
            slot: slot,
            options: options
        }, getSiteDetectorSlotOperationSpec, callback);
    };
    Diagnostics.prototype.executeSiteDetectorSlot = function (resourceGroupName, siteName, detectorName, diagnosticCategory, slot, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            siteName: siteName,
            detectorName: detectorName,
            diagnosticCategory: diagnosticCategory,
            slot: slot,
            options: options
        }, executeSiteDetectorSlotOperationSpec, callback);
    };
    Diagnostics.prototype.listHostingEnvironmentDetectorResponsesNext = function (nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, listHostingEnvironmentDetectorResponsesNextOperationSpec, callback);
    };
    Diagnostics.prototype.listSiteDetectorResponsesNext = function (nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, listSiteDetectorResponsesNextOperationSpec, callback);
    };
    Diagnostics.prototype.listSiteDiagnosticCategoriesNext = function (nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, listSiteDiagnosticCategoriesNextOperationSpec, callback);
    };
    Diagnostics.prototype.listSiteAnalysesNext = function (nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, listSiteAnalysesNextOperationSpec, callback);
    };
    Diagnostics.prototype.listSiteDetectorsNext = function (nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, listSiteDetectorsNextOperationSpec, callback);
    };
    Diagnostics.prototype.getSiteDetectorNext = function (nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, getSiteDetectorNextOperationSpec, callback);
    };
    Diagnostics.prototype.listSiteDetectorResponsesSlotNext = function (nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, listSiteDetectorResponsesSlotNextOperationSpec, callback);
    };
    Diagnostics.prototype.listSiteDiagnosticCategoriesSlotNext = function (nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, listSiteDiagnosticCategoriesSlotNextOperationSpec, callback);
    };
    Diagnostics.prototype.listSiteAnalysesSlotNext = function (nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, listSiteAnalysesSlotNextOperationSpec, callback);
    };
    Diagnostics.prototype.listSiteDetectorsSlotNext = function (nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, listSiteDetectorsSlotNextOperationSpec, callback);
    };
    Diagnostics.prototype.getSiteDetectorSlotNext = function (nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, getSiteDetectorSlotNextOperationSpec, callback);
    };
    return Diagnostics;
}());
export { Diagnostics };
// Operation Specifications
var serializer = new msRest.Serializer(Mappers);
var listHostingEnvironmentDetectorResponsesOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/detectors",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.DetectorResponseCollection
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var getHostingEnvironmentDetectorResponseOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/detectors/{detectorName}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.detectorName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.startTime0,
        Parameters.endTime0,
        Parameters.timeGrain0,
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.DetectorResponse
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var listSiteDetectorResponsesOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/detectors",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.siteName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.DetectorResponseCollection
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var getSiteDetectorResponseOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/detectors/{detectorName}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.siteName,
        Parameters.detectorName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.startTime0,
        Parameters.endTime0,
        Parameters.timeGrain0,
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.DetectorResponse
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var listSiteDiagnosticCategoriesOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/diagnostics",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.siteName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.DiagnosticCategoryCollection
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var getSiteDiagnosticCategoryOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/diagnostics/{diagnosticCategory}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.siteName,
        Parameters.diagnosticCategory,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.DiagnosticCategory
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var listSiteAnalysesOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/diagnostics/{diagnosticCategory}/analyses",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.siteName,
        Parameters.diagnosticCategory,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.DiagnosticAnalysisCollection
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var getSiteAnalysisOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/diagnostics/{diagnosticCategory}/analyses/{analysisName}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.siteName,
        Parameters.diagnosticCategory,
        Parameters.analysisName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.DiagnosticAnalysis
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var executeSiteAnalysisOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/diagnostics/{diagnosticCategory}/analyses/{analysisName}/execute",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.siteName,
        Parameters.diagnosticCategory,
        Parameters.analysisName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.startTime0,
        Parameters.endTime0,
        Parameters.timeGrain0,
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.DiagnosticAnalysis
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var listSiteDetectorsOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/diagnostics/{diagnosticCategory}/detectors",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.siteName,
        Parameters.diagnosticCategory,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.DiagnosticDetectorCollection
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var getSiteDetectorOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/diagnostics/{diagnosticCategory}/detectors/{detectorName}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.siteName,
        Parameters.diagnosticCategory,
        Parameters.detectorName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.DiagnosticDetectorCollection
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var executeSiteDetectorOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/diagnostics/{diagnosticCategory}/detectors/{detectorName}/execute",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.siteName,
        Parameters.detectorName,
        Parameters.diagnosticCategory,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.startTime0,
        Parameters.endTime0,
        Parameters.timeGrain0,
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.DiagnosticDetectorResponse
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var listSiteDetectorResponsesSlotOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/slots/{slot}/detectors",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.siteName,
        Parameters.slot,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.DetectorResponseCollection
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var getSiteDetectorResponseSlotOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/slots/{slot}/detectors/{detectorName}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.siteName,
        Parameters.detectorName,
        Parameters.slot,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.startTime0,
        Parameters.endTime0,
        Parameters.timeGrain0,
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.DetectorResponse
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var listSiteDiagnosticCategoriesSlotOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/slots/{slot}/diagnostics",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.siteName,
        Parameters.slot,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.DiagnosticCategoryCollection
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var getSiteDiagnosticCategorySlotOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/slots/{slot}/diagnostics/{diagnosticCategory}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.siteName,
        Parameters.diagnosticCategory,
        Parameters.slot,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.DiagnosticCategory
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var listSiteAnalysesSlotOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/slots/{slot}/diagnostics/{diagnosticCategory}/analyses",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.siteName,
        Parameters.diagnosticCategory,
        Parameters.slot,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.DiagnosticAnalysisCollection
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var getSiteAnalysisSlotOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/slots/{slot}/diagnostics/{diagnosticCategory}/analyses/{analysisName}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.siteName,
        Parameters.diagnosticCategory,
        Parameters.analysisName,
        Parameters.slot,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.DiagnosticAnalysis
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var executeSiteAnalysisSlotOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/slots/{slot}/diagnostics/{diagnosticCategory}/analyses/{analysisName}/execute",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.siteName,
        Parameters.diagnosticCategory,
        Parameters.analysisName,
        Parameters.slot,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.startTime0,
        Parameters.endTime0,
        Parameters.timeGrain0,
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.DiagnosticAnalysis
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var listSiteDetectorsSlotOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/slots/{slot}/diagnostics/{diagnosticCategory}/detectors",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.siteName,
        Parameters.diagnosticCategory,
        Parameters.slot,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.DiagnosticDetectorCollection
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var getSiteDetectorSlotOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/slots/{slot}/diagnostics/{diagnosticCategory}/detectors/{detectorName}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.siteName,
        Parameters.diagnosticCategory,
        Parameters.detectorName,
        Parameters.slot,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.DiagnosticDetectorCollection
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var executeSiteDetectorSlotOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/slots/{slot}/diagnostics/{diagnosticCategory}/detectors/{detectorName}/execute",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.siteName,
        Parameters.detectorName,
        Parameters.diagnosticCategory,
        Parameters.slot,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.startTime0,
        Parameters.endTime0,
        Parameters.timeGrain0,
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.DiagnosticDetectorResponse
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var listHostingEnvironmentDetectorResponsesNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.DetectorResponseCollection
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var listSiteDetectorResponsesNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.DetectorResponseCollection
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var listSiteDiagnosticCategoriesNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.DiagnosticCategoryCollection
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var listSiteAnalysesNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.DiagnosticAnalysisCollection
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var listSiteDetectorsNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.DiagnosticDetectorCollection
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var getSiteDetectorNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.DiagnosticDetectorCollection
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var listSiteDetectorResponsesSlotNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.DetectorResponseCollection
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var listSiteDiagnosticCategoriesSlotNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.DiagnosticCategoryCollection
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var listSiteAnalysesSlotNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.DiagnosticAnalysisCollection
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var listSiteDetectorsSlotNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.DiagnosticDetectorCollection
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var getSiteDetectorSlotNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.DiagnosticDetectorCollection
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
//# sourceMappingURL=diagnostics.js.map