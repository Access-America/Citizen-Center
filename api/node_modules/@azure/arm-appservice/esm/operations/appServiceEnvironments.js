/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
import * as tslib_1 from "tslib";
import * as msRest from "@azure/ms-rest-js";
import * as Mappers from "../models/appServiceEnvironmentsMappers";
import * as Parameters from "../models/parameters";
/** Class representing a AppServiceEnvironments. */
var AppServiceEnvironments = /** @class */ (function () {
    /**
     * Create a AppServiceEnvironments.
     * @param {WebSiteManagementClientContext} client Reference to the service client.
     */
    function AppServiceEnvironments(client) {
        this.client = client;
    }
    AppServiceEnvironments.prototype.list = function (options, callback) {
        return this.client.sendOperationRequest({
            options: options
        }, listOperationSpec, callback);
    };
    AppServiceEnvironments.prototype.listByResourceGroup = function (resourceGroupName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            options: options
        }, listByResourceGroupOperationSpec, callback);
    };
    AppServiceEnvironments.prototype.get = function (resourceGroupName, name, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            options: options
        }, getOperationSpec, callback);
    };
    /**
     * Create or update an App Service Environment.
     * @summary Create or update an App Service Environment.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the App Service Environment.
     * @param hostingEnvironmentEnvelope Configuration details of the App Service Environment.
     * @param [options] The optional parameters
     * @returns Promise<Models.AppServiceEnvironmentsCreateOrUpdateResponse>
     */
    AppServiceEnvironments.prototype.createOrUpdate = function (resourceGroupName, name, hostingEnvironmentEnvelope, options) {
        return this.beginCreateOrUpdate(resourceGroupName, name, hostingEnvironmentEnvelope, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    /**
     * Delete an App Service Environment.
     * @summary Delete an App Service Environment.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the App Service Environment.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    AppServiceEnvironments.prototype.deleteMethod = function (resourceGroupName, name, options) {
        return this.beginDeleteMethod(resourceGroupName, name, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    AppServiceEnvironments.prototype.update = function (resourceGroupName, name, hostingEnvironmentEnvelope, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            hostingEnvironmentEnvelope: hostingEnvironmentEnvelope,
            options: options
        }, updateOperationSpec, callback);
    };
    AppServiceEnvironments.prototype.listCapacities = function (resourceGroupName, name, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            options: options
        }, listCapacitiesOperationSpec, callback);
    };
    AppServiceEnvironments.prototype.listVips = function (resourceGroupName, name, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            options: options
        }, listVipsOperationSpec, callback);
    };
    /**
     * Move an App Service Environment to a different VNET.
     * @summary Move an App Service Environment to a different VNET.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the App Service Environment.
     * @param vnetInfo Details for the new virtual network.
     * @param [options] The optional parameters
     * @returns Promise<Models.AppServiceEnvironmentsChangeVnetResponse>
     */
    AppServiceEnvironments.prototype.changeVnet = function (resourceGroupName, name, vnetInfo, options) {
        return this.beginChangeVnet(resourceGroupName, name, vnetInfo, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    AppServiceEnvironments.prototype.listDiagnostics = function (resourceGroupName, name, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            options: options
        }, listDiagnosticsOperationSpec, callback);
    };
    AppServiceEnvironments.prototype.getDiagnosticsItem = function (resourceGroupName, name, diagnosticsName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            diagnosticsName: diagnosticsName,
            options: options
        }, getDiagnosticsItemOperationSpec, callback);
    };
    AppServiceEnvironments.prototype.getInboundNetworkDependenciesEndpoints = function (resourceGroupName, name, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            options: options
        }, getInboundNetworkDependenciesEndpointsOperationSpec, callback);
    };
    AppServiceEnvironments.prototype.listMetricDefinitions = function (resourceGroupName, name, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            options: options
        }, listMetricDefinitionsOperationSpec, callback);
    };
    AppServiceEnvironments.prototype.listMetrics = function (resourceGroupName, name, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            options: options
        }, listMetricsOperationSpec, callback);
    };
    AppServiceEnvironments.prototype.listMultiRolePools = function (resourceGroupName, name, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            options: options
        }, listMultiRolePoolsOperationSpec, callback);
    };
    AppServiceEnvironments.prototype.getMultiRolePool = function (resourceGroupName, name, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            options: options
        }, getMultiRolePoolOperationSpec, callback);
    };
    /**
     * Create or update a multi-role pool.
     * @summary Create or update a multi-role pool.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the App Service Environment.
     * @param multiRolePoolEnvelope Properties of the multi-role pool.
     * @param [options] The optional parameters
     * @returns Promise<Models.AppServiceEnvironmentsCreateOrUpdateMultiRolePoolResponse>
     */
    AppServiceEnvironments.prototype.createOrUpdateMultiRolePool = function (resourceGroupName, name, multiRolePoolEnvelope, options) {
        return this.beginCreateOrUpdateMultiRolePool(resourceGroupName, name, multiRolePoolEnvelope, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    AppServiceEnvironments.prototype.updateMultiRolePool = function (resourceGroupName, name, multiRolePoolEnvelope, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            multiRolePoolEnvelope: multiRolePoolEnvelope,
            options: options
        }, updateMultiRolePoolOperationSpec, callback);
    };
    AppServiceEnvironments.prototype.listMultiRolePoolInstanceMetricDefinitions = function (resourceGroupName, name, instance, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            instance: instance,
            options: options
        }, listMultiRolePoolInstanceMetricDefinitionsOperationSpec, callback);
    };
    AppServiceEnvironments.prototype.listMultiRolePoolInstanceMetrics = function (resourceGroupName, name, instance, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            instance: instance,
            options: options
        }, listMultiRolePoolInstanceMetricsOperationSpec, callback);
    };
    AppServiceEnvironments.prototype.listMultiRoleMetricDefinitions = function (resourceGroupName, name, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            options: options
        }, listMultiRoleMetricDefinitionsOperationSpec, callback);
    };
    AppServiceEnvironments.prototype.listMultiRoleMetrics = function (resourceGroupName, name, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            options: options
        }, listMultiRoleMetricsOperationSpec, callback);
    };
    AppServiceEnvironments.prototype.listMultiRolePoolSkus = function (resourceGroupName, name, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            options: options
        }, listMultiRolePoolSkusOperationSpec, callback);
    };
    AppServiceEnvironments.prototype.listMultiRoleUsages = function (resourceGroupName, name, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            options: options
        }, listMultiRoleUsagesOperationSpec, callback);
    };
    AppServiceEnvironments.prototype.listOperations = function (resourceGroupName, name, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            options: options
        }, listOperationsOperationSpec, callback);
    };
    AppServiceEnvironments.prototype.getOutboundNetworkDependenciesEndpoints = function (resourceGroupName, name, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            options: options
        }, getOutboundNetworkDependenciesEndpointsOperationSpec, callback);
    };
    AppServiceEnvironments.prototype.reboot = function (resourceGroupName, name, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            options: options
        }, rebootOperationSpec, callback);
    };
    /**
     * Resume an App Service Environment.
     * @summary Resume an App Service Environment.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the App Service Environment.
     * @param [options] The optional parameters
     * @returns Promise<Models.AppServiceEnvironmentsResumeResponse>
     */
    AppServiceEnvironments.prototype.resume = function (resourceGroupName, name, options) {
        return this.beginResume(resourceGroupName, name, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    AppServiceEnvironments.prototype.listAppServicePlans = function (resourceGroupName, name, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            options: options
        }, listAppServicePlansOperationSpec, callback);
    };
    AppServiceEnvironments.prototype.listWebApps = function (resourceGroupName, name, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            options: options
        }, listWebAppsOperationSpec, callback);
    };
    /**
     * Suspend an App Service Environment.
     * @summary Suspend an App Service Environment.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the App Service Environment.
     * @param [options] The optional parameters
     * @returns Promise<Models.AppServiceEnvironmentsSuspendResponse>
     */
    AppServiceEnvironments.prototype.suspend = function (resourceGroupName, name, options) {
        return this.beginSuspend(resourceGroupName, name, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    AppServiceEnvironments.prototype.listUsages = function (resourceGroupName, name, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            options: options
        }, listUsagesOperationSpec, callback);
    };
    AppServiceEnvironments.prototype.listWorkerPools = function (resourceGroupName, name, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            options: options
        }, listWorkerPoolsOperationSpec, callback);
    };
    AppServiceEnvironments.prototype.getWorkerPool = function (resourceGroupName, name, workerPoolName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            workerPoolName: workerPoolName,
            options: options
        }, getWorkerPoolOperationSpec, callback);
    };
    /**
     * Create or update a worker pool.
     * @summary Create or update a worker pool.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the App Service Environment.
     * @param workerPoolName Name of the worker pool.
     * @param workerPoolEnvelope Properties of the worker pool.
     * @param [options] The optional parameters
     * @returns Promise<Models.AppServiceEnvironmentsCreateOrUpdateWorkerPoolResponse>
     */
    AppServiceEnvironments.prototype.createOrUpdateWorkerPool = function (resourceGroupName, name, workerPoolName, workerPoolEnvelope, options) {
        return this.beginCreateOrUpdateWorkerPool(resourceGroupName, name, workerPoolName, workerPoolEnvelope, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    AppServiceEnvironments.prototype.updateWorkerPool = function (resourceGroupName, name, workerPoolName, workerPoolEnvelope, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            workerPoolName: workerPoolName,
            workerPoolEnvelope: workerPoolEnvelope,
            options: options
        }, updateWorkerPoolOperationSpec, callback);
    };
    AppServiceEnvironments.prototype.listWorkerPoolInstanceMetricDefinitions = function (resourceGroupName, name, workerPoolName, instance, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            workerPoolName: workerPoolName,
            instance: instance,
            options: options
        }, listWorkerPoolInstanceMetricDefinitionsOperationSpec, callback);
    };
    AppServiceEnvironments.prototype.listWorkerPoolInstanceMetrics = function (resourceGroupName, name, workerPoolName, instance, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            workerPoolName: workerPoolName,
            instance: instance,
            options: options
        }, listWorkerPoolInstanceMetricsOperationSpec, callback);
    };
    AppServiceEnvironments.prototype.listWebWorkerMetricDefinitions = function (resourceGroupName, name, workerPoolName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            workerPoolName: workerPoolName,
            options: options
        }, listWebWorkerMetricDefinitionsOperationSpec, callback);
    };
    AppServiceEnvironments.prototype.listWebWorkerMetrics = function (resourceGroupName, name, workerPoolName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            workerPoolName: workerPoolName,
            options: options
        }, listWebWorkerMetricsOperationSpec, callback);
    };
    AppServiceEnvironments.prototype.listWorkerPoolSkus = function (resourceGroupName, name, workerPoolName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            workerPoolName: workerPoolName,
            options: options
        }, listWorkerPoolSkusOperationSpec, callback);
    };
    AppServiceEnvironments.prototype.listWebWorkerUsages = function (resourceGroupName, name, workerPoolName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            workerPoolName: workerPoolName,
            options: options
        }, listWebWorkerUsagesOperationSpec, callback);
    };
    /**
     * Create or update an App Service Environment.
     * @summary Create or update an App Service Environment.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the App Service Environment.
     * @param hostingEnvironmentEnvelope Configuration details of the App Service Environment.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    AppServiceEnvironments.prototype.beginCreateOrUpdate = function (resourceGroupName, name, hostingEnvironmentEnvelope, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            name: name,
            hostingEnvironmentEnvelope: hostingEnvironmentEnvelope,
            options: options
        }, beginCreateOrUpdateOperationSpec, options);
    };
    /**
     * Delete an App Service Environment.
     * @summary Delete an App Service Environment.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the App Service Environment.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    AppServiceEnvironments.prototype.beginDeleteMethod = function (resourceGroupName, name, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            name: name,
            options: options
        }, beginDeleteMethodOperationSpec, options);
    };
    /**
     * Move an App Service Environment to a different VNET.
     * @summary Move an App Service Environment to a different VNET.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the App Service Environment.
     * @param vnetInfo Details for the new virtual network.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    AppServiceEnvironments.prototype.beginChangeVnet = function (resourceGroupName, name, vnetInfo, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            name: name,
            vnetInfo: vnetInfo,
            options: options
        }, beginChangeVnetOperationSpec, options);
    };
    /**
     * Create or update a multi-role pool.
     * @summary Create or update a multi-role pool.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the App Service Environment.
     * @param multiRolePoolEnvelope Properties of the multi-role pool.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    AppServiceEnvironments.prototype.beginCreateOrUpdateMultiRolePool = function (resourceGroupName, name, multiRolePoolEnvelope, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            name: name,
            multiRolePoolEnvelope: multiRolePoolEnvelope,
            options: options
        }, beginCreateOrUpdateMultiRolePoolOperationSpec, options);
    };
    /**
     * Resume an App Service Environment.
     * @summary Resume an App Service Environment.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the App Service Environment.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    AppServiceEnvironments.prototype.beginResume = function (resourceGroupName, name, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            name: name,
            options: options
        }, beginResumeOperationSpec, options);
    };
    /**
     * Suspend an App Service Environment.
     * @summary Suspend an App Service Environment.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the App Service Environment.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    AppServiceEnvironments.prototype.beginSuspend = function (resourceGroupName, name, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            name: name,
            options: options
        }, beginSuspendOperationSpec, options);
    };
    /**
     * Create or update a worker pool.
     * @summary Create or update a worker pool.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the App Service Environment.
     * @param workerPoolName Name of the worker pool.
     * @param workerPoolEnvelope Properties of the worker pool.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    AppServiceEnvironments.prototype.beginCreateOrUpdateWorkerPool = function (resourceGroupName, name, workerPoolName, workerPoolEnvelope, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            name: name,
            workerPoolName: workerPoolName,
            workerPoolEnvelope: workerPoolEnvelope,
            options: options
        }, beginCreateOrUpdateWorkerPoolOperationSpec, options);
    };
    AppServiceEnvironments.prototype.listNext = function (nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, listNextOperationSpec, callback);
    };
    AppServiceEnvironments.prototype.listByResourceGroupNext = function (nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, listByResourceGroupNextOperationSpec, callback);
    };
    AppServiceEnvironments.prototype.listCapacitiesNext = function (nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, listCapacitiesNextOperationSpec, callback);
    };
    /**
     * Move an App Service Environment to a different VNET.
     * @summary Move an App Service Environment to a different VNET.
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param [options] The optional parameters
     * @returns Promise<Models.AppServiceEnvironmentsChangeVnetNextResponse>
     */
    AppServiceEnvironments.prototype.changeVnetNext = function (nextPageLink, options) {
        return this.beginChangeVnetNext(nextPageLink, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    AppServiceEnvironments.prototype.getInboundNetworkDependenciesEndpointsNext = function (nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, getInboundNetworkDependenciesEndpointsNextOperationSpec, callback);
    };
    AppServiceEnvironments.prototype.listMetricsNext = function (nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, listMetricsNextOperationSpec, callback);
    };
    AppServiceEnvironments.prototype.listMultiRolePoolsNext = function (nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, listMultiRolePoolsNextOperationSpec, callback);
    };
    AppServiceEnvironments.prototype.listMultiRolePoolInstanceMetricDefinitionsNext = function (nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, listMultiRolePoolInstanceMetricDefinitionsNextOperationSpec, callback);
    };
    AppServiceEnvironments.prototype.listMultiRolePoolInstanceMetricsNext = function (nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, listMultiRolePoolInstanceMetricsNextOperationSpec, callback);
    };
    AppServiceEnvironments.prototype.listMultiRoleMetricDefinitionsNext = function (nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, listMultiRoleMetricDefinitionsNextOperationSpec, callback);
    };
    AppServiceEnvironments.prototype.listMultiRoleMetricsNext = function (nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, listMultiRoleMetricsNextOperationSpec, callback);
    };
    AppServiceEnvironments.prototype.listMultiRolePoolSkusNext = function (nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, listMultiRolePoolSkusNextOperationSpec, callback);
    };
    AppServiceEnvironments.prototype.listMultiRoleUsagesNext = function (nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, listMultiRoleUsagesNextOperationSpec, callback);
    };
    AppServiceEnvironments.prototype.getOutboundNetworkDependenciesEndpointsNext = function (nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, getOutboundNetworkDependenciesEndpointsNextOperationSpec, callback);
    };
    /**
     * Resume an App Service Environment.
     * @summary Resume an App Service Environment.
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param [options] The optional parameters
     * @returns Promise<Models.AppServiceEnvironmentsResumeNextResponse>
     */
    AppServiceEnvironments.prototype.resumeNext = function (nextPageLink, options) {
        return this.beginResumeNext(nextPageLink, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    AppServiceEnvironments.prototype.listAppServicePlansNext = function (nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, listAppServicePlansNextOperationSpec, callback);
    };
    AppServiceEnvironments.prototype.listWebAppsNext = function (nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, listWebAppsNextOperationSpec, callback);
    };
    /**
     * Suspend an App Service Environment.
     * @summary Suspend an App Service Environment.
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param [options] The optional parameters
     * @returns Promise<Models.AppServiceEnvironmentsSuspendNextResponse>
     */
    AppServiceEnvironments.prototype.suspendNext = function (nextPageLink, options) {
        return this.beginSuspendNext(nextPageLink, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    AppServiceEnvironments.prototype.listUsagesNext = function (nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, listUsagesNextOperationSpec, callback);
    };
    AppServiceEnvironments.prototype.listWorkerPoolsNext = function (nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, listWorkerPoolsNextOperationSpec, callback);
    };
    AppServiceEnvironments.prototype.listWorkerPoolInstanceMetricDefinitionsNext = function (nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, listWorkerPoolInstanceMetricDefinitionsNextOperationSpec, callback);
    };
    AppServiceEnvironments.prototype.listWorkerPoolInstanceMetricsNext = function (nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, listWorkerPoolInstanceMetricsNextOperationSpec, callback);
    };
    AppServiceEnvironments.prototype.listWebWorkerMetricDefinitionsNext = function (nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, listWebWorkerMetricDefinitionsNextOperationSpec, callback);
    };
    AppServiceEnvironments.prototype.listWebWorkerMetricsNext = function (nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, listWebWorkerMetricsNextOperationSpec, callback);
    };
    AppServiceEnvironments.prototype.listWorkerPoolSkusNext = function (nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, listWorkerPoolSkusNextOperationSpec, callback);
    };
    AppServiceEnvironments.prototype.listWebWorkerUsagesNext = function (nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, listWebWorkerUsagesNextOperationSpec, callback);
    };
    /**
     * Move an App Service Environment to a different VNET.
     * @summary Move an App Service Environment to a different VNET.
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    AppServiceEnvironments.prototype.beginChangeVnetNext = function (nextPageLink, options) {
        return this.client.sendLRORequest({
            nextPageLink: nextPageLink,
            options: options
        }, beginChangeVnetNextOperationSpec, options);
    };
    /**
     * Resume an App Service Environment.
     * @summary Resume an App Service Environment.
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    AppServiceEnvironments.prototype.beginResumeNext = function (nextPageLink, options) {
        return this.client.sendLRORequest({
            nextPageLink: nextPageLink,
            options: options
        }, beginResumeNextOperationSpec, options);
    };
    /**
     * Suspend an App Service Environment.
     * @summary Suspend an App Service Environment.
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    AppServiceEnvironments.prototype.beginSuspendNext = function (nextPageLink, options) {
        return this.client.sendLRORequest({
            nextPageLink: nextPageLink,
            options: options
        }, beginSuspendNextOperationSpec, options);
    };
    return AppServiceEnvironments;
}());
export { AppServiceEnvironments };
// Operation Specifications
var serializer = new msRest.Serializer(Mappers);
var listOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/providers/Microsoft.Web/hostingEnvironments",
    urlParameters: [
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.AppServiceEnvironmentCollection
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var listByResourceGroupOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.AppServiceEnvironmentCollection
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var getOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.AppServiceEnvironmentResource
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var updateOperationSpec = {
    httpMethod: "PATCH",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "hostingEnvironmentEnvelope",
        mapper: tslib_1.__assign({}, Mappers.AppServiceEnvironmentPatchResource, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.AppServiceEnvironmentResource
        },
        202: {
            bodyMapper: Mappers.AppServiceEnvironmentResource
        },
        400: {},
        404: {},
        409: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var listCapacitiesOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/capacities/compute",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.StampCapacityCollection
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var listVipsOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/capacities/virtualip",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.AddressResponse
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var listDiagnosticsOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/diagnostics",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "HostingEnvironmentDiagnostics"
                        }
                    }
                }
            }
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var getDiagnosticsItemOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/diagnostics/{diagnosticsName}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.diagnosticsName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.HostingEnvironmentDiagnostics
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var getInboundNetworkDependenciesEndpointsOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/inboundNetworkDependenciesEndpoints",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.InboundEnvironmentEndpointCollection
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var listMetricDefinitionsOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/metricdefinitions",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.MetricDefinition
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var listMetricsOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/metrics",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.details,
        Parameters.filter,
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.ResourceMetricCollection
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var listMultiRolePoolsOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/multiRolePools",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.WorkerPoolCollection
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var getMultiRolePoolOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/multiRolePools/default",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.WorkerPoolResource
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var updateMultiRolePoolOperationSpec = {
    httpMethod: "PATCH",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/multiRolePools/default",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "multiRolePoolEnvelope",
        mapper: tslib_1.__assign({}, Mappers.WorkerPoolResource, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.WorkerPoolResource
        },
        202: {
            bodyMapper: Mappers.WorkerPoolResource
        },
        400: {},
        404: {},
        409: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var listMultiRolePoolInstanceMetricDefinitionsOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/multiRolePools/default/instances/{instance}/metricdefinitions",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.instance,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.ResourceMetricDefinitionCollection
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var listMultiRolePoolInstanceMetricsOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/multiRolePools/default/instances/{instance}/metrics",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.instance,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.details,
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.ResourceMetricCollection
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var listMultiRoleMetricDefinitionsOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/multiRolePools/default/metricdefinitions",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.ResourceMetricDefinitionCollection
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var listMultiRoleMetricsOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/multiRolePools/default/metrics",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.startTime1,
        Parameters.endTime1,
        Parameters.timeGrain1,
        Parameters.details,
        Parameters.filter,
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.ResourceMetricCollection
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var listMultiRolePoolSkusOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/multiRolePools/default/skus",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.SkuInfoCollection
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var listMultiRoleUsagesOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/multiRolePools/default/usages",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.UsageCollection
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var listOperationsOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/operations",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Operation"
                        }
                    }
                }
            }
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var getOutboundNetworkDependenciesEndpointsOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/outboundNetworkDependenciesEndpoints",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.OutboundEnvironmentEndpointCollection
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var rebootOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/reboot",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        202: {},
        400: {},
        404: {},
        409: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var listAppServicePlansOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/serverfarms",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.AppServicePlanCollection
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var listWebAppsOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/sites",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.propertiesToInclude,
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.WebAppCollection
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var listUsagesOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/usages",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.filter,
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.CsmUsageQuotaCollection
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var listWorkerPoolsOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/workerPools",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.WorkerPoolCollection
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var getWorkerPoolOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/workerPools/{workerPoolName}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.workerPoolName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.WorkerPoolResource
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var updateWorkerPoolOperationSpec = {
    httpMethod: "PATCH",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/workerPools/{workerPoolName}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.workerPoolName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "workerPoolEnvelope",
        mapper: tslib_1.__assign({}, Mappers.WorkerPoolResource, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.WorkerPoolResource
        },
        202: {
            bodyMapper: Mappers.WorkerPoolResource
        },
        400: {},
        404: {},
        409: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var listWorkerPoolInstanceMetricDefinitionsOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/workerPools/{workerPoolName}/instances/{instance}/metricdefinitions",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.workerPoolName,
        Parameters.instance,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.ResourceMetricDefinitionCollection
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var listWorkerPoolInstanceMetricsOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/workerPools/{workerPoolName}/instances/{instance}/metrics",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.workerPoolName,
        Parameters.instance,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.details,
        Parameters.filter,
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.ResourceMetricCollection
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var listWebWorkerMetricDefinitionsOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/workerPools/{workerPoolName}/metricdefinitions",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.workerPoolName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.ResourceMetricDefinitionCollection
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var listWebWorkerMetricsOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/workerPools/{workerPoolName}/metrics",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.workerPoolName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.details,
        Parameters.filter,
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.ResourceMetricCollection
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var listWorkerPoolSkusOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/workerPools/{workerPoolName}/skus",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.workerPoolName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.SkuInfoCollection
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var listWebWorkerUsagesOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/workerPools/{workerPoolName}/usages",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.workerPoolName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.UsageCollection
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var beginCreateOrUpdateOperationSpec = {
    httpMethod: "PUT",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "hostingEnvironmentEnvelope",
        mapper: tslib_1.__assign({}, Mappers.AppServiceEnvironmentResource, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.AppServiceEnvironmentResource
        },
        202: {
            bodyMapper: Mappers.AppServiceEnvironmentResource
        },
        400: {},
        404: {},
        409: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var beginDeleteMethodOperationSpec = {
    httpMethod: "DELETE",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.forceDelete,
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        202: {},
        204: {},
        400: {},
        404: {},
        409: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var beginChangeVnetOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/changeVirtualNetwork",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "vnetInfo",
        mapper: tslib_1.__assign({}, Mappers.VirtualNetworkProfile, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.WebAppCollection
        },
        202: {
            bodyMapper: Mappers.WebAppCollection
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var beginCreateOrUpdateMultiRolePoolOperationSpec = {
    httpMethod: "PUT",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/multiRolePools/default",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "multiRolePoolEnvelope",
        mapper: tslib_1.__assign({}, Mappers.WorkerPoolResource, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.WorkerPoolResource
        },
        202: {
            bodyMapper: Mappers.WorkerPoolResource
        },
        400: {},
        404: {},
        409: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var beginResumeOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/resume",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.WebAppCollection
        },
        202: {
            bodyMapper: Mappers.WebAppCollection
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var beginSuspendOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/suspend",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.WebAppCollection
        },
        202: {
            bodyMapper: Mappers.WebAppCollection
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var beginCreateOrUpdateWorkerPoolOperationSpec = {
    httpMethod: "PUT",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/workerPools/{workerPoolName}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.workerPoolName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "workerPoolEnvelope",
        mapper: tslib_1.__assign({}, Mappers.WorkerPoolResource, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.WorkerPoolResource
        },
        202: {
            bodyMapper: Mappers.WorkerPoolResource
        },
        400: {},
        404: {},
        409: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var listNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.AppServiceEnvironmentCollection
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var listByResourceGroupNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.AppServiceEnvironmentCollection
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var listCapacitiesNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.StampCapacityCollection
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var getInboundNetworkDependenciesEndpointsNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.InboundEnvironmentEndpointCollection
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var listMetricsNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.ResourceMetricCollection
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var listMultiRolePoolsNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.WorkerPoolCollection
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var listMultiRolePoolInstanceMetricDefinitionsNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.ResourceMetricDefinitionCollection
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var listMultiRolePoolInstanceMetricsNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.ResourceMetricCollection
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var listMultiRoleMetricDefinitionsNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.ResourceMetricDefinitionCollection
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var listMultiRoleMetricsNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.ResourceMetricCollection
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var listMultiRolePoolSkusNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.SkuInfoCollection
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var listMultiRoleUsagesNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.UsageCollection
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var getOutboundNetworkDependenciesEndpointsNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.OutboundEnvironmentEndpointCollection
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var listAppServicePlansNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.AppServicePlanCollection
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var listWebAppsNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.WebAppCollection
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var listUsagesNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.CsmUsageQuotaCollection
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var listWorkerPoolsNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.WorkerPoolCollection
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var listWorkerPoolInstanceMetricDefinitionsNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.ResourceMetricDefinitionCollection
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var listWorkerPoolInstanceMetricsNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.ResourceMetricCollection
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var listWebWorkerMetricDefinitionsNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.ResourceMetricDefinitionCollection
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var listWebWorkerMetricsNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.ResourceMetricCollection
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var listWorkerPoolSkusNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.SkuInfoCollection
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var listWebWorkerUsagesNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.UsageCollection
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var beginChangeVnetNextOperationSpec = {
    httpMethod: "POST",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.WebAppCollection
        },
        202: {
            bodyMapper: Mappers.WebAppCollection
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var beginResumeNextOperationSpec = {
    httpMethod: "POST",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.WebAppCollection
        },
        202: {
            bodyMapper: Mappers.WebAppCollection
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var beginSuspendNextOperationSpec = {
    httpMethod: "POST",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.WebAppCollection
        },
        202: {
            bodyMapper: Mappers.WebAppCollection
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
//# sourceMappingURL=appServiceEnvironments.js.map