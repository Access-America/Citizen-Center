import * as msRest from "@azure/ms-rest-js";
import * as msRestAzure from "@azure/ms-rest-azure-js";
import * as Models from "../models";
import { WebSiteManagementClientContext } from "../webSiteManagementClientContext";
/** Class representing a AppServicePlans. */
export declare class AppServicePlans {
    private readonly client;
    /**
     * Create a AppServicePlans.
     * @param {WebSiteManagementClientContext} client Reference to the service client.
     */
    constructor(client: WebSiteManagementClientContext);
    /**
     * Get all App Service plans for a subscription.
     * @summary Get all App Service plans for a subscription.
     * @param [options] The optional parameters
     * @returns Promise<Models.AppServicePlansListResponse>
     */
    list(options?: Models.AppServicePlansListOptionalParams): Promise<Models.AppServicePlansListResponse>;
    /**
     * @param callback The callback
     */
    list(callback: msRest.ServiceCallback<Models.AppServicePlanCollection>): void;
    /**
     * @param options The optional parameters
     * @param callback The callback
     */
    list(options: Models.AppServicePlansListOptionalParams, callback: msRest.ServiceCallback<Models.AppServicePlanCollection>): void;
    /**
     * Get all App Service plans in a resource group.
     * @summary Get all App Service plans in a resource group.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param [options] The optional parameters
     * @returns Promise<Models.AppServicePlansListByResourceGroupResponse>
     */
    listByResourceGroup(resourceGroupName: string, options?: msRest.RequestOptionsBase): Promise<Models.AppServicePlansListByResourceGroupResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param callback The callback
     */
    listByResourceGroup(resourceGroupName: string, callback: msRest.ServiceCallback<Models.AppServicePlanCollection>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param options The optional parameters
     * @param callback The callback
     */
    listByResourceGroup(resourceGroupName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.AppServicePlanCollection>): void;
    /**
     * Get an App Service plan.
     * @summary Get an App Service plan.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the App Service plan.
     * @param [options] The optional parameters
     * @returns Promise<Models.AppServicePlansGetResponse>
     */
    get(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.AppServicePlansGetResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the App Service plan.
     * @param callback The callback
     */
    get(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<Models.AppServicePlan>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the App Service plan.
     * @param options The optional parameters
     * @param callback The callback
     */
    get(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.AppServicePlan>): void;
    /**
     * Creates or updates an App Service Plan.
     * @summary Creates or updates an App Service Plan.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the App Service plan.
     * @param appServicePlan Details of the App Service plan.
     * @param [options] The optional parameters
     * @returns Promise<Models.AppServicePlansCreateOrUpdateResponse>
     */
    createOrUpdate(resourceGroupName: string, name: string, appServicePlan: Models.AppServicePlan, options?: msRest.RequestOptionsBase): Promise<Models.AppServicePlansCreateOrUpdateResponse>;
    /**
     * Delete an App Service plan.
     * @summary Delete an App Service plan.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the App Service plan.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    deleteMethod(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the App Service plan.
     * @param callback The callback
     */
    deleteMethod(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the App Service plan.
     * @param options The optional parameters
     * @param callback The callback
     */
    deleteMethod(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
    /**
     * Creates or updates an App Service Plan.
     * @summary Creates or updates an App Service Plan.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the App Service plan.
     * @param appServicePlan Details of the App Service plan.
     * @param [options] The optional parameters
     * @returns Promise<Models.AppServicePlansUpdateResponse>
     */
    update(resourceGroupName: string, name: string, appServicePlan: Models.AppServicePlanPatchResource, options?: msRest.RequestOptionsBase): Promise<Models.AppServicePlansUpdateResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the App Service plan.
     * @param appServicePlan Details of the App Service plan.
     * @param callback The callback
     */
    update(resourceGroupName: string, name: string, appServicePlan: Models.AppServicePlanPatchResource, callback: msRest.ServiceCallback<Models.AppServicePlan>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the App Service plan.
     * @param appServicePlan Details of the App Service plan.
     * @param options The optional parameters
     * @param callback The callback
     */
    update(resourceGroupName: string, name: string, appServicePlan: Models.AppServicePlanPatchResource, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.AppServicePlan>): void;
    /**
     * List all capabilities of an App Service plan.
     * @summary List all capabilities of an App Service plan.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the App Service plan.
     * @param [options] The optional parameters
     * @returns Promise<Models.AppServicePlansListCapabilitiesResponse>
     */
    listCapabilities(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.AppServicePlansListCapabilitiesResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the App Service plan.
     * @param callback The callback
     */
    listCapabilities(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<Models.Capability[]>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the App Service plan.
     * @param options The optional parameters
     * @param callback The callback
     */
    listCapabilities(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Capability[]>): void;
    /**
     * Retrieve a Hybrid Connection in use in an App Service plan.
     * @summary Retrieve a Hybrid Connection in use in an App Service plan.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the App Service plan.
     * @param namespaceName Name of the Service Bus namespace.
     * @param relayName Name of the Service Bus relay.
     * @param [options] The optional parameters
     * @returns Promise<Models.AppServicePlansGetHybridConnectionResponse>
     */
    getHybridConnection(resourceGroupName: string, name: string, namespaceName: string, relayName: string, options?: msRest.RequestOptionsBase): Promise<Models.AppServicePlansGetHybridConnectionResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the App Service plan.
     * @param namespaceName Name of the Service Bus namespace.
     * @param relayName Name of the Service Bus relay.
     * @param callback The callback
     */
    getHybridConnection(resourceGroupName: string, name: string, namespaceName: string, relayName: string, callback: msRest.ServiceCallback<Models.HybridConnection>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the App Service plan.
     * @param namespaceName Name of the Service Bus namespace.
     * @param relayName Name of the Service Bus relay.
     * @param options The optional parameters
     * @param callback The callback
     */
    getHybridConnection(resourceGroupName: string, name: string, namespaceName: string, relayName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.HybridConnection>): void;
    /**
     * Delete a Hybrid Connection in use in an App Service plan.
     * @summary Delete a Hybrid Connection in use in an App Service plan.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the App Service plan.
     * @param namespaceName Name of the Service Bus namespace.
     * @param relayName Name of the Service Bus relay.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    deleteHybridConnection(resourceGroupName: string, name: string, namespaceName: string, relayName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the App Service plan.
     * @param namespaceName Name of the Service Bus namespace.
     * @param relayName Name of the Service Bus relay.
     * @param callback The callback
     */
    deleteHybridConnection(resourceGroupName: string, name: string, namespaceName: string, relayName: string, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the App Service plan.
     * @param namespaceName Name of the Service Bus namespace.
     * @param relayName Name of the Service Bus relay.
     * @param options The optional parameters
     * @param callback The callback
     */
    deleteHybridConnection(resourceGroupName: string, name: string, namespaceName: string, relayName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
    /**
     * Get the send key name and value of a Hybrid Connection.
     * @summary Get the send key name and value of a Hybrid Connection.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the App Service plan.
     * @param namespaceName The name of the Service Bus namespace.
     * @param relayName The name of the Service Bus relay.
     * @param [options] The optional parameters
     * @returns Promise<Models.AppServicePlansListHybridConnectionKeysResponse>
     */
    listHybridConnectionKeys(resourceGroupName: string, name: string, namespaceName: string, relayName: string, options?: msRest.RequestOptionsBase): Promise<Models.AppServicePlansListHybridConnectionKeysResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the App Service plan.
     * @param namespaceName The name of the Service Bus namespace.
     * @param relayName The name of the Service Bus relay.
     * @param callback The callback
     */
    listHybridConnectionKeys(resourceGroupName: string, name: string, namespaceName: string, relayName: string, callback: msRest.ServiceCallback<Models.HybridConnectionKey>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the App Service plan.
     * @param namespaceName The name of the Service Bus namespace.
     * @param relayName The name of the Service Bus relay.
     * @param options The optional parameters
     * @param callback The callback
     */
    listHybridConnectionKeys(resourceGroupName: string, name: string, namespaceName: string, relayName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.HybridConnectionKey>): void;
    /**
     * Get all apps that use a Hybrid Connection in an App Service Plan.
     * @summary Get all apps that use a Hybrid Connection in an App Service Plan.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the App Service plan.
     * @param namespaceName Name of the Hybrid Connection namespace.
     * @param relayName Name of the Hybrid Connection relay.
     * @param [options] The optional parameters
     * @returns Promise<Models.AppServicePlansListWebAppsByHybridConnectionResponse>
     */
    listWebAppsByHybridConnection(resourceGroupName: string, name: string, namespaceName: string, relayName: string, options?: msRest.RequestOptionsBase): Promise<Models.AppServicePlansListWebAppsByHybridConnectionResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the App Service plan.
     * @param namespaceName Name of the Hybrid Connection namespace.
     * @param relayName Name of the Hybrid Connection relay.
     * @param callback The callback
     */
    listWebAppsByHybridConnection(resourceGroupName: string, name: string, namespaceName: string, relayName: string, callback: msRest.ServiceCallback<Models.ResourceCollection>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the App Service plan.
     * @param namespaceName Name of the Hybrid Connection namespace.
     * @param relayName Name of the Hybrid Connection relay.
     * @param options The optional parameters
     * @param callback The callback
     */
    listWebAppsByHybridConnection(resourceGroupName: string, name: string, namespaceName: string, relayName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ResourceCollection>): void;
    /**
     * Get the maximum number of Hybrid Connections allowed in an App Service plan.
     * @summary Get the maximum number of Hybrid Connections allowed in an App Service plan.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the App Service plan.
     * @param [options] The optional parameters
     * @returns Promise<Models.AppServicePlansGetHybridConnectionPlanLimitResponse>
     */
    getHybridConnectionPlanLimit(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.AppServicePlansGetHybridConnectionPlanLimitResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the App Service plan.
     * @param callback The callback
     */
    getHybridConnectionPlanLimit(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<Models.HybridConnectionLimits>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the App Service plan.
     * @param options The optional parameters
     * @param callback The callback
     */
    getHybridConnectionPlanLimit(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.HybridConnectionLimits>): void;
    /**
     * Retrieve all Hybrid Connections in use in an App Service plan.
     * @summary Retrieve all Hybrid Connections in use in an App Service plan.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the App Service plan.
     * @param [options] The optional parameters
     * @returns Promise<Models.AppServicePlansListHybridConnectionsResponse>
     */
    listHybridConnections(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.AppServicePlansListHybridConnectionsResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the App Service plan.
     * @param callback The callback
     */
    listHybridConnections(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<Models.HybridConnectionCollection>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the App Service plan.
     * @param options The optional parameters
     * @param callback The callback
     */
    listHybridConnections(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.HybridConnectionCollection>): void;
    /**
     * Get metrics that can be queried for an App Service plan, and their definitions.
     * @summary Get metrics that can be queried for an App Service plan, and their definitions.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the App Service plan.
     * @param [options] The optional parameters
     * @returns Promise<Models.AppServicePlansListMetricDefintionsResponse>
     */
    listMetricDefintions(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.AppServicePlansListMetricDefintionsResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the App Service plan.
     * @param callback The callback
     */
    listMetricDefintions(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<Models.ResourceMetricDefinitionCollection>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the App Service plan.
     * @param options The optional parameters
     * @param callback The callback
     */
    listMetricDefintions(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ResourceMetricDefinitionCollection>): void;
    /**
     * Get metrics for an App Service plan.
     * @summary Get metrics for an App Service plan.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the App Service plan.
     * @param [options] The optional parameters
     * @returns Promise<Models.AppServicePlansListMetricsResponse>
     */
    listMetrics(resourceGroupName: string, name: string, options?: Models.AppServicePlansListMetricsOptionalParams): Promise<Models.AppServicePlansListMetricsResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the App Service plan.
     * @param callback The callback
     */
    listMetrics(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<Models.ResourceMetricCollection>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the App Service plan.
     * @param options The optional parameters
     * @param callback The callback
     */
    listMetrics(resourceGroupName: string, name: string, options: Models.AppServicePlansListMetricsOptionalParams, callback: msRest.ServiceCallback<Models.ResourceMetricCollection>): void;
    /**
     * Restart all apps in an App Service plan.
     * @summary Restart all apps in an App Service plan.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the App Service plan.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    restartWebApps(resourceGroupName: string, name: string, options?: Models.AppServicePlansRestartWebAppsOptionalParams): Promise<msRest.RestResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the App Service plan.
     * @param callback The callback
     */
    restartWebApps(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the App Service plan.
     * @param options The optional parameters
     * @param callback The callback
     */
    restartWebApps(resourceGroupName: string, name: string, options: Models.AppServicePlansRestartWebAppsOptionalParams, callback: msRest.ServiceCallback<void>): void;
    /**
     * Get all apps associated with an App Service plan.
     * @summary Get all apps associated with an App Service plan.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the App Service plan.
     * @param [options] The optional parameters
     * @returns Promise<Models.AppServicePlansListWebAppsResponse>
     */
    listWebApps(resourceGroupName: string, name: string, options?: Models.AppServicePlansListWebAppsOptionalParams): Promise<Models.AppServicePlansListWebAppsResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the App Service plan.
     * @param callback The callback
     */
    listWebApps(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<Models.WebAppCollection>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the App Service plan.
     * @param options The optional parameters
     * @param callback The callback
     */
    listWebApps(resourceGroupName: string, name: string, options: Models.AppServicePlansListWebAppsOptionalParams, callback: msRest.ServiceCallback<Models.WebAppCollection>): void;
    /**
     * Gets all selectable SKUs for a given App Service Plan
     * @summary Gets all selectable SKUs for a given App Service Plan
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of App Service Plan
     * @param [options] The optional parameters
     * @returns Promise<Models.AppServicePlansGetServerFarmSkusResponse>
     */
    getServerFarmSkus(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.AppServicePlansGetServerFarmSkusResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of App Service Plan
     * @param callback The callback
     */
    getServerFarmSkus(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<any>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of App Service Plan
     * @param options The optional parameters
     * @param callback The callback
     */
    getServerFarmSkus(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
    /**
     * Gets server farm usage information
     * @summary Gets server farm usage information
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of App Service Plan
     * @param [options] The optional parameters
     * @returns Promise<Models.AppServicePlansListUsagesResponse>
     */
    listUsages(resourceGroupName: string, name: string, options?: Models.AppServicePlansListUsagesOptionalParams): Promise<Models.AppServicePlansListUsagesResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of App Service Plan
     * @param callback The callback
     */
    listUsages(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<Models.CsmUsageQuotaCollection>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of App Service Plan
     * @param options The optional parameters
     * @param callback The callback
     */
    listUsages(resourceGroupName: string, name: string, options: Models.AppServicePlansListUsagesOptionalParams, callback: msRest.ServiceCallback<Models.CsmUsageQuotaCollection>): void;
    /**
     * Get all Virtual Networks associated with an App Service plan.
     * @summary Get all Virtual Networks associated with an App Service plan.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the App Service plan.
     * @param [options] The optional parameters
     * @returns Promise<Models.AppServicePlansListVnetsResponse>
     */
    listVnets(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.AppServicePlansListVnetsResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the App Service plan.
     * @param callback The callback
     */
    listVnets(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<Models.VnetInfo[]>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the App Service plan.
     * @param options The optional parameters
     * @param callback The callback
     */
    listVnets(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.VnetInfo[]>): void;
    /**
     * Get a Virtual Network associated with an App Service plan.
     * @summary Get a Virtual Network associated with an App Service plan.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the App Service plan.
     * @param vnetName Name of the Virtual Network.
     * @param [options] The optional parameters
     * @returns Promise<Models.AppServicePlansGetVnetFromServerFarmResponse>
     */
    getVnetFromServerFarm(resourceGroupName: string, name: string, vnetName: string, options?: msRest.RequestOptionsBase): Promise<Models.AppServicePlansGetVnetFromServerFarmResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the App Service plan.
     * @param vnetName Name of the Virtual Network.
     * @param callback The callback
     */
    getVnetFromServerFarm(resourceGroupName: string, name: string, vnetName: string, callback: msRest.ServiceCallback<Models.VnetInfo>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the App Service plan.
     * @param vnetName Name of the Virtual Network.
     * @param options The optional parameters
     * @param callback The callback
     */
    getVnetFromServerFarm(resourceGroupName: string, name: string, vnetName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.VnetInfo>): void;
    /**
     * Get a Virtual Network gateway.
     * @summary Get a Virtual Network gateway.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the App Service plan.
     * @param vnetName Name of the Virtual Network.
     * @param gatewayName Name of the gateway. Only the 'primary' gateway is supported.
     * @param [options] The optional parameters
     * @returns Promise<Models.AppServicePlansGetVnetGatewayResponse>
     */
    getVnetGateway(resourceGroupName: string, name: string, vnetName: string, gatewayName: string, options?: msRest.RequestOptionsBase): Promise<Models.AppServicePlansGetVnetGatewayResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the App Service plan.
     * @param vnetName Name of the Virtual Network.
     * @param gatewayName Name of the gateway. Only the 'primary' gateway is supported.
     * @param callback The callback
     */
    getVnetGateway(resourceGroupName: string, name: string, vnetName: string, gatewayName: string, callback: msRest.ServiceCallback<Models.VnetGateway>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the App Service plan.
     * @param vnetName Name of the Virtual Network.
     * @param gatewayName Name of the gateway. Only the 'primary' gateway is supported.
     * @param options The optional parameters
     * @param callback The callback
     */
    getVnetGateway(resourceGroupName: string, name: string, vnetName: string, gatewayName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.VnetGateway>): void;
    /**
     * Update a Virtual Network gateway.
     * @summary Update a Virtual Network gateway.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the App Service plan.
     * @param vnetName Name of the Virtual Network.
     * @param gatewayName Name of the gateway. Only the 'primary' gateway is supported.
     * @param connectionEnvelope Definition of the gateway.
     * @param [options] The optional parameters
     * @returns Promise<Models.AppServicePlansUpdateVnetGatewayResponse>
     */
    updateVnetGateway(resourceGroupName: string, name: string, vnetName: string, gatewayName: string, connectionEnvelope: Models.VnetGateway, options?: msRest.RequestOptionsBase): Promise<Models.AppServicePlansUpdateVnetGatewayResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the App Service plan.
     * @param vnetName Name of the Virtual Network.
     * @param gatewayName Name of the gateway. Only the 'primary' gateway is supported.
     * @param connectionEnvelope Definition of the gateway.
     * @param callback The callback
     */
    updateVnetGateway(resourceGroupName: string, name: string, vnetName: string, gatewayName: string, connectionEnvelope: Models.VnetGateway, callback: msRest.ServiceCallback<Models.VnetGateway>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the App Service plan.
     * @param vnetName Name of the Virtual Network.
     * @param gatewayName Name of the gateway. Only the 'primary' gateway is supported.
     * @param connectionEnvelope Definition of the gateway.
     * @param options The optional parameters
     * @param callback The callback
     */
    updateVnetGateway(resourceGroupName: string, name: string, vnetName: string, gatewayName: string, connectionEnvelope: Models.VnetGateway, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.VnetGateway>): void;
    /**
     * Get all routes that are associated with a Virtual Network in an App Service plan.
     * @summary Get all routes that are associated with a Virtual Network in an App Service plan.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the App Service plan.
     * @param vnetName Name of the Virtual Network.
     * @param [options] The optional parameters
     * @returns Promise<Models.AppServicePlansListRoutesForVnetResponse>
     */
    listRoutesForVnet(resourceGroupName: string, name: string, vnetName: string, options?: msRest.RequestOptionsBase): Promise<Models.AppServicePlansListRoutesForVnetResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the App Service plan.
     * @param vnetName Name of the Virtual Network.
     * @param callback The callback
     */
    listRoutesForVnet(resourceGroupName: string, name: string, vnetName: string, callback: msRest.ServiceCallback<Models.VnetRoute[]>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the App Service plan.
     * @param vnetName Name of the Virtual Network.
     * @param options The optional parameters
     * @param callback The callback
     */
    listRoutesForVnet(resourceGroupName: string, name: string, vnetName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.VnetRoute[]>): void;
    /**
     * Get a Virtual Network route in an App Service plan.
     * @summary Get a Virtual Network route in an App Service plan.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the App Service plan.
     * @param vnetName Name of the Virtual Network.
     * @param routeName Name of the Virtual Network route.
     * @param [options] The optional parameters
     * @returns Promise<Models.AppServicePlansGetRouteForVnetResponse>
     */
    getRouteForVnet(resourceGroupName: string, name: string, vnetName: string, routeName: string, options?: msRest.RequestOptionsBase): Promise<Models.AppServicePlansGetRouteForVnetResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the App Service plan.
     * @param vnetName Name of the Virtual Network.
     * @param routeName Name of the Virtual Network route.
     * @param callback The callback
     */
    getRouteForVnet(resourceGroupName: string, name: string, vnetName: string, routeName: string, callback: msRest.ServiceCallback<Models.VnetRoute[]>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the App Service plan.
     * @param vnetName Name of the Virtual Network.
     * @param routeName Name of the Virtual Network route.
     * @param options The optional parameters
     * @param callback The callback
     */
    getRouteForVnet(resourceGroupName: string, name: string, vnetName: string, routeName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.VnetRoute[]>): void;
    /**
     * Create or update a Virtual Network route in an App Service plan.
     * @summary Create or update a Virtual Network route in an App Service plan.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the App Service plan.
     * @param vnetName Name of the Virtual Network.
     * @param routeName Name of the Virtual Network route.
     * @param route Definition of the Virtual Network route.
     * @param [options] The optional parameters
     * @returns Promise<Models.AppServicePlansCreateOrUpdateVnetRouteResponse>
     */
    createOrUpdateVnetRoute(resourceGroupName: string, name: string, vnetName: string, routeName: string, route: Models.VnetRoute, options?: msRest.RequestOptionsBase): Promise<Models.AppServicePlansCreateOrUpdateVnetRouteResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the App Service plan.
     * @param vnetName Name of the Virtual Network.
     * @param routeName Name of the Virtual Network route.
     * @param route Definition of the Virtual Network route.
     * @param callback The callback
     */
    createOrUpdateVnetRoute(resourceGroupName: string, name: string, vnetName: string, routeName: string, route: Models.VnetRoute, callback: msRest.ServiceCallback<Models.VnetRoute>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the App Service plan.
     * @param vnetName Name of the Virtual Network.
     * @param routeName Name of the Virtual Network route.
     * @param route Definition of the Virtual Network route.
     * @param options The optional parameters
     * @param callback The callback
     */
    createOrUpdateVnetRoute(resourceGroupName: string, name: string, vnetName: string, routeName: string, route: Models.VnetRoute, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.VnetRoute>): void;
    /**
     * Delete a Virtual Network route in an App Service plan.
     * @summary Delete a Virtual Network route in an App Service plan.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the App Service plan.
     * @param vnetName Name of the Virtual Network.
     * @param routeName Name of the Virtual Network route.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    deleteVnetRoute(resourceGroupName: string, name: string, vnetName: string, routeName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the App Service plan.
     * @param vnetName Name of the Virtual Network.
     * @param routeName Name of the Virtual Network route.
     * @param callback The callback
     */
    deleteVnetRoute(resourceGroupName: string, name: string, vnetName: string, routeName: string, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the App Service plan.
     * @param vnetName Name of the Virtual Network.
     * @param routeName Name of the Virtual Network route.
     * @param options The optional parameters
     * @param callback The callback
     */
    deleteVnetRoute(resourceGroupName: string, name: string, vnetName: string, routeName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
    /**
     * Create or update a Virtual Network route in an App Service plan.
     * @summary Create or update a Virtual Network route in an App Service plan.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the App Service plan.
     * @param vnetName Name of the Virtual Network.
     * @param routeName Name of the Virtual Network route.
     * @param route Definition of the Virtual Network route.
     * @param [options] The optional parameters
     * @returns Promise<Models.AppServicePlansUpdateVnetRouteResponse>
     */
    updateVnetRoute(resourceGroupName: string, name: string, vnetName: string, routeName: string, route: Models.VnetRoute, options?: msRest.RequestOptionsBase): Promise<Models.AppServicePlansUpdateVnetRouteResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the App Service plan.
     * @param vnetName Name of the Virtual Network.
     * @param routeName Name of the Virtual Network route.
     * @param route Definition of the Virtual Network route.
     * @param callback The callback
     */
    updateVnetRoute(resourceGroupName: string, name: string, vnetName: string, routeName: string, route: Models.VnetRoute, callback: msRest.ServiceCallback<Models.VnetRoute>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the App Service plan.
     * @param vnetName Name of the Virtual Network.
     * @param routeName Name of the Virtual Network route.
     * @param route Definition of the Virtual Network route.
     * @param options The optional parameters
     * @param callback The callback
     */
    updateVnetRoute(resourceGroupName: string, name: string, vnetName: string, routeName: string, route: Models.VnetRoute, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.VnetRoute>): void;
    /**
     * Reboot a worker machine in an App Service plan.
     * @summary Reboot a worker machine in an App Service plan.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the App Service plan.
     * @param workerName Name of worker machine, which typically starts with RD.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    rebootWorker(resourceGroupName: string, name: string, workerName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the App Service plan.
     * @param workerName Name of worker machine, which typically starts with RD.
     * @param callback The callback
     */
    rebootWorker(resourceGroupName: string, name: string, workerName: string, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the App Service plan.
     * @param workerName Name of worker machine, which typically starts with RD.
     * @param options The optional parameters
     * @param callback The callback
     */
    rebootWorker(resourceGroupName: string, name: string, workerName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
    /**
     * Creates or updates an App Service Plan.
     * @summary Creates or updates an App Service Plan.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the App Service plan.
     * @param appServicePlan Details of the App Service plan.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    beginCreateOrUpdate(resourceGroupName: string, name: string, appServicePlan: Models.AppServicePlan, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller>;
    /**
     * Get all App Service plans for a subscription.
     * @summary Get all App Service plans for a subscription.
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param [options] The optional parameters
     * @returns Promise<Models.AppServicePlansListNextResponse>
     */
    listNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.AppServicePlansListNextResponse>;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param callback The callback
     */
    listNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.AppServicePlanCollection>): void;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param options The optional parameters
     * @param callback The callback
     */
    listNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.AppServicePlanCollection>): void;
    /**
     * Get all App Service plans in a resource group.
     * @summary Get all App Service plans in a resource group.
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param [options] The optional parameters
     * @returns Promise<Models.AppServicePlansListByResourceGroupNextResponse>
     */
    listByResourceGroupNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.AppServicePlansListByResourceGroupNextResponse>;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param callback The callback
     */
    listByResourceGroupNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.AppServicePlanCollection>): void;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param options The optional parameters
     * @param callback The callback
     */
    listByResourceGroupNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.AppServicePlanCollection>): void;
    /**
     * Get all apps that use a Hybrid Connection in an App Service Plan.
     * @summary Get all apps that use a Hybrid Connection in an App Service Plan.
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param [options] The optional parameters
     * @returns Promise<Models.AppServicePlansListWebAppsByHybridConnectionNextResponse>
     */
    listWebAppsByHybridConnectionNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.AppServicePlansListWebAppsByHybridConnectionNextResponse>;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param callback The callback
     */
    listWebAppsByHybridConnectionNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.ResourceCollection>): void;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param options The optional parameters
     * @param callback The callback
     */
    listWebAppsByHybridConnectionNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ResourceCollection>): void;
    /**
     * Retrieve all Hybrid Connections in use in an App Service plan.
     * @summary Retrieve all Hybrid Connections in use in an App Service plan.
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param [options] The optional parameters
     * @returns Promise<Models.AppServicePlansListHybridConnectionsNextResponse>
     */
    listHybridConnectionsNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.AppServicePlansListHybridConnectionsNextResponse>;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param callback The callback
     */
    listHybridConnectionsNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.HybridConnectionCollection>): void;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param options The optional parameters
     * @param callback The callback
     */
    listHybridConnectionsNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.HybridConnectionCollection>): void;
    /**
     * Get metrics that can be queried for an App Service plan, and their definitions.
     * @summary Get metrics that can be queried for an App Service plan, and their definitions.
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param [options] The optional parameters
     * @returns Promise<Models.AppServicePlansListMetricDefintionsNextResponse>
     */
    listMetricDefintionsNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.AppServicePlansListMetricDefintionsNextResponse>;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param callback The callback
     */
    listMetricDefintionsNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.ResourceMetricDefinitionCollection>): void;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param options The optional parameters
     * @param callback The callback
     */
    listMetricDefintionsNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ResourceMetricDefinitionCollection>): void;
    /**
     * Get metrics for an App Service plan.
     * @summary Get metrics for an App Service plan.
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param [options] The optional parameters
     * @returns Promise<Models.AppServicePlansListMetricsNextResponse>
     */
    listMetricsNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.AppServicePlansListMetricsNextResponse>;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param callback The callback
     */
    listMetricsNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.ResourceMetricCollection>): void;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param options The optional parameters
     * @param callback The callback
     */
    listMetricsNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ResourceMetricCollection>): void;
    /**
     * Get all apps associated with an App Service plan.
     * @summary Get all apps associated with an App Service plan.
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param [options] The optional parameters
     * @returns Promise<Models.AppServicePlansListWebAppsNextResponse>
     */
    listWebAppsNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.AppServicePlansListWebAppsNextResponse>;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param callback The callback
     */
    listWebAppsNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.WebAppCollection>): void;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param options The optional parameters
     * @param callback The callback
     */
    listWebAppsNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.WebAppCollection>): void;
    /**
     * Gets server farm usage information
     * @summary Gets server farm usage information
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param [options] The optional parameters
     * @returns Promise<Models.AppServicePlansListUsagesNextResponse>
     */
    listUsagesNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.AppServicePlansListUsagesNextResponse>;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param callback The callback
     */
    listUsagesNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.CsmUsageQuotaCollection>): void;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param options The optional parameters
     * @param callback The callback
     */
    listUsagesNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CsmUsageQuotaCollection>): void;
}
//# sourceMappingURL=appServicePlans.d.ts.map