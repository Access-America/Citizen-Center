/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
import * as tslib_1 from "tslib";
import * as msRest from "@azure/ms-rest-js";
import * as Models from "./models";
import * as Mappers from "./models/mappers";
import * as Parameters from "./models/parameters";
import * as operations from "./operations";
import { WebSiteManagementClientContext } from "./webSiteManagementClientContext";
var WebSiteManagementClient = /** @class */ (function (_super) {
    tslib_1.__extends(WebSiteManagementClient, _super);
    /**
     * Initializes a new instance of the WebSiteManagementClient class.
     * @param credentials Credentials needed for the client to connect to Azure.
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g.
     * 00000000-0000-0000-0000-000000000000).
     * @param [options] The parameter options
     */
    function WebSiteManagementClient(credentials, subscriptionId, options) {
        var _this = _super.call(this, credentials, subscriptionId, options) || this;
        _this.appServiceCertificateOrders = new operations.AppServiceCertificateOrders(_this);
        _this.certificateRegistrationProvider = new operations.CertificateRegistrationProvider(_this);
        _this.domains = new operations.Domains(_this);
        _this.topLevelDomains = new operations.TopLevelDomains(_this);
        _this.domainRegistrationProvider = new operations.DomainRegistrationProvider(_this);
        _this.certificates = new operations.Certificates(_this);
        _this.deletedWebApps = new operations.DeletedWebApps(_this);
        _this.diagnostics = new operations.Diagnostics(_this);
        _this.provider = new operations.Provider(_this);
        _this.recommendations = new operations.Recommendations(_this);
        _this.webApps = new operations.WebApps(_this);
        _this.appServiceEnvironments = new operations.AppServiceEnvironments(_this);
        _this.appServicePlans = new operations.AppServicePlans(_this);
        _this.resourceHealthMetadata = new operations.ResourceHealthMetadataOperations(_this);
        return _this;
    }
    WebSiteManagementClient.prototype.getPublishingUser = function (options, callback) {
        return this.sendOperationRequest({
            options: options
        }, getPublishingUserOperationSpec, callback);
    };
    WebSiteManagementClient.prototype.updatePublishingUser = function (userDetails, options, callback) {
        return this.sendOperationRequest({
            userDetails: userDetails,
            options: options
        }, updatePublishingUserOperationSpec, callback);
    };
    WebSiteManagementClient.prototype.listSourceControls = function (options, callback) {
        return this.sendOperationRequest({
            options: options
        }, listSourceControlsOperationSpec, callback);
    };
    WebSiteManagementClient.prototype.getSourceControl = function (sourceControlType, options, callback) {
        return this.sendOperationRequest({
            sourceControlType: sourceControlType,
            options: options
        }, getSourceControlOperationSpec, callback);
    };
    WebSiteManagementClient.prototype.updateSourceControl = function (sourceControlType, requestMessage, options, callback) {
        return this.sendOperationRequest({
            sourceControlType: sourceControlType,
            requestMessage: requestMessage,
            options: options
        }, updateSourceControlOperationSpec, callback);
    };
    WebSiteManagementClient.prototype.listBillingMeters = function (options, callback) {
        return this.sendOperationRequest({
            options: options
        }, listBillingMetersOperationSpec, callback);
    };
    WebSiteManagementClient.prototype.checkNameAvailability = function (name, type, options, callback) {
        return this.sendOperationRequest({
            name: name,
            type: type,
            options: options
        }, checkNameAvailabilityOperationSpec, callback);
    };
    WebSiteManagementClient.prototype.getSubscriptionDeploymentLocations = function (options, callback) {
        return this.sendOperationRequest({
            options: options
        }, getSubscriptionDeploymentLocationsOperationSpec, callback);
    };
    WebSiteManagementClient.prototype.listGeoRegions = function (options, callback) {
        return this.sendOperationRequest({
            options: options
        }, listGeoRegionsOperationSpec, callback);
    };
    WebSiteManagementClient.prototype.listSiteIdentifiersAssignedToHostName = function (options, callback) {
        return this.sendOperationRequest({
            options: options
        }, listSiteIdentifiersAssignedToHostNameOperationSpec, callback);
    };
    WebSiteManagementClient.prototype.listPremierAddOnOffers = function (options, callback) {
        return this.sendOperationRequest({
            options: options
        }, listPremierAddOnOffersOperationSpec, callback);
    };
    WebSiteManagementClient.prototype.listSkus = function (options, callback) {
        return this.sendOperationRequest({
            options: options
        }, listSkusOperationSpec, callback);
    };
    WebSiteManagementClient.prototype.verifyHostingEnvironmentVnet = function (parameters, options, callback) {
        return this.sendOperationRequest({
            parameters: parameters,
            options: options
        }, verifyHostingEnvironmentVnetOperationSpec, callback);
    };
    WebSiteManagementClient.prototype.move = function (resourceGroupName, moveResourceEnvelope, options, callback) {
        return this.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            moveResourceEnvelope: moveResourceEnvelope,
            options: options
        }, moveOperationSpec, callback);
    };
    WebSiteManagementClient.prototype.validate = function (resourceGroupName, validateRequest, options, callback) {
        return this.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            validateRequest: validateRequest,
            options: options
        }, validateOperationSpec, callback);
    };
    WebSiteManagementClient.prototype.validateContainerSettings = function (validateContainerSettingsRequest, resourceGroupName, options, callback) {
        return this.sendOperationRequest({
            validateContainerSettingsRequest: validateContainerSettingsRequest,
            resourceGroupName: resourceGroupName,
            options: options
        }, validateContainerSettingsOperationSpec, callback);
    };
    WebSiteManagementClient.prototype.validateMove = function (resourceGroupName, moveResourceEnvelope, options, callback) {
        return this.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            moveResourceEnvelope: moveResourceEnvelope,
            options: options
        }, validateMoveOperationSpec, callback);
    };
    WebSiteManagementClient.prototype.listSourceControlsNext = function (nextPageLink, options, callback) {
        return this.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, listSourceControlsNextOperationSpec, callback);
    };
    WebSiteManagementClient.prototype.listBillingMetersNext = function (nextPageLink, options, callback) {
        return this.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, listBillingMetersNextOperationSpec, callback);
    };
    WebSiteManagementClient.prototype.listGeoRegionsNext = function (nextPageLink, options, callback) {
        return this.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, listGeoRegionsNextOperationSpec, callback);
    };
    WebSiteManagementClient.prototype.listSiteIdentifiersAssignedToHostNameNext = function (nextPageLink, options, callback) {
        return this.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, listSiteIdentifiersAssignedToHostNameNextOperationSpec, callback);
    };
    WebSiteManagementClient.prototype.listPremierAddOnOffersNext = function (nextPageLink, options, callback) {
        return this.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, listPremierAddOnOffersNextOperationSpec, callback);
    };
    return WebSiteManagementClient;
}(WebSiteManagementClientContext));
// Operation Specifications
var serializer = new msRest.Serializer(Mappers);
var getPublishingUserOperationSpec = {
    httpMethod: "GET",
    path: "providers/Microsoft.Web/publishingUsers/web",
    queryParameters: [
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.User
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var updatePublishingUserOperationSpec = {
    httpMethod: "PUT",
    path: "providers/Microsoft.Web/publishingUsers/web",
    queryParameters: [
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "userDetails",
        mapper: tslib_1.__assign({}, Mappers.User, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.User
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var listSourceControlsOperationSpec = {
    httpMethod: "GET",
    path: "providers/Microsoft.Web/sourcecontrols",
    queryParameters: [
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.SourceControlCollection
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var getSourceControlOperationSpec = {
    httpMethod: "GET",
    path: "providers/Microsoft.Web/sourcecontrols/{sourceControlType}",
    urlParameters: [
        Parameters.sourceControlType
    ],
    queryParameters: [
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.SourceControl
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var updateSourceControlOperationSpec = {
    httpMethod: "PUT",
    path: "providers/Microsoft.Web/sourcecontrols/{sourceControlType}",
    urlParameters: [
        Parameters.sourceControlType
    ],
    queryParameters: [
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "requestMessage",
        mapper: tslib_1.__assign({}, Mappers.SourceControl, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.SourceControl
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var listBillingMetersOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/providers/Microsoft.Web/billingMeters",
    urlParameters: [
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.billingLocation,
        Parameters.osType,
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.BillingMeterCollection
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var checkNameAvailabilityOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/providers/Microsoft.Web/checknameavailability",
    urlParameters: [
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: {
            name: "name",
            type: "type",
            isFqdn: [
                "options",
                "isFqdn"
            ]
        },
        mapper: tslib_1.__assign({}, Mappers.ResourceNameAvailabilityRequest, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.ResourceNameAvailability
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var getSubscriptionDeploymentLocationsOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/providers/Microsoft.Web/deploymentLocations",
    urlParameters: [
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.DeploymentLocations
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var listGeoRegionsOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/providers/Microsoft.Web/geoRegions",
    urlParameters: [
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.sku,
        Parameters.linuxWorkersEnabled,
        Parameters.xenonWorkersEnabled,
        Parameters.linuxDynamicWorkersEnabled,
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.GeoRegionCollection
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var listSiteIdentifiersAssignedToHostNameOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/providers/Microsoft.Web/listSitesAssignedToHostName",
    urlParameters: [
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: {
            name: [
                "options",
                "name"
            ]
        },
        mapper: tslib_1.__assign({}, Mappers.NameIdentifier, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.IdentifierCollection
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var listPremierAddOnOffersOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/providers/Microsoft.Web/premieraddonoffers",
    urlParameters: [
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.PremierAddOnOfferCollection
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var listSkusOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/providers/Microsoft.Web/skus",
    urlParameters: [
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.SkuInfos
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var verifyHostingEnvironmentVnetOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/providers/Microsoft.Web/verifyHostingEnvironmentVnet",
    urlParameters: [
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "parameters",
        mapper: tslib_1.__assign({}, Mappers.VnetParameters, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.VnetValidationFailureDetails
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var moveOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/moveResources",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "moveResourceEnvelope",
        mapper: tslib_1.__assign({}, Mappers.CsmMoveResourceEnvelope, { required: true })
    },
    responses: {
        204: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var validateOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/validate",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "validateRequest",
        mapper: tslib_1.__assign({}, Mappers.ValidateRequest, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.ValidateResponse
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var validateContainerSettingsOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/validateContainerSettings",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "validateContainerSettingsRequest",
        mapper: tslib_1.__assign({}, Mappers.ValidateContainerSettingsRequest, { required: true })
    },
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Object"
                }
            }
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var validateMoveOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/validateMoveResources",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion0
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "moveResourceEnvelope",
        mapper: tslib_1.__assign({}, Mappers.CsmMoveResourceEnvelope, { required: true })
    },
    responses: {
        204: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var listSourceControlsNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.SourceControlCollection
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var listBillingMetersNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.BillingMeterCollection
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var listGeoRegionsNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.GeoRegionCollection
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var listSiteIdentifiersAssignedToHostNameNextOperationSpec = {
    httpMethod: "POST",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.IdentifierCollection
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
var listPremierAddOnOffersNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.PremierAddOnOfferCollection
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    serializer: serializer
};
export { WebSiteManagementClient, WebSiteManagementClientContext, Models as WebSiteManagementModels, Mappers as WebSiteManagementMappers };
export * from "./operations";
//# sourceMappingURL=webSiteManagementClient.js.map