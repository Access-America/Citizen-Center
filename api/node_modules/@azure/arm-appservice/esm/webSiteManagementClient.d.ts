import * as msRest from "@azure/ms-rest-js";
import * as Models from "./models";
import * as Mappers from "./models/mappers";
import * as operations from "./operations";
import { WebSiteManagementClientContext } from "./webSiteManagementClientContext";
declare class WebSiteManagementClient extends WebSiteManagementClientContext {
    appServiceCertificateOrders: operations.AppServiceCertificateOrders;
    certificateRegistrationProvider: operations.CertificateRegistrationProvider;
    domains: operations.Domains;
    topLevelDomains: operations.TopLevelDomains;
    domainRegistrationProvider: operations.DomainRegistrationProvider;
    certificates: operations.Certificates;
    deletedWebApps: operations.DeletedWebApps;
    diagnostics: operations.Diagnostics;
    provider: operations.Provider;
    recommendations: operations.Recommendations;
    webApps: operations.WebApps;
    appServiceEnvironments: operations.AppServiceEnvironments;
    appServicePlans: operations.AppServicePlans;
    resourceHealthMetadata: operations.ResourceHealthMetadataOperations;
    /**
     * Initializes a new instance of the WebSiteManagementClient class.
     * @param credentials Credentials needed for the client to connect to Azure.
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g.
     * 00000000-0000-0000-0000-000000000000).
     * @param [options] The parameter options
     */
    constructor(credentials: msRest.ServiceClientCredentials, subscriptionId: string, options?: Models.WebSiteManagementClientOptions);
    /**
     * Gets publishing user
     * @summary Gets publishing user
     * @param [options] The optional parameters
     * @returns Promise<Models.GetPublishingUserResponse>
     */
    getPublishingUser(options?: msRest.RequestOptionsBase): Promise<Models.GetPublishingUserResponse>;
    /**
     * @param callback The callback
     */
    getPublishingUser(callback: msRest.ServiceCallback<Models.User>): void;
    /**
     * @param options The optional parameters
     * @param callback The callback
     */
    getPublishingUser(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.User>): void;
    /**
     * Updates publishing user
     * @summary Updates publishing user
     * @param userDetails Details of publishing user
     * @param [options] The optional parameters
     * @returns Promise<Models.UpdatePublishingUserResponse>
     */
    updatePublishingUser(userDetails: Models.User, options?: msRest.RequestOptionsBase): Promise<Models.UpdatePublishingUserResponse>;
    /**
     * @param userDetails Details of publishing user
     * @param callback The callback
     */
    updatePublishingUser(userDetails: Models.User, callback: msRest.ServiceCallback<Models.User>): void;
    /**
     * @param userDetails Details of publishing user
     * @param options The optional parameters
     * @param callback The callback
     */
    updatePublishingUser(userDetails: Models.User, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.User>): void;
    /**
     * Gets the source controls available for Azure websites.
     * @summary Gets the source controls available for Azure websites.
     * @param [options] The optional parameters
     * @returns Promise<Models.ListSourceControlsResponse>
     */
    listSourceControls(options?: msRest.RequestOptionsBase): Promise<Models.ListSourceControlsResponse>;
    /**
     * @param callback The callback
     */
    listSourceControls(callback: msRest.ServiceCallback<Models.SourceControlCollection>): void;
    /**
     * @param options The optional parameters
     * @param callback The callback
     */
    listSourceControls(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SourceControlCollection>): void;
    /**
     * Gets source control token
     * @summary Gets source control token
     * @param sourceControlType Type of source control
     * @param [options] The optional parameters
     * @returns Promise<Models.GetSourceControlResponse>
     */
    getSourceControl(sourceControlType: string, options?: msRest.RequestOptionsBase): Promise<Models.GetSourceControlResponse>;
    /**
     * @param sourceControlType Type of source control
     * @param callback The callback
     */
    getSourceControl(sourceControlType: string, callback: msRest.ServiceCallback<Models.SourceControl>): void;
    /**
     * @param sourceControlType Type of source control
     * @param options The optional parameters
     * @param callback The callback
     */
    getSourceControl(sourceControlType: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SourceControl>): void;
    /**
     * Updates source control token
     * @summary Updates source control token
     * @param sourceControlType Type of source control
     * @param requestMessage Source control token information
     * @param [options] The optional parameters
     * @returns Promise<Models.UpdateSourceControlResponse>
     */
    updateSourceControl(sourceControlType: string, requestMessage: Models.SourceControl, options?: msRest.RequestOptionsBase): Promise<Models.UpdateSourceControlResponse>;
    /**
     * @param sourceControlType Type of source control
     * @param requestMessage Source control token information
     * @param callback The callback
     */
    updateSourceControl(sourceControlType: string, requestMessage: Models.SourceControl, callback: msRest.ServiceCallback<Models.SourceControl>): void;
    /**
     * @param sourceControlType Type of source control
     * @param requestMessage Source control token information
     * @param options The optional parameters
     * @param callback The callback
     */
    updateSourceControl(sourceControlType: string, requestMessage: Models.SourceControl, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SourceControl>): void;
    /**
     * Gets a list of meters for a given location.
     * @summary Gets a list of meters for a given location.
     * @param [options] The optional parameters
     * @returns Promise<Models.ListBillingMetersResponse>
     */
    listBillingMeters(options?: Models.WebSiteManagementClientListBillingMetersOptionalParams): Promise<Models.ListBillingMetersResponse>;
    /**
     * @param callback The callback
     */
    listBillingMeters(callback: msRest.ServiceCallback<Models.BillingMeterCollection>): void;
    /**
     * @param options The optional parameters
     * @param callback The callback
     */
    listBillingMeters(options: Models.WebSiteManagementClientListBillingMetersOptionalParams, callback: msRest.ServiceCallback<Models.BillingMeterCollection>): void;
    /**
     * Check if a resource name is available.
     * @summary Check if a resource name is available.
     * @param name Resource name to verify.
     * @param type Resource type used for verification. Possible values include: 'Site', 'Slot',
     * 'HostingEnvironment', 'PublishingUser', 'Microsoft.Web/sites', 'Microsoft.Web/sites/slots',
     * 'Microsoft.Web/hostingEnvironments', 'Microsoft.Web/publishingUsers'
     * @param [options] The optional parameters
     * @returns Promise<Models.CheckNameAvailabilityResponse>
     */
    checkNameAvailability(name: string, type: Models.CheckNameResourceTypes, options?: Models.WebSiteManagementClientCheckNameAvailabilityOptionalParams): Promise<Models.CheckNameAvailabilityResponse>;
    /**
     * @param name Resource name to verify.
     * @param type Resource type used for verification. Possible values include: 'Site', 'Slot',
     * 'HostingEnvironment', 'PublishingUser', 'Microsoft.Web/sites', 'Microsoft.Web/sites/slots',
     * 'Microsoft.Web/hostingEnvironments', 'Microsoft.Web/publishingUsers'
     * @param callback The callback
     */
    checkNameAvailability(name: string, type: Models.CheckNameResourceTypes, callback: msRest.ServiceCallback<Models.ResourceNameAvailability>): void;
    /**
     * @param name Resource name to verify.
     * @param type Resource type used for verification. Possible values include: 'Site', 'Slot',
     * 'HostingEnvironment', 'PublishingUser', 'Microsoft.Web/sites', 'Microsoft.Web/sites/slots',
     * 'Microsoft.Web/hostingEnvironments', 'Microsoft.Web/publishingUsers'
     * @param options The optional parameters
     * @param callback The callback
     */
    checkNameAvailability(name: string, type: Models.CheckNameResourceTypes, options: Models.WebSiteManagementClientCheckNameAvailabilityOptionalParams, callback: msRest.ServiceCallback<Models.ResourceNameAvailability>): void;
    /**
     * Gets list of available geo regions plus ministamps
     * @summary Gets list of available geo regions plus ministamps
     * @param [options] The optional parameters
     * @returns Promise<Models.GetSubscriptionDeploymentLocationsResponse>
     */
    getSubscriptionDeploymentLocations(options?: msRest.RequestOptionsBase): Promise<Models.GetSubscriptionDeploymentLocationsResponse>;
    /**
     * @param callback The callback
     */
    getSubscriptionDeploymentLocations(callback: msRest.ServiceCallback<Models.DeploymentLocations>): void;
    /**
     * @param options The optional parameters
     * @param callback The callback
     */
    getSubscriptionDeploymentLocations(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DeploymentLocations>): void;
    /**
     * Get a list of available geographical regions.
     * @summary Get a list of available geographical regions.
     * @param [options] The optional parameters
     * @returns Promise<Models.ListGeoRegionsResponse>
     */
    listGeoRegions(options?: Models.WebSiteManagementClientListGeoRegionsOptionalParams): Promise<Models.ListGeoRegionsResponse>;
    /**
     * @param callback The callback
     */
    listGeoRegions(callback: msRest.ServiceCallback<Models.GeoRegionCollection>): void;
    /**
     * @param options The optional parameters
     * @param callback The callback
     */
    listGeoRegions(options: Models.WebSiteManagementClientListGeoRegionsOptionalParams, callback: msRest.ServiceCallback<Models.GeoRegionCollection>): void;
    /**
     * List all apps that are assigned to a hostname.
     * @summary List all apps that are assigned to a hostname.
     * @param [options] The optional parameters
     * @returns Promise<Models.ListSiteIdentifiersAssignedToHostNameResponse>
     */
    listSiteIdentifiersAssignedToHostName(options?: Models.WebSiteManagementClientListSiteIdentifiersAssignedToHostNameOptionalParams): Promise<Models.ListSiteIdentifiersAssignedToHostNameResponse>;
    /**
     * @param callback The callback
     */
    listSiteIdentifiersAssignedToHostName(callback: msRest.ServiceCallback<Models.IdentifierCollection>): void;
    /**
     * @param options The optional parameters
     * @param callback The callback
     */
    listSiteIdentifiersAssignedToHostName(options: Models.WebSiteManagementClientListSiteIdentifiersAssignedToHostNameOptionalParams, callback: msRest.ServiceCallback<Models.IdentifierCollection>): void;
    /**
     * List all premier add-on offers.
     * @summary List all premier add-on offers.
     * @param [options] The optional parameters
     * @returns Promise<Models.ListPremierAddOnOffersResponse>
     */
    listPremierAddOnOffers(options?: msRest.RequestOptionsBase): Promise<Models.ListPremierAddOnOffersResponse>;
    /**
     * @param callback The callback
     */
    listPremierAddOnOffers(callback: msRest.ServiceCallback<Models.PremierAddOnOfferCollection>): void;
    /**
     * @param options The optional parameters
     * @param callback The callback
     */
    listPremierAddOnOffers(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PremierAddOnOfferCollection>): void;
    /**
     * List all SKUs.
     * @summary List all SKUs.
     * @param [options] The optional parameters
     * @returns Promise<Models.ListSkusResponse>
     */
    listSkus(options?: msRest.RequestOptionsBase): Promise<Models.ListSkusResponse>;
    /**
     * @param callback The callback
     */
    listSkus(callback: msRest.ServiceCallback<Models.SkuInfos>): void;
    /**
     * @param options The optional parameters
     * @param callback The callback
     */
    listSkus(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SkuInfos>): void;
    /**
     * Verifies if this VNET is compatible with an App Service Environment by analyzing the Network
     * Security Group rules.
     * @summary Verifies if this VNET is compatible with an App Service Environment by analyzing the
     * Network Security Group rules.
     * @param parameters VNET information
     * @param [options] The optional parameters
     * @returns Promise<Models.VerifyHostingEnvironmentVnetResponse>
     */
    verifyHostingEnvironmentVnet(parameters: Models.VnetParameters, options?: msRest.RequestOptionsBase): Promise<Models.VerifyHostingEnvironmentVnetResponse>;
    /**
     * @param parameters VNET information
     * @param callback The callback
     */
    verifyHostingEnvironmentVnet(parameters: Models.VnetParameters, callback: msRest.ServiceCallback<Models.VnetValidationFailureDetails>): void;
    /**
     * @param parameters VNET information
     * @param options The optional parameters
     * @param callback The callback
     */
    verifyHostingEnvironmentVnet(parameters: Models.VnetParameters, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.VnetValidationFailureDetails>): void;
    /**
     * Move resources between resource groups.
     * @summary Move resources between resource groups.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param moveResourceEnvelope Object that represents the resource to move.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    move(resourceGroupName: string, moveResourceEnvelope: Models.CsmMoveResourceEnvelope, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param moveResourceEnvelope Object that represents the resource to move.
     * @param callback The callback
     */
    move(resourceGroupName: string, moveResourceEnvelope: Models.CsmMoveResourceEnvelope, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param moveResourceEnvelope Object that represents the resource to move.
     * @param options The optional parameters
     * @param callback The callback
     */
    move(resourceGroupName: string, moveResourceEnvelope: Models.CsmMoveResourceEnvelope, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
    /**
     * Validate if a resource can be created.
     * @summary Validate if a resource can be created.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param validateRequest Request with the resources to validate.
     * @param [options] The optional parameters
     * @returns Promise<Models.ValidateResponse2>
     */
    validate(resourceGroupName: string, validateRequest: Models.ValidateRequest, options?: msRest.RequestOptionsBase): Promise<Models.ValidateResponse2>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param validateRequest Request with the resources to validate.
     * @param callback The callback
     */
    validate(resourceGroupName: string, validateRequest: Models.ValidateRequest, callback: msRest.ServiceCallback<Models.ValidateResponse>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param validateRequest Request with the resources to validate.
     * @param options The optional parameters
     * @param callback The callback
     */
    validate(resourceGroupName: string, validateRequest: Models.ValidateRequest, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ValidateResponse>): void;
    /**
     * Validate if the container settings are correct.
     * @summary Validate if the container settings are correct.
     * @param validateContainerSettingsRequest
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param [options] The optional parameters
     * @returns Promise<Models.ValidateContainerSettingsResponse>
     */
    validateContainerSettings(validateContainerSettingsRequest: Models.ValidateContainerSettingsRequest, resourceGroupName: string, options?: msRest.RequestOptionsBase): Promise<Models.ValidateContainerSettingsResponse>;
    /**
     * @param validateContainerSettingsRequest
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param callback The callback
     */
    validateContainerSettings(validateContainerSettingsRequest: Models.ValidateContainerSettingsRequest, resourceGroupName: string, callback: msRest.ServiceCallback<any>): void;
    /**
     * @param validateContainerSettingsRequest
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param options The optional parameters
     * @param callback The callback
     */
    validateContainerSettings(validateContainerSettingsRequest: Models.ValidateContainerSettingsRequest, resourceGroupName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
    /**
     * Validate whether a resource can be moved.
     * @summary Validate whether a resource can be moved.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param moveResourceEnvelope Object that represents the resource to move.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    validateMove(resourceGroupName: string, moveResourceEnvelope: Models.CsmMoveResourceEnvelope, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param moveResourceEnvelope Object that represents the resource to move.
     * @param callback The callback
     */
    validateMove(resourceGroupName: string, moveResourceEnvelope: Models.CsmMoveResourceEnvelope, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param moveResourceEnvelope Object that represents the resource to move.
     * @param options The optional parameters
     * @param callback The callback
     */
    validateMove(resourceGroupName: string, moveResourceEnvelope: Models.CsmMoveResourceEnvelope, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
    /**
     * Gets the source controls available for Azure websites.
     * @summary Gets the source controls available for Azure websites.
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param [options] The optional parameters
     * @returns Promise<Models.ListSourceControlsNextResponse>
     */
    listSourceControlsNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.ListSourceControlsNextResponse>;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param callback The callback
     */
    listSourceControlsNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.SourceControlCollection>): void;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param options The optional parameters
     * @param callback The callback
     */
    listSourceControlsNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SourceControlCollection>): void;
    /**
     * Gets a list of meters for a given location.
     * @summary Gets a list of meters for a given location.
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param [options] The optional parameters
     * @returns Promise<Models.ListBillingMetersNextResponse>
     */
    listBillingMetersNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.ListBillingMetersNextResponse>;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param callback The callback
     */
    listBillingMetersNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.BillingMeterCollection>): void;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param options The optional parameters
     * @param callback The callback
     */
    listBillingMetersNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.BillingMeterCollection>): void;
    /**
     * Get a list of available geographical regions.
     * @summary Get a list of available geographical regions.
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param [options] The optional parameters
     * @returns Promise<Models.ListGeoRegionsNextResponse>
     */
    listGeoRegionsNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.ListGeoRegionsNextResponse>;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param callback The callback
     */
    listGeoRegionsNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.GeoRegionCollection>): void;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param options The optional parameters
     * @param callback The callback
     */
    listGeoRegionsNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.GeoRegionCollection>): void;
    /**
     * List all apps that are assigned to a hostname.
     * @summary List all apps that are assigned to a hostname.
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param [options] The optional parameters
     * @returns Promise<Models.ListSiteIdentifiersAssignedToHostNameNextResponse>
     */
    listSiteIdentifiersAssignedToHostNameNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.ListSiteIdentifiersAssignedToHostNameNextResponse>;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param callback The callback
     */
    listSiteIdentifiersAssignedToHostNameNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.IdentifierCollection>): void;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param options The optional parameters
     * @param callback The callback
     */
    listSiteIdentifiersAssignedToHostNameNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.IdentifierCollection>): void;
    /**
     * List all premier add-on offers.
     * @summary List all premier add-on offers.
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param [options] The optional parameters
     * @returns Promise<Models.ListPremierAddOnOffersNextResponse>
     */
    listPremierAddOnOffersNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.ListPremierAddOnOffersNextResponse>;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param callback The callback
     */
    listPremierAddOnOffersNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.PremierAddOnOfferCollection>): void;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param options The optional parameters
     * @param callback The callback
     */
    listPremierAddOnOffersNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PremierAddOnOfferCollection>): void;
}
export { WebSiteManagementClient, WebSiteManagementClientContext, Models as WebSiteManagementModels, Mappers as WebSiteManagementMappers };
export * from "./operations";
//# sourceMappingURL=webSiteManagementClient.d.ts.map