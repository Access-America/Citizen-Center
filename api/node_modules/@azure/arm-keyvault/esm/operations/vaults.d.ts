import * as msRest from "@azure/ms-rest-js";
import * as msRestAzure from "@azure/ms-rest-azure-js";
import * as Models from "../models";
import { KeyVaultManagementClientContext } from "../keyVaultManagementClientContext";
/** Class representing a Vaults. */
export declare class Vaults {
    private readonly client;
    /**
     * Create a Vaults.
     * @param {KeyVaultManagementClientContext} client Reference to the service client.
     */
    constructor(client: KeyVaultManagementClientContext);
    /**
     * Create or update a key vault in the specified subscription.
     * @param resourceGroupName The name of the Resource Group to which the server belongs.
     * @param vaultName Name of the vault
     * @param parameters Parameters to create or update the vault
     * @param [options] The optional parameters
     * @returns Promise<Models.VaultsCreateOrUpdateResponse>
     */
    createOrUpdate(resourceGroupName: string, vaultName: string, parameters: Models.VaultCreateOrUpdateParameters, options?: msRest.RequestOptionsBase): Promise<Models.VaultsCreateOrUpdateResponse>;
    /**
     * Update a key vault in the specified subscription.
     * @param resourceGroupName The name of the Resource Group to which the server belongs.
     * @param vaultName Name of the vault
     * @param parameters Parameters to patch the vault
     * @param [options] The optional parameters
     * @returns Promise<Models.VaultsUpdateResponse>
     */
    update(resourceGroupName: string, vaultName: string, parameters: Models.VaultPatchParameters, options?: msRest.RequestOptionsBase): Promise<Models.VaultsUpdateResponse>;
    /**
     * @param resourceGroupName The name of the Resource Group to which the server belongs.
     * @param vaultName Name of the vault
     * @param parameters Parameters to patch the vault
     * @param callback The callback
     */
    update(resourceGroupName: string, vaultName: string, parameters: Models.VaultPatchParameters, callback: msRest.ServiceCallback<Models.Vault>): void;
    /**
     * @param resourceGroupName The name of the Resource Group to which the server belongs.
     * @param vaultName Name of the vault
     * @param parameters Parameters to patch the vault
     * @param options The optional parameters
     * @param callback The callback
     */
    update(resourceGroupName: string, vaultName: string, parameters: Models.VaultPatchParameters, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Vault>): void;
    /**
     * Deletes the specified Azure key vault.
     * @param resourceGroupName The name of the Resource Group to which the vault belongs.
     * @param vaultName The name of the vault to delete
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    deleteMethod(resourceGroupName: string, vaultName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * @param resourceGroupName The name of the Resource Group to which the vault belongs.
     * @param vaultName The name of the vault to delete
     * @param callback The callback
     */
    deleteMethod(resourceGroupName: string, vaultName: string, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param resourceGroupName The name of the Resource Group to which the vault belongs.
     * @param vaultName The name of the vault to delete
     * @param options The optional parameters
     * @param callback The callback
     */
    deleteMethod(resourceGroupName: string, vaultName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
    /**
     * Gets the specified Azure key vault.
     * @param resourceGroupName The name of the Resource Group to which the vault belongs.
     * @param vaultName The name of the vault.
     * @param [options] The optional parameters
     * @returns Promise<Models.VaultsGetResponse>
     */
    get(resourceGroupName: string, vaultName: string, options?: msRest.RequestOptionsBase): Promise<Models.VaultsGetResponse>;
    /**
     * @param resourceGroupName The name of the Resource Group to which the vault belongs.
     * @param vaultName The name of the vault.
     * @param callback The callback
     */
    get(resourceGroupName: string, vaultName: string, callback: msRest.ServiceCallback<Models.Vault>): void;
    /**
     * @param resourceGroupName The name of the Resource Group to which the vault belongs.
     * @param vaultName The name of the vault.
     * @param options The optional parameters
     * @param callback The callback
     */
    get(resourceGroupName: string, vaultName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Vault>): void;
    /**
     * Update access policies in a key vault in the specified subscription.
     * @param resourceGroupName The name of the Resource Group to which the vault belongs.
     * @param vaultName Name of the vault
     * @param operationKind Name of the operation. Possible values include: 'add', 'replace', 'remove'
     * @param parameters Access policy to merge into the vault
     * @param [options] The optional parameters
     * @returns Promise<Models.VaultsUpdateAccessPolicyResponse>
     */
    updateAccessPolicy(resourceGroupName: string, vaultName: string, operationKind: Models.AccessPolicyUpdateKind, parameters: Models.VaultAccessPolicyParameters, options?: msRest.RequestOptionsBase): Promise<Models.VaultsUpdateAccessPolicyResponse>;
    /**
     * @param resourceGroupName The name of the Resource Group to which the vault belongs.
     * @param vaultName Name of the vault
     * @param operationKind Name of the operation. Possible values include: 'add', 'replace', 'remove'
     * @param parameters Access policy to merge into the vault
     * @param callback The callback
     */
    updateAccessPolicy(resourceGroupName: string, vaultName: string, operationKind: Models.AccessPolicyUpdateKind, parameters: Models.VaultAccessPolicyParameters, callback: msRest.ServiceCallback<Models.VaultAccessPolicyParameters>): void;
    /**
     * @param resourceGroupName The name of the Resource Group to which the vault belongs.
     * @param vaultName Name of the vault
     * @param operationKind Name of the operation. Possible values include: 'add', 'replace', 'remove'
     * @param parameters Access policy to merge into the vault
     * @param options The optional parameters
     * @param callback The callback
     */
    updateAccessPolicy(resourceGroupName: string, vaultName: string, operationKind: Models.AccessPolicyUpdateKind, parameters: Models.VaultAccessPolicyParameters, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.VaultAccessPolicyParameters>): void;
    /**
     * The List operation gets information about the vaults associated with the subscription and within
     * the specified resource group.
     * @param resourceGroupName The name of the Resource Group to which the vault belongs.
     * @param [options] The optional parameters
     * @returns Promise<Models.VaultsListByResourceGroupResponse>
     */
    listByResourceGroup(resourceGroupName: string, options?: Models.VaultsListByResourceGroupOptionalParams): Promise<Models.VaultsListByResourceGroupResponse>;
    /**
     * @param resourceGroupName The name of the Resource Group to which the vault belongs.
     * @param callback The callback
     */
    listByResourceGroup(resourceGroupName: string, callback: msRest.ServiceCallback<Models.VaultListResult>): void;
    /**
     * @param resourceGroupName The name of the Resource Group to which the vault belongs.
     * @param options The optional parameters
     * @param callback The callback
     */
    listByResourceGroup(resourceGroupName: string, options: Models.VaultsListByResourceGroupOptionalParams, callback: msRest.ServiceCallback<Models.VaultListResult>): void;
    /**
     * The List operation gets information about the vaults associated with the subscription.
     * @param [options] The optional parameters
     * @returns Promise<Models.VaultsListBySubscriptionResponse>
     */
    listBySubscription(options?: Models.VaultsListBySubscriptionOptionalParams): Promise<Models.VaultsListBySubscriptionResponse>;
    /**
     * @param callback The callback
     */
    listBySubscription(callback: msRest.ServiceCallback<Models.VaultListResult>): void;
    /**
     * @param options The optional parameters
     * @param callback The callback
     */
    listBySubscription(options: Models.VaultsListBySubscriptionOptionalParams, callback: msRest.ServiceCallback<Models.VaultListResult>): void;
    /**
     * Gets information about the deleted vaults in a subscription.
     * @param [options] The optional parameters
     * @returns Promise<Models.VaultsListDeletedResponse>
     */
    listDeleted(options?: msRest.RequestOptionsBase): Promise<Models.VaultsListDeletedResponse>;
    /**
     * @param callback The callback
     */
    listDeleted(callback: msRest.ServiceCallback<Models.DeletedVaultListResult>): void;
    /**
     * @param options The optional parameters
     * @param callback The callback
     */
    listDeleted(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DeletedVaultListResult>): void;
    /**
     * Gets the deleted Azure key vault.
     * @param vaultName The name of the vault.
     * @param location The location of the deleted vault.
     * @param [options] The optional parameters
     * @returns Promise<Models.VaultsGetDeletedResponse>
     */
    getDeleted(vaultName: string, location: string, options?: msRest.RequestOptionsBase): Promise<Models.VaultsGetDeletedResponse>;
    /**
     * @param vaultName The name of the vault.
     * @param location The location of the deleted vault.
     * @param callback The callback
     */
    getDeleted(vaultName: string, location: string, callback: msRest.ServiceCallback<Models.DeletedVault>): void;
    /**
     * @param vaultName The name of the vault.
     * @param location The location of the deleted vault.
     * @param options The optional parameters
     * @param callback The callback
     */
    getDeleted(vaultName: string, location: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DeletedVault>): void;
    /**
     * Permanently deletes the specified vault. aka Purges the deleted Azure key vault.
     * @param vaultName The name of the soft-deleted vault.
     * @param location The location of the soft-deleted vault.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    purgeDeleted(vaultName: string, location: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * The List operation gets information about the vaults associated with the subscription.
     * @param [options] The optional parameters
     * @returns Promise<Models.VaultsListResponse>
     */
    list(options?: Models.VaultsListOptionalParams): Promise<Models.VaultsListResponse>;
    /**
     * @param callback The callback
     */
    list(callback: msRest.ServiceCallback<Models.ResourceListResult>): void;
    /**
     * @param options The optional parameters
     * @param callback The callback
     */
    list(options: Models.VaultsListOptionalParams, callback: msRest.ServiceCallback<Models.ResourceListResult>): void;
    /**
     * Checks that the vault name is valid and is not already in use.
     * @param vaultName The name of the vault.
     * @param [options] The optional parameters
     * @returns Promise<Models.VaultsCheckNameAvailabilityResponse>
     */
    checkNameAvailability(vaultName: Models.VaultCheckNameAvailabilityParameters, options?: msRest.RequestOptionsBase): Promise<Models.VaultsCheckNameAvailabilityResponse>;
    /**
     * @param vaultName The name of the vault.
     * @param callback The callback
     */
    checkNameAvailability(vaultName: Models.VaultCheckNameAvailabilityParameters, callback: msRest.ServiceCallback<Models.CheckNameAvailabilityResult>): void;
    /**
     * @param vaultName The name of the vault.
     * @param options The optional parameters
     * @param callback The callback
     */
    checkNameAvailability(vaultName: Models.VaultCheckNameAvailabilityParameters, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CheckNameAvailabilityResult>): void;
    /**
     * Create or update a key vault in the specified subscription.
     * @param resourceGroupName The name of the Resource Group to which the server belongs.
     * @param vaultName Name of the vault
     * @param parameters Parameters to create or update the vault
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    beginCreateOrUpdate(resourceGroupName: string, vaultName: string, parameters: Models.VaultCreateOrUpdateParameters, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller>;
    /**
     * Permanently deletes the specified vault. aka Purges the deleted Azure key vault.
     * @param vaultName The name of the soft-deleted vault.
     * @param location The location of the soft-deleted vault.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    beginPurgeDeleted(vaultName: string, location: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller>;
    /**
     * The List operation gets information about the vaults associated with the subscription and within
     * the specified resource group.
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param [options] The optional parameters
     * @returns Promise<Models.VaultsListByResourceGroupNextResponse>
     */
    listByResourceGroupNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.VaultsListByResourceGroupNextResponse>;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param callback The callback
     */
    listByResourceGroupNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.VaultListResult>): void;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param options The optional parameters
     * @param callback The callback
     */
    listByResourceGroupNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.VaultListResult>): void;
    /**
     * The List operation gets information about the vaults associated with the subscription.
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param [options] The optional parameters
     * @returns Promise<Models.VaultsListBySubscriptionNextResponse>
     */
    listBySubscriptionNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.VaultsListBySubscriptionNextResponse>;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param callback The callback
     */
    listBySubscriptionNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.VaultListResult>): void;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param options The optional parameters
     * @param callback The callback
     */
    listBySubscriptionNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.VaultListResult>): void;
    /**
     * Gets information about the deleted vaults in a subscription.
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param [options] The optional parameters
     * @returns Promise<Models.VaultsListDeletedNextResponse>
     */
    listDeletedNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.VaultsListDeletedNextResponse>;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param callback The callback
     */
    listDeletedNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.DeletedVaultListResult>): void;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param options The optional parameters
     * @param callback The callback
     */
    listDeletedNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DeletedVaultListResult>): void;
    /**
     * The List operation gets information about the vaults associated with the subscription.
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param [options] The optional parameters
     * @returns Promise<Models.VaultsListNextResponse>
     */
    listNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.VaultsListNextResponse>;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param callback The callback
     */
    listNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.ResourceListResult>): void;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param options The optional parameters
     * @param callback The callback
     */
    listNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ResourceListResult>): void;
}
//# sourceMappingURL=vaults.d.ts.map