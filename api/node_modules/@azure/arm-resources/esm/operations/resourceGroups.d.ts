import * as msRest from "@azure/ms-rest-js";
import * as msRestAzure from "@azure/ms-rest-azure-js";
import * as Models from "../models";
import { ResourceManagementClientContext } from "../resourceManagementClientContext";
/** Class representing a ResourceGroups. */
export declare class ResourceGroups {
    private readonly client;
    /**
     * Create a ResourceGroups.
     * @param {ResourceManagementClientContext} client Reference to the service client.
     */
    constructor(client: ResourceManagementClientContext);
    /**
     * Checks whether a resource group exists.
     * @param resourceGroupName The name of the resource group to check. The name is case insensitive.
     * @param [options] The optional parameters
     * @returns Promise<Models.ResourceGroupsCheckExistenceResponse>
     */
    checkExistence(resourceGroupName: string, options?: msRest.RequestOptionsBase): Promise<Models.ResourceGroupsCheckExistenceResponse>;
    /**
     * @param resourceGroupName The name of the resource group to check. The name is case insensitive.
     * @param callback The callback
     */
    checkExistence(resourceGroupName: string, callback: msRest.ServiceCallback<boolean>): void;
    /**
     * @param resourceGroupName The name of the resource group to check. The name is case insensitive.
     * @param options The optional parameters
     * @param callback The callback
     */
    checkExistence(resourceGroupName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<boolean>): void;
    /**
     * Creates or updates a resource group.
     * @param resourceGroupName The name of the resource group to create or update. Can include
     * alphanumeric, underscore, parentheses, hyphen, period (except at end), and Unicode characters
     * that match the allowed characters.
     * @param parameters Parameters supplied to the create or update a resource group.
     * @param [options] The optional parameters
     * @returns Promise<Models.ResourceGroupsCreateOrUpdateResponse>
     */
    createOrUpdate(resourceGroupName: string, parameters: Models.ResourceGroup, options?: msRest.RequestOptionsBase): Promise<Models.ResourceGroupsCreateOrUpdateResponse>;
    /**
     * @param resourceGroupName The name of the resource group to create or update. Can include
     * alphanumeric, underscore, parentheses, hyphen, period (except at end), and Unicode characters
     * that match the allowed characters.
     * @param parameters Parameters supplied to the create or update a resource group.
     * @param callback The callback
     */
    createOrUpdate(resourceGroupName: string, parameters: Models.ResourceGroup, callback: msRest.ServiceCallback<Models.ResourceGroup>): void;
    /**
     * @param resourceGroupName The name of the resource group to create or update. Can include
     * alphanumeric, underscore, parentheses, hyphen, period (except at end), and Unicode characters
     * that match the allowed characters.
     * @param parameters Parameters supplied to the create or update a resource group.
     * @param options The optional parameters
     * @param callback The callback
     */
    createOrUpdate(resourceGroupName: string, parameters: Models.ResourceGroup, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ResourceGroup>): void;
    /**
     * When you delete a resource group, all of its resources are also deleted. Deleting a resource
     * group deletes all of its template deployments and currently stored operations.
     * @summary Deletes a resource group.
     * @param resourceGroupName The name of the resource group to delete. The name is case insensitive.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    deleteMethod(resourceGroupName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * Gets a resource group.
     * @param resourceGroupName The name of the resource group to get. The name is case insensitive.
     * @param [options] The optional parameters
     * @returns Promise<Models.ResourceGroupsGetResponse>
     */
    get(resourceGroupName: string, options?: msRest.RequestOptionsBase): Promise<Models.ResourceGroupsGetResponse>;
    /**
     * @param resourceGroupName The name of the resource group to get. The name is case insensitive.
     * @param callback The callback
     */
    get(resourceGroupName: string, callback: msRest.ServiceCallback<Models.ResourceGroup>): void;
    /**
     * @param resourceGroupName The name of the resource group to get. The name is case insensitive.
     * @param options The optional parameters
     * @param callback The callback
     */
    get(resourceGroupName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ResourceGroup>): void;
    /**
     * Resource groups can be updated through a simple PATCH operation to a group address. The format
     * of the request is the same as that for creating a resource group. If a field is unspecified, the
     * current value is retained.
     * @summary Updates a resource group.
     * @param resourceGroupName The name of the resource group to update. The name is case insensitive.
     * @param parameters Parameters supplied to update a resource group.
     * @param [options] The optional parameters
     * @returns Promise<Models.ResourceGroupsUpdateResponse>
     */
    update(resourceGroupName: string, parameters: Models.ResourceGroupPatchable, options?: msRest.RequestOptionsBase): Promise<Models.ResourceGroupsUpdateResponse>;
    /**
     * @param resourceGroupName The name of the resource group to update. The name is case insensitive.
     * @param parameters Parameters supplied to update a resource group.
     * @param callback The callback
     */
    update(resourceGroupName: string, parameters: Models.ResourceGroupPatchable, callback: msRest.ServiceCallback<Models.ResourceGroup>): void;
    /**
     * @param resourceGroupName The name of the resource group to update. The name is case insensitive.
     * @param parameters Parameters supplied to update a resource group.
     * @param options The optional parameters
     * @param callback The callback
     */
    update(resourceGroupName: string, parameters: Models.ResourceGroupPatchable, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ResourceGroup>): void;
    /**
     * Captures the specified resource group as a template.
     * @param resourceGroupName The name of the resource group to export as a template.
     * @param parameters Parameters for exporting the template.
     * @param [options] The optional parameters
     * @returns Promise<Models.ResourceGroupsExportTemplateResponse>
     */
    exportTemplate(resourceGroupName: string, parameters: Models.ExportTemplateRequest, options?: msRest.RequestOptionsBase): Promise<Models.ResourceGroupsExportTemplateResponse>;
    /**
     * @param resourceGroupName The name of the resource group to export as a template.
     * @param parameters Parameters for exporting the template.
     * @param callback The callback
     */
    exportTemplate(resourceGroupName: string, parameters: Models.ExportTemplateRequest, callback: msRest.ServiceCallback<Models.ResourceGroupExportResult>): void;
    /**
     * @param resourceGroupName The name of the resource group to export as a template.
     * @param parameters Parameters for exporting the template.
     * @param options The optional parameters
     * @param callback The callback
     */
    exportTemplate(resourceGroupName: string, parameters: Models.ExportTemplateRequest, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ResourceGroupExportResult>): void;
    /**
     * Gets all the resource groups for a subscription.
     * @param [options] The optional parameters
     * @returns Promise<Models.ResourceGroupsListResponse>
     */
    list(options?: Models.ResourceGroupsListOptionalParams): Promise<Models.ResourceGroupsListResponse>;
    /**
     * @param callback The callback
     */
    list(callback: msRest.ServiceCallback<Models.ResourceGroupListResult>): void;
    /**
     * @param options The optional parameters
     * @param callback The callback
     */
    list(options: Models.ResourceGroupsListOptionalParams, callback: msRest.ServiceCallback<Models.ResourceGroupListResult>): void;
    /**
     * When you delete a resource group, all of its resources are also deleted. Deleting a resource
     * group deletes all of its template deployments and currently stored operations.
     * @summary Deletes a resource group.
     * @param resourceGroupName The name of the resource group to delete. The name is case insensitive.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    beginDeleteMethod(resourceGroupName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller>;
    /**
     * Gets all the resource groups for a subscription.
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param [options] The optional parameters
     * @returns Promise<Models.ResourceGroupsListNextResponse>
     */
    listNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.ResourceGroupsListNextResponse>;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param callback The callback
     */
    listNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.ResourceGroupListResult>): void;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param options The optional parameters
     * @param callback The callback
     */
    listNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ResourceGroupListResult>): void;
}
//# sourceMappingURL=resourceGroups.d.ts.map