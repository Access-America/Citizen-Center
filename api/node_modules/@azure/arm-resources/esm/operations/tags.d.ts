import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import { ResourceManagementClientContext } from "../resourceManagementClientContext";
/** Class representing a Tags. */
export declare class Tags {
    private readonly client;
    /**
     * Create a Tags.
     * @param {ResourceManagementClientContext} client Reference to the service client.
     */
    constructor(client: ResourceManagementClientContext);
    /**
     * Deletes a tag value.
     * @param tagName The name of the tag.
     * @param tagValue The value of the tag to delete.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    deleteValue(tagName: string, tagValue: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * @param tagName The name of the tag.
     * @param tagValue The value of the tag to delete.
     * @param callback The callback
     */
    deleteValue(tagName: string, tagValue: string, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param tagName The name of the tag.
     * @param tagValue The value of the tag to delete.
     * @param options The optional parameters
     * @param callback The callback
     */
    deleteValue(tagName: string, tagValue: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
    /**
     * Creates a tag value. The name of the tag must already exist.
     * @param tagName The name of the tag.
     * @param tagValue The value of the tag to create.
     * @param [options] The optional parameters
     * @returns Promise<Models.TagsCreateOrUpdateValueResponse>
     */
    createOrUpdateValue(tagName: string, tagValue: string, options?: msRest.RequestOptionsBase): Promise<Models.TagsCreateOrUpdateValueResponse>;
    /**
     * @param tagName The name of the tag.
     * @param tagValue The value of the tag to create.
     * @param callback The callback
     */
    createOrUpdateValue(tagName: string, tagValue: string, callback: msRest.ServiceCallback<Models.TagValue>): void;
    /**
     * @param tagName The name of the tag.
     * @param tagValue The value of the tag to create.
     * @param options The optional parameters
     * @param callback The callback
     */
    createOrUpdateValue(tagName: string, tagValue: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.TagValue>): void;
    /**
     * The tag name can have a maximum of 512 characters and is case insensitive. Tag names created by
     * Azure have prefixes of microsoft, azure, or windows. You cannot create tags with one of these
     * prefixes.
     * @summary Creates a tag in the subscription.
     * @param tagName The name of the tag to create.
     * @param [options] The optional parameters
     * @returns Promise<Models.TagsCreateOrUpdateResponse>
     */
    createOrUpdate(tagName: string, options?: msRest.RequestOptionsBase): Promise<Models.TagsCreateOrUpdateResponse>;
    /**
     * @param tagName The name of the tag to create.
     * @param callback The callback
     */
    createOrUpdate(tagName: string, callback: msRest.ServiceCallback<Models.TagDetails>): void;
    /**
     * @param tagName The name of the tag to create.
     * @param options The optional parameters
     * @param callback The callback
     */
    createOrUpdate(tagName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.TagDetails>): void;
    /**
     * You must remove all values from a resource tag before you can delete it.
     * @summary Deletes a tag from the subscription.
     * @param tagName The name of the tag.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    deleteMethod(tagName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * @param tagName The name of the tag.
     * @param callback The callback
     */
    deleteMethod(tagName: string, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param tagName The name of the tag.
     * @param options The optional parameters
     * @param callback The callback
     */
    deleteMethod(tagName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
    /**
     * Gets the names and values of all resource tags that are defined in a subscription.
     * @param [options] The optional parameters
     * @returns Promise<Models.TagsListResponse>
     */
    list(options?: msRest.RequestOptionsBase): Promise<Models.TagsListResponse>;
    /**
     * @param callback The callback
     */
    list(callback: msRest.ServiceCallback<Models.TagsListResult>): void;
    /**
     * @param options The optional parameters
     * @param callback The callback
     */
    list(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.TagsListResult>): void;
    /**
     * Gets the names and values of all resource tags that are defined in a subscription.
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param [options] The optional parameters
     * @returns Promise<Models.TagsListNextResponse>
     */
    listNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.TagsListNextResponse>;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param callback The callback
     */
    listNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.TagsListResult>): void;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param options The optional parameters
     * @param callback The callback
     */
    listNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.TagsListResult>): void;
}
//# sourceMappingURL=tags.d.ts.map