import * as msRest from "@azure/ms-rest-js";
import * as Models from "./models";
import * as Mappers from "./models/mappers";
import * as operations from "./operations";
import { ApiManagementClientContext } from "./apiManagementClientContext";
declare class ApiManagementClient extends ApiManagementClientContext {
    api: operations.Api;
    apiRevision: operations.ApiRevision;
    apiRelease: operations.ApiRelease;
    apiOperation: operations.ApiOperation;
    apiOperationPolicy: operations.ApiOperationPolicy;
    tag: operations.Tag;
    apiProduct: operations.ApiProduct;
    apiPolicy: operations.ApiPolicy;
    apiSchema: operations.ApiSchema;
    apiDiagnostic: operations.ApiDiagnostic;
    apiIssue: operations.ApiIssue;
    apiIssueComment: operations.ApiIssueComment;
    apiIssueAttachment: operations.ApiIssueAttachment;
    apiTagDescription: operations.ApiTagDescription;
    operation: operations.OperationOperations;
    apiVersionSet: operations.ApiVersionSet;
    authorizationServer: operations.AuthorizationServer;
    backend: operations.Backend;
    cache: operations.Cache;
    certificate: operations.Certificate;
    apiManagementOperations: operations.ApiManagementOperations;
    apiManagementServiceSkus: operations.ApiManagementServiceSkus;
    apiManagementService: operations.ApiManagementService;
    diagnostic: operations.Diagnostic;
    emailTemplate: operations.EmailTemplate;
    group: operations.Group;
    groupUser: operations.GroupUser;
    identityProvider: operations.IdentityProvider;
    issue: operations.Issue;
    logger: operations.Logger;
    networkStatus: operations.NetworkStatus;
    notification: operations.Notification;
    notificationRecipientUser: operations.NotificationRecipientUser;
    notificationRecipientEmail: operations.NotificationRecipientEmail;
    openIdConnectProvider: operations.OpenIdConnectProvider;
    policy: operations.Policy;
    policySnippet: operations.PolicySnippet;
    signInSettings: operations.SignInSettings;
    signUpSettings: operations.SignUpSettings;
    delegationSettings: operations.DelegationSettings;
    product: operations.Product;
    productApi: operations.ProductApi;
    productGroup: operations.ProductGroup;
    productSubscriptions: operations.ProductSubscriptions;
    productPolicy: operations.ProductPolicy;
    property: operations.Property;
    quotaByCounterKeys: operations.QuotaByCounterKeys;
    quotaByPeriodKeys: operations.QuotaByPeriodKeys;
    region: operations.Region;
    reports: operations.Reports;
    subscription: operations.Subscription;
    tagResource: operations.TagResource;
    tenantAccess: operations.TenantAccess;
    tenantAccessGit: operations.TenantAccessGit;
    tenantConfiguration: operations.TenantConfiguration;
    user: operations.User;
    userGroup: operations.UserGroup;
    userSubscription: operations.UserSubscription;
    userIdentities: operations.UserIdentities;
    userConfirmationPassword: operations.UserConfirmationPassword;
    apiExport: operations.ApiExport;
    /**
     * Initializes a new instance of the ApiManagementClient class.
     * @param credentials Credentials needed for the client to connect to Azure.
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure
     * subscription. The subscription ID forms part of the URI for every service call.
     * @param [options] The parameter options
     */
    constructor(credentials: msRest.ServiceClientCredentials, subscriptionId: string, options?: Models.ApiManagementClientOptions);
}
export { ApiManagementClient, ApiManagementClientContext, Models as ApiManagementModels, Mappers as ApiManagementMappers };
export * from "./operations";
//# sourceMappingURL=apiManagementClient.d.ts.map