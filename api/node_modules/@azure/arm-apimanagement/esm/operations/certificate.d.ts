import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import { ApiManagementClientContext } from "../apiManagementClientContext";
/** Class representing a Certificate. */
export declare class Certificate {
    private readonly client;
    /**
     * Create a Certificate.
     * @param {ApiManagementClientContext} client Reference to the service client.
     */
    constructor(client: ApiManagementClientContext);
    /**
     * Lists a collection of all certificates in the specified service instance.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param [options] The optional parameters
     * @returns Promise<Models.CertificateListByServiceResponse>
     */
    listByService(resourceGroupName: string, serviceName: string, options?: Models.CertificateListByServiceOptionalParams): Promise<Models.CertificateListByServiceResponse>;
    /**
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param callback The callback
     */
    listByService(resourceGroupName: string, serviceName: string, callback: msRest.ServiceCallback<Models.CertificateCollection>): void;
    /**
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param options The optional parameters
     * @param callback The callback
     */
    listByService(resourceGroupName: string, serviceName: string, options: Models.CertificateListByServiceOptionalParams, callback: msRest.ServiceCallback<Models.CertificateCollection>): void;
    /**
     * Gets the entity state (Etag) version of the certificate specified by its identifier.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param certificateId Identifier of the certificate entity. Must be unique in the current API
     * Management service instance.
     * @param [options] The optional parameters
     * @returns Promise<Models.CertificateGetEntityTagResponse>
     */
    getEntityTag(resourceGroupName: string, serviceName: string, certificateId: string, options?: msRest.RequestOptionsBase): Promise<Models.CertificateGetEntityTagResponse>;
    /**
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param certificateId Identifier of the certificate entity. Must be unique in the current API
     * Management service instance.
     * @param callback The callback
     */
    getEntityTag(resourceGroupName: string, serviceName: string, certificateId: string, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param certificateId Identifier of the certificate entity. Must be unique in the current API
     * Management service instance.
     * @param options The optional parameters
     * @param callback The callback
     */
    getEntityTag(resourceGroupName: string, serviceName: string, certificateId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
    /**
     * Gets the details of the certificate specified by its identifier.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param certificateId Identifier of the certificate entity. Must be unique in the current API
     * Management service instance.
     * @param [options] The optional parameters
     * @returns Promise<Models.CertificateGetResponse>
     */
    get(resourceGroupName: string, serviceName: string, certificateId: string, options?: msRest.RequestOptionsBase): Promise<Models.CertificateGetResponse>;
    /**
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param certificateId Identifier of the certificate entity. Must be unique in the current API
     * Management service instance.
     * @param callback The callback
     */
    get(resourceGroupName: string, serviceName: string, certificateId: string, callback: msRest.ServiceCallback<Models.CertificateContract>): void;
    /**
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param certificateId Identifier of the certificate entity. Must be unique in the current API
     * Management service instance.
     * @param options The optional parameters
     * @param callback The callback
     */
    get(resourceGroupName: string, serviceName: string, certificateId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CertificateContract>): void;
    /**
     * Creates or updates the certificate being used for authentication with the backend.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param certificateId Identifier of the certificate entity. Must be unique in the current API
     * Management service instance.
     * @param parameters Create or Update parameters.
     * @param [options] The optional parameters
     * @returns Promise<Models.CertificateCreateOrUpdateResponse>
     */
    createOrUpdate(resourceGroupName: string, serviceName: string, certificateId: string, parameters: Models.CertificateCreateOrUpdateParameters, options?: Models.CertificateCreateOrUpdateOptionalParams): Promise<Models.CertificateCreateOrUpdateResponse>;
    /**
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param certificateId Identifier of the certificate entity. Must be unique in the current API
     * Management service instance.
     * @param parameters Create or Update parameters.
     * @param callback The callback
     */
    createOrUpdate(resourceGroupName: string, serviceName: string, certificateId: string, parameters: Models.CertificateCreateOrUpdateParameters, callback: msRest.ServiceCallback<Models.CertificateContract>): void;
    /**
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param certificateId Identifier of the certificate entity. Must be unique in the current API
     * Management service instance.
     * @param parameters Create or Update parameters.
     * @param options The optional parameters
     * @param callback The callback
     */
    createOrUpdate(resourceGroupName: string, serviceName: string, certificateId: string, parameters: Models.CertificateCreateOrUpdateParameters, options: Models.CertificateCreateOrUpdateOptionalParams, callback: msRest.ServiceCallback<Models.CertificateContract>): void;
    /**
     * Deletes specific certificate.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param certificateId Identifier of the certificate entity. Must be unique in the current API
     * Management service instance.
     * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header
     * response of the GET request or it should be * for unconditional update.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    deleteMethod(resourceGroupName: string, serviceName: string, certificateId: string, ifMatch: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param certificateId Identifier of the certificate entity. Must be unique in the current API
     * Management service instance.
     * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header
     * response of the GET request or it should be * for unconditional update.
     * @param callback The callback
     */
    deleteMethod(resourceGroupName: string, serviceName: string, certificateId: string, ifMatch: string, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param certificateId Identifier of the certificate entity. Must be unique in the current API
     * Management service instance.
     * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header
     * response of the GET request or it should be * for unconditional update.
     * @param options The optional parameters
     * @param callback The callback
     */
    deleteMethod(resourceGroupName: string, serviceName: string, certificateId: string, ifMatch: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
    /**
     * Lists a collection of all certificates in the specified service instance.
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param [options] The optional parameters
     * @returns Promise<Models.CertificateListByServiceNextResponse>
     */
    listByServiceNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.CertificateListByServiceNextResponse>;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param callback The callback
     */
    listByServiceNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.CertificateCollection>): void;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param options The optional parameters
     * @param callback The callback
     */
    listByServiceNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CertificateCollection>): void;
}
//# sourceMappingURL=certificate.d.ts.map