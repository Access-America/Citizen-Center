import * as msRest from "@azure/ms-rest-js";
import { ApiManagementClientContext } from "../apiManagementClientContext";
/** Class representing a UserConfirmationPassword. */
export declare class UserConfirmationPassword {
    private readonly client;
    /**
     * Create a UserConfirmationPassword.
     * @param {ApiManagementClientContext} client Reference to the service client.
     */
    constructor(client: ApiManagementClientContext);
    /**
     * Sends confirmation
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param userId User identifier. Must be unique in the current API Management service instance.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    send(resourceGroupName: string, serviceName: string, userId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param userId User identifier. Must be unique in the current API Management service instance.
     * @param callback The callback
     */
    send(resourceGroupName: string, serviceName: string, userId: string, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param userId User identifier. Must be unique in the current API Management service instance.
     * @param options The optional parameters
     * @param callback The callback
     */
    send(resourceGroupName: string, serviceName: string, userId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
}
//# sourceMappingURL=userConfirmationPassword.d.ts.map