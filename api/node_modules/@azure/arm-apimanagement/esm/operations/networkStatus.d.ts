import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import { ApiManagementClientContext } from "../apiManagementClientContext";
/** Class representing a NetworkStatus. */
export declare class NetworkStatus {
    private readonly client;
    /**
     * Create a NetworkStatus.
     * @param {ApiManagementClientContext} client Reference to the service client.
     */
    constructor(client: ApiManagementClientContext);
    /**
     * Gets the Connectivity Status to the external resources on which the Api Management service
     * depends from inside the Cloud Service. This also returns the DNS Servers as visible to the
     * CloudService.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param [options] The optional parameters
     * @returns Promise<Models.NetworkStatusListByServiceResponse>
     */
    listByService(resourceGroupName: string, serviceName: string, options?: msRest.RequestOptionsBase): Promise<Models.NetworkStatusListByServiceResponse>;
    /**
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param callback The callback
     */
    listByService(resourceGroupName: string, serviceName: string, callback: msRest.ServiceCallback<Models.NetworkStatusContractByLocation[]>): void;
    /**
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param options The optional parameters
     * @param callback The callback
     */
    listByService(resourceGroupName: string, serviceName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.NetworkStatusContractByLocation[]>): void;
    /**
     * Gets the Connectivity Status to the external resources on which the Api Management service
     * depends from inside the Cloud Service. This also returns the DNS Servers as visible to the
     * CloudService.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param locationName Location in which the API Management service is deployed. This is one of the
     * Azure Regions like West US, East US, South Central US.
     * @param [options] The optional parameters
     * @returns Promise<Models.NetworkStatusListByLocationResponse>
     */
    listByLocation(resourceGroupName: string, serviceName: string, locationName: string, options?: msRest.RequestOptionsBase): Promise<Models.NetworkStatusListByLocationResponse>;
    /**
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param locationName Location in which the API Management service is deployed. This is one of the
     * Azure Regions like West US, East US, South Central US.
     * @param callback The callback
     */
    listByLocation(resourceGroupName: string, serviceName: string, locationName: string, callback: msRest.ServiceCallback<Models.NetworkStatusContract>): void;
    /**
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param locationName Location in which the API Management service is deployed. This is one of the
     * Azure Regions like West US, East US, South Central US.
     * @param options The optional parameters
     * @param callback The callback
     */
    listByLocation(resourceGroupName: string, serviceName: string, locationName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.NetworkStatusContract>): void;
}
//# sourceMappingURL=networkStatus.d.ts.map