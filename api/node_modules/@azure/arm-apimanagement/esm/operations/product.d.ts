import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import { ApiManagementClientContext } from "../apiManagementClientContext";
/** Class representing a Product. */
export declare class Product {
    private readonly client;
    /**
     * Create a Product.
     * @param {ApiManagementClientContext} client Reference to the service client.
     */
    constructor(client: ApiManagementClientContext);
    /**
     * Lists a collection of products in the specified service instance.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param [options] The optional parameters
     * @returns Promise<Models.ProductListByServiceResponse>
     */
    listByService(resourceGroupName: string, serviceName: string, options?: Models.ProductListByServiceOptionalParams): Promise<Models.ProductListByServiceResponse>;
    /**
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param callback The callback
     */
    listByService(resourceGroupName: string, serviceName: string, callback: msRest.ServiceCallback<Models.ProductCollection>): void;
    /**
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param options The optional parameters
     * @param callback The callback
     */
    listByService(resourceGroupName: string, serviceName: string, options: Models.ProductListByServiceOptionalParams, callback: msRest.ServiceCallback<Models.ProductCollection>): void;
    /**
     * Gets the entity state (Etag) version of the product specified by its identifier.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param productId Product identifier. Must be unique in the current API Management service
     * instance.
     * @param [options] The optional parameters
     * @returns Promise<Models.ProductGetEntityTagResponse>
     */
    getEntityTag(resourceGroupName: string, serviceName: string, productId: string, options?: msRest.RequestOptionsBase): Promise<Models.ProductGetEntityTagResponse>;
    /**
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param productId Product identifier. Must be unique in the current API Management service
     * instance.
     * @param callback The callback
     */
    getEntityTag(resourceGroupName: string, serviceName: string, productId: string, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param productId Product identifier. Must be unique in the current API Management service
     * instance.
     * @param options The optional parameters
     * @param callback The callback
     */
    getEntityTag(resourceGroupName: string, serviceName: string, productId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
    /**
     * Gets the details of the product specified by its identifier.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param productId Product identifier. Must be unique in the current API Management service
     * instance.
     * @param [options] The optional parameters
     * @returns Promise<Models.ProductGetResponse>
     */
    get(resourceGroupName: string, serviceName: string, productId: string, options?: msRest.RequestOptionsBase): Promise<Models.ProductGetResponse>;
    /**
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param productId Product identifier. Must be unique in the current API Management service
     * instance.
     * @param callback The callback
     */
    get(resourceGroupName: string, serviceName: string, productId: string, callback: msRest.ServiceCallback<Models.ProductContract>): void;
    /**
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param productId Product identifier. Must be unique in the current API Management service
     * instance.
     * @param options The optional parameters
     * @param callback The callback
     */
    get(resourceGroupName: string, serviceName: string, productId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ProductContract>): void;
    /**
     * Creates or Updates a product.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param productId Product identifier. Must be unique in the current API Management service
     * instance.
     * @param parameters Create or update parameters.
     * @param [options] The optional parameters
     * @returns Promise<Models.ProductCreateOrUpdateResponse>
     */
    createOrUpdate(resourceGroupName: string, serviceName: string, productId: string, parameters: Models.ProductContract, options?: Models.ProductCreateOrUpdateOptionalParams): Promise<Models.ProductCreateOrUpdateResponse>;
    /**
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param productId Product identifier. Must be unique in the current API Management service
     * instance.
     * @param parameters Create or update parameters.
     * @param callback The callback
     */
    createOrUpdate(resourceGroupName: string, serviceName: string, productId: string, parameters: Models.ProductContract, callback: msRest.ServiceCallback<Models.ProductContract>): void;
    /**
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param productId Product identifier. Must be unique in the current API Management service
     * instance.
     * @param parameters Create or update parameters.
     * @param options The optional parameters
     * @param callback The callback
     */
    createOrUpdate(resourceGroupName: string, serviceName: string, productId: string, parameters: Models.ProductContract, options: Models.ProductCreateOrUpdateOptionalParams, callback: msRest.ServiceCallback<Models.ProductContract>): void;
    /**
     * Update existing product details.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param productId Product identifier. Must be unique in the current API Management service
     * instance.
     * @param parameters Update parameters.
     * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header
     * response of the GET request or it should be * for unconditional update.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    update(resourceGroupName: string, serviceName: string, productId: string, parameters: Models.ProductUpdateParameters, ifMatch: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param productId Product identifier. Must be unique in the current API Management service
     * instance.
     * @param parameters Update parameters.
     * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header
     * response of the GET request or it should be * for unconditional update.
     * @param callback The callback
     */
    update(resourceGroupName: string, serviceName: string, productId: string, parameters: Models.ProductUpdateParameters, ifMatch: string, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param productId Product identifier. Must be unique in the current API Management service
     * instance.
     * @param parameters Update parameters.
     * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header
     * response of the GET request or it should be * for unconditional update.
     * @param options The optional parameters
     * @param callback The callback
     */
    update(resourceGroupName: string, serviceName: string, productId: string, parameters: Models.ProductUpdateParameters, ifMatch: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
    /**
     * Delete product.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param productId Product identifier. Must be unique in the current API Management service
     * instance.
     * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header
     * response of the GET request or it should be * for unconditional update.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    deleteMethod(resourceGroupName: string, serviceName: string, productId: string, ifMatch: string, options?: Models.ProductDeleteMethodOptionalParams): Promise<msRest.RestResponse>;
    /**
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param productId Product identifier. Must be unique in the current API Management service
     * instance.
     * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header
     * response of the GET request or it should be * for unconditional update.
     * @param callback The callback
     */
    deleteMethod(resourceGroupName: string, serviceName: string, productId: string, ifMatch: string, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param productId Product identifier. Must be unique in the current API Management service
     * instance.
     * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header
     * response of the GET request or it should be * for unconditional update.
     * @param options The optional parameters
     * @param callback The callback
     */
    deleteMethod(resourceGroupName: string, serviceName: string, productId: string, ifMatch: string, options: Models.ProductDeleteMethodOptionalParams, callback: msRest.ServiceCallback<void>): void;
    /**
     * Lists a collection of products associated with tags.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param [options] The optional parameters
     * @returns Promise<Models.ProductListByTagsResponse>
     */
    listByTags(resourceGroupName: string, serviceName: string, options?: Models.ProductListByTagsOptionalParams): Promise<Models.ProductListByTagsResponse>;
    /**
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param callback The callback
     */
    listByTags(resourceGroupName: string, serviceName: string, callback: msRest.ServiceCallback<Models.TagResourceCollection>): void;
    /**
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param options The optional parameters
     * @param callback The callback
     */
    listByTags(resourceGroupName: string, serviceName: string, options: Models.ProductListByTagsOptionalParams, callback: msRest.ServiceCallback<Models.TagResourceCollection>): void;
    /**
     * Lists a collection of products in the specified service instance.
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param [options] The optional parameters
     * @returns Promise<Models.ProductListByServiceNextResponse>
     */
    listByServiceNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.ProductListByServiceNextResponse>;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param callback The callback
     */
    listByServiceNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.ProductCollection>): void;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param options The optional parameters
     * @param callback The callback
     */
    listByServiceNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ProductCollection>): void;
    /**
     * Lists a collection of products associated with tags.
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param [options] The optional parameters
     * @returns Promise<Models.ProductListByTagsNextResponse>
     */
    listByTagsNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.ProductListByTagsNextResponse>;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param callback The callback
     */
    listByTagsNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.TagResourceCollection>): void;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param options The optional parameters
     * @param callback The callback
     */
    listByTagsNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.TagResourceCollection>): void;
}
//# sourceMappingURL=product.d.ts.map