/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
import * as tslib_1 from "tslib";
import * as msRest from "@azure/ms-rest-js";
import * as Mappers from "../models/tagMappers";
import * as Parameters from "../models/parameters";
/** Class representing a Tag. */
var Tag = /** @class */ (function () {
    /**
     * Create a Tag.
     * @param {ApiManagementClientContext} client Reference to the service client.
     */
    function Tag(client) {
        this.client = client;
    }
    Tag.prototype.listByOperation = function (resourceGroupName, serviceName, apiId, operationId, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            serviceName: serviceName,
            apiId: apiId,
            operationId: operationId,
            options: options
        }, listByOperationOperationSpec, callback);
    };
    Tag.prototype.getEntityStateByOperation = function (resourceGroupName, serviceName, apiId, operationId, tagId, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            serviceName: serviceName,
            apiId: apiId,
            operationId: operationId,
            tagId: tagId,
            options: options
        }, getEntityStateByOperationOperationSpec, callback);
    };
    Tag.prototype.getByOperation = function (resourceGroupName, serviceName, apiId, operationId, tagId, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            serviceName: serviceName,
            apiId: apiId,
            operationId: operationId,
            tagId: tagId,
            options: options
        }, getByOperationOperationSpec, callback);
    };
    Tag.prototype.assignToOperation = function (resourceGroupName, serviceName, apiId, operationId, tagId, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            serviceName: serviceName,
            apiId: apiId,
            operationId: operationId,
            tagId: tagId,
            options: options
        }, assignToOperationOperationSpec, callback);
    };
    Tag.prototype.detachFromOperation = function (resourceGroupName, serviceName, apiId, operationId, tagId, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            serviceName: serviceName,
            apiId: apiId,
            operationId: operationId,
            tagId: tagId,
            options: options
        }, detachFromOperationOperationSpec, callback);
    };
    Tag.prototype.listByApi = function (resourceGroupName, serviceName, apiId, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            serviceName: serviceName,
            apiId: apiId,
            options: options
        }, listByApiOperationSpec, callback);
    };
    Tag.prototype.getEntityStateByApi = function (resourceGroupName, serviceName, apiId, tagId, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            serviceName: serviceName,
            apiId: apiId,
            tagId: tagId,
            options: options
        }, getEntityStateByApiOperationSpec, callback);
    };
    Tag.prototype.getByApi = function (resourceGroupName, serviceName, apiId, tagId, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            serviceName: serviceName,
            apiId: apiId,
            tagId: tagId,
            options: options
        }, getByApiOperationSpec, callback);
    };
    Tag.prototype.assignToApi = function (resourceGroupName, serviceName, apiId, tagId, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            serviceName: serviceName,
            apiId: apiId,
            tagId: tagId,
            options: options
        }, assignToApiOperationSpec, callback);
    };
    Tag.prototype.detachFromApi = function (resourceGroupName, serviceName, apiId, tagId, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            serviceName: serviceName,
            apiId: apiId,
            tagId: tagId,
            options: options
        }, detachFromApiOperationSpec, callback);
    };
    Tag.prototype.listByProduct = function (resourceGroupName, serviceName, productId, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            serviceName: serviceName,
            productId: productId,
            options: options
        }, listByProductOperationSpec, callback);
    };
    Tag.prototype.getEntityStateByProduct = function (resourceGroupName, serviceName, productId, tagId, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            serviceName: serviceName,
            productId: productId,
            tagId: tagId,
            options: options
        }, getEntityStateByProductOperationSpec, callback);
    };
    Tag.prototype.getByProduct = function (resourceGroupName, serviceName, productId, tagId, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            serviceName: serviceName,
            productId: productId,
            tagId: tagId,
            options: options
        }, getByProductOperationSpec, callback);
    };
    Tag.prototype.assignToProduct = function (resourceGroupName, serviceName, productId, tagId, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            serviceName: serviceName,
            productId: productId,
            tagId: tagId,
            options: options
        }, assignToProductOperationSpec, callback);
    };
    Tag.prototype.detachFromProduct = function (resourceGroupName, serviceName, productId, tagId, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            serviceName: serviceName,
            productId: productId,
            tagId: tagId,
            options: options
        }, detachFromProductOperationSpec, callback);
    };
    Tag.prototype.listByService = function (resourceGroupName, serviceName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            serviceName: serviceName,
            options: options
        }, listByServiceOperationSpec, callback);
    };
    Tag.prototype.getEntityState = function (resourceGroupName, serviceName, tagId, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            serviceName: serviceName,
            tagId: tagId,
            options: options
        }, getEntityStateOperationSpec, callback);
    };
    Tag.prototype.get = function (resourceGroupName, serviceName, tagId, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            serviceName: serviceName,
            tagId: tagId,
            options: options
        }, getOperationSpec, callback);
    };
    Tag.prototype.createOrUpdate = function (resourceGroupName, serviceName, tagId, parameters, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            serviceName: serviceName,
            tagId: tagId,
            parameters: parameters,
            options: options
        }, createOrUpdateOperationSpec, callback);
    };
    Tag.prototype.update = function (resourceGroupName, serviceName, tagId, parameters, ifMatch, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            serviceName: serviceName,
            tagId: tagId,
            parameters: parameters,
            ifMatch: ifMatch,
            options: options
        }, updateOperationSpec, callback);
    };
    Tag.prototype.deleteMethod = function (resourceGroupName, serviceName, tagId, ifMatch, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            serviceName: serviceName,
            tagId: tagId,
            ifMatch: ifMatch,
            options: options
        }, deleteMethodOperationSpec, callback);
    };
    Tag.prototype.listByOperationNext = function (nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, listByOperationNextOperationSpec, callback);
    };
    Tag.prototype.listByApiNext = function (nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, listByApiNextOperationSpec, callback);
    };
    Tag.prototype.listByProductNext = function (nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, listByProductNextOperationSpec, callback);
    };
    Tag.prototype.listByServiceNext = function (nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, listByServiceNextOperationSpec, callback);
    };
    return Tag;
}());
export { Tag };
// Operation Specifications
var serializer = new msRest.Serializer(Mappers);
var listByOperationOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/operations/{operationId}/tags",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.serviceName,
        Parameters.apiId0,
        Parameters.operationId,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.filter0,
        Parameters.top,
        Parameters.skip,
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.TagCollection
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var getEntityStateByOperationOperationSpec = {
    httpMethod: "HEAD",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/operations/{operationId}/tags/{tagId}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.serviceName,
        Parameters.apiId0,
        Parameters.operationId,
        Parameters.tagId,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            headersMapper: Mappers.TagGetEntityStateByOperationHeaders
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var getByOperationOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/operations/{operationId}/tags/{tagId}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.serviceName,
        Parameters.apiId0,
        Parameters.operationId,
        Parameters.tagId,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.TagContract,
            headersMapper: Mappers.TagGetByOperationHeaders
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var assignToOperationOperationSpec = {
    httpMethod: "PUT",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/operations/{operationId}/tags/{tagId}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.serviceName,
        Parameters.apiId0,
        Parameters.operationId,
        Parameters.tagId,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.TagContract
        },
        201: {
            bodyMapper: Mappers.TagContract
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var detachFromOperationOperationSpec = {
    httpMethod: "DELETE",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/operations/{operationId}/tags/{tagId}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.serviceName,
        Parameters.apiId0,
        Parameters.operationId,
        Parameters.tagId,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {},
        204: {},
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var listByApiOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/tags",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.serviceName,
        Parameters.apiId0,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.filter0,
        Parameters.top,
        Parameters.skip,
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.TagCollection
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var getEntityStateByApiOperationSpec = {
    httpMethod: "HEAD",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/tags/{tagId}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.serviceName,
        Parameters.apiId0,
        Parameters.tagId,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            headersMapper: Mappers.TagGetEntityStateByApiHeaders
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var getByApiOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/tags/{tagId}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.serviceName,
        Parameters.apiId0,
        Parameters.tagId,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.TagContract,
            headersMapper: Mappers.TagGetByApiHeaders
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var assignToApiOperationSpec = {
    httpMethod: "PUT",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/tags/{tagId}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.serviceName,
        Parameters.apiId0,
        Parameters.tagId,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.TagContract,
            headersMapper: Mappers.TagAssignToApiHeaders
        },
        201: {
            bodyMapper: Mappers.TagContract,
            headersMapper: Mappers.TagAssignToApiHeaders
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var detachFromApiOperationSpec = {
    httpMethod: "DELETE",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/tags/{tagId}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.serviceName,
        Parameters.apiId0,
        Parameters.tagId,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {},
        204: {},
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var listByProductOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/products/{productId}/tags",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.serviceName,
        Parameters.productId,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.filter0,
        Parameters.top,
        Parameters.skip,
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.TagCollection
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var getEntityStateByProductOperationSpec = {
    httpMethod: "HEAD",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/products/{productId}/tags/{tagId}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.serviceName,
        Parameters.productId,
        Parameters.tagId,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            headersMapper: Mappers.TagGetEntityStateByProductHeaders
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var getByProductOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/products/{productId}/tags/{tagId}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.serviceName,
        Parameters.productId,
        Parameters.tagId,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.TagContract,
            headersMapper: Mappers.TagGetByProductHeaders
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var assignToProductOperationSpec = {
    httpMethod: "PUT",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/products/{productId}/tags/{tagId}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.serviceName,
        Parameters.productId,
        Parameters.tagId,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.TagContract
        },
        201: {
            bodyMapper: Mappers.TagContract
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var detachFromProductOperationSpec = {
    httpMethod: "DELETE",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/products/{productId}/tags/{tagId}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.serviceName,
        Parameters.productId,
        Parameters.tagId,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {},
        204: {},
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var listByServiceOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/tags",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.serviceName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.filter0,
        Parameters.top,
        Parameters.skip,
        Parameters.scope0,
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.TagCollection
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var getEntityStateOperationSpec = {
    httpMethod: "HEAD",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/tags/{tagId}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.serviceName,
        Parameters.tagId,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            headersMapper: Mappers.TagGetEntityStateHeaders
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var getOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/tags/{tagId}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.serviceName,
        Parameters.tagId,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.TagContract,
            headersMapper: Mappers.TagGetHeaders
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var createOrUpdateOperationSpec = {
    httpMethod: "PUT",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/tags/{tagId}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.serviceName,
        Parameters.tagId,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.ifMatch0,
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "parameters",
        mapper: tslib_1.__assign({}, Mappers.TagCreateUpdateParameters, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.TagContract,
            headersMapper: Mappers.TagCreateOrUpdateHeaders
        },
        201: {
            bodyMapper: Mappers.TagContract,
            headersMapper: Mappers.TagCreateOrUpdateHeaders
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var updateOperationSpec = {
    httpMethod: "PATCH",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/tags/{tagId}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.serviceName,
        Parameters.tagId,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.ifMatch1,
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "parameters",
        mapper: tslib_1.__assign({}, Mappers.TagCreateUpdateParameters, { required: true })
    },
    responses: {
        204: {},
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var deleteMethodOperationSpec = {
    httpMethod: "DELETE",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/tags/{tagId}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.serviceName,
        Parameters.tagId,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.ifMatch1,
        Parameters.acceptLanguage
    ],
    responses: {
        200: {},
        204: {},
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var listByOperationNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.TagCollection
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var listByApiNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.TagCollection
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var listByProductNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.TagCollection
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var listByServiceNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.TagCollection
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
//# sourceMappingURL=tag.js.map