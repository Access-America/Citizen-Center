import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import { ApiManagementClientContext } from "../apiManagementClientContext";
/** Class representing a Property. */
export declare class Property {
    private readonly client;
    /**
     * Create a Property.
     * @param {ApiManagementClientContext} client Reference to the service client.
     */
    constructor(client: ApiManagementClientContext);
    /**
     * Lists a collection of properties defined within a service instance.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param [options] The optional parameters
     * @returns Promise<Models.PropertyListByServiceResponse>
     */
    listByService(resourceGroupName: string, serviceName: string, options?: Models.PropertyListByServiceOptionalParams): Promise<Models.PropertyListByServiceResponse>;
    /**
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param callback The callback
     */
    listByService(resourceGroupName: string, serviceName: string, callback: msRest.ServiceCallback<Models.PropertyCollection>): void;
    /**
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param options The optional parameters
     * @param callback The callback
     */
    listByService(resourceGroupName: string, serviceName: string, options: Models.PropertyListByServiceOptionalParams, callback: msRest.ServiceCallback<Models.PropertyCollection>): void;
    /**
     * Gets the entity state (Etag) version of the property specified by its identifier.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param propId Identifier of the property.
     * @param [options] The optional parameters
     * @returns Promise<Models.PropertyGetEntityTagResponse>
     */
    getEntityTag(resourceGroupName: string, serviceName: string, propId: string, options?: msRest.RequestOptionsBase): Promise<Models.PropertyGetEntityTagResponse>;
    /**
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param propId Identifier of the property.
     * @param callback The callback
     */
    getEntityTag(resourceGroupName: string, serviceName: string, propId: string, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param propId Identifier of the property.
     * @param options The optional parameters
     * @param callback The callback
     */
    getEntityTag(resourceGroupName: string, serviceName: string, propId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
    /**
     * Gets the details of the property specified by its identifier.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param propId Identifier of the property.
     * @param [options] The optional parameters
     * @returns Promise<Models.PropertyGetResponse>
     */
    get(resourceGroupName: string, serviceName: string, propId: string, options?: msRest.RequestOptionsBase): Promise<Models.PropertyGetResponse>;
    /**
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param propId Identifier of the property.
     * @param callback The callback
     */
    get(resourceGroupName: string, serviceName: string, propId: string, callback: msRest.ServiceCallback<Models.PropertyContract>): void;
    /**
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param propId Identifier of the property.
     * @param options The optional parameters
     * @param callback The callback
     */
    get(resourceGroupName: string, serviceName: string, propId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PropertyContract>): void;
    /**
     * Creates or updates a property.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param propId Identifier of the property.
     * @param parameters Create parameters.
     * @param [options] The optional parameters
     * @returns Promise<Models.PropertyCreateOrUpdateResponse>
     */
    createOrUpdate(resourceGroupName: string, serviceName: string, propId: string, parameters: Models.PropertyContract, options?: Models.PropertyCreateOrUpdateOptionalParams): Promise<Models.PropertyCreateOrUpdateResponse>;
    /**
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param propId Identifier of the property.
     * @param parameters Create parameters.
     * @param callback The callback
     */
    createOrUpdate(resourceGroupName: string, serviceName: string, propId: string, parameters: Models.PropertyContract, callback: msRest.ServiceCallback<Models.PropertyContract>): void;
    /**
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param propId Identifier of the property.
     * @param parameters Create parameters.
     * @param options The optional parameters
     * @param callback The callback
     */
    createOrUpdate(resourceGroupName: string, serviceName: string, propId: string, parameters: Models.PropertyContract, options: Models.PropertyCreateOrUpdateOptionalParams, callback: msRest.ServiceCallback<Models.PropertyContract>): void;
    /**
     * Updates the specific property.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param propId Identifier of the property.
     * @param parameters Update parameters.
     * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header
     * response of the GET request or it should be * for unconditional update.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    update(resourceGroupName: string, serviceName: string, propId: string, parameters: Models.PropertyUpdateParameters, ifMatch: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param propId Identifier of the property.
     * @param parameters Update parameters.
     * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header
     * response of the GET request or it should be * for unconditional update.
     * @param callback The callback
     */
    update(resourceGroupName: string, serviceName: string, propId: string, parameters: Models.PropertyUpdateParameters, ifMatch: string, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param propId Identifier of the property.
     * @param parameters Update parameters.
     * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header
     * response of the GET request or it should be * for unconditional update.
     * @param options The optional parameters
     * @param callback The callback
     */
    update(resourceGroupName: string, serviceName: string, propId: string, parameters: Models.PropertyUpdateParameters, ifMatch: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
    /**
     * Deletes specific property from the API Management service instance.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param propId Identifier of the property.
     * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header
     * response of the GET request or it should be * for unconditional update.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    deleteMethod(resourceGroupName: string, serviceName: string, propId: string, ifMatch: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param propId Identifier of the property.
     * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header
     * response of the GET request or it should be * for unconditional update.
     * @param callback The callback
     */
    deleteMethod(resourceGroupName: string, serviceName: string, propId: string, ifMatch: string, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param propId Identifier of the property.
     * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header
     * response of the GET request or it should be * for unconditional update.
     * @param options The optional parameters
     * @param callback The callback
     */
    deleteMethod(resourceGroupName: string, serviceName: string, propId: string, ifMatch: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
    /**
     * Lists a collection of properties defined within a service instance.
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param [options] The optional parameters
     * @returns Promise<Models.PropertyListByServiceNextResponse>
     */
    listByServiceNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.PropertyListByServiceNextResponse>;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param callback The callback
     */
    listByServiceNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.PropertyCollection>): void;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param options The optional parameters
     * @param callback The callback
     */
    listByServiceNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PropertyCollection>): void;
}
//# sourceMappingURL=property.d.ts.map