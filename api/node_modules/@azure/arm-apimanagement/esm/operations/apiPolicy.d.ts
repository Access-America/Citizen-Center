import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import { ApiManagementClientContext } from "../apiManagementClientContext";
/** Class representing a ApiPolicy. */
export declare class ApiPolicy {
    private readonly client;
    /**
     * Create a ApiPolicy.
     * @param {ApiManagementClientContext} client Reference to the service client.
     */
    constructor(client: ApiManagementClientContext);
    /**
     * Get the policy configuration at the API level.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API revision identifier. Must be unique in the current API Management service
     * instance. Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @param [options] The optional parameters
     * @returns Promise<Models.ApiPolicyListByApiResponse>
     */
    listByApi(resourceGroupName: string, serviceName: string, apiId: string, options?: msRest.RequestOptionsBase): Promise<Models.ApiPolicyListByApiResponse>;
    /**
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API revision identifier. Must be unique in the current API Management service
     * instance. Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @param callback The callback
     */
    listByApi(resourceGroupName: string, serviceName: string, apiId: string, callback: msRest.ServiceCallback<Models.PolicyCollection>): void;
    /**
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API revision identifier. Must be unique in the current API Management service
     * instance. Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @param options The optional parameters
     * @param callback The callback
     */
    listByApi(resourceGroupName: string, serviceName: string, apiId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PolicyCollection>): void;
    /**
     * Gets the entity state (Etag) version of the API policy specified by its identifier.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API revision identifier. Must be unique in the current API Management service
     * instance. Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @param [options] The optional parameters
     * @returns Promise<Models.ApiPolicyGetEntityTagResponse>
     */
    getEntityTag(resourceGroupName: string, serviceName: string, apiId: string, options?: msRest.RequestOptionsBase): Promise<Models.ApiPolicyGetEntityTagResponse>;
    /**
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API revision identifier. Must be unique in the current API Management service
     * instance. Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @param callback The callback
     */
    getEntityTag(resourceGroupName: string, serviceName: string, apiId: string, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API revision identifier. Must be unique in the current API Management service
     * instance. Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @param options The optional parameters
     * @param callback The callback
     */
    getEntityTag(resourceGroupName: string, serviceName: string, apiId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
    /**
     * Get the policy configuration at the API level.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API revision identifier. Must be unique in the current API Management service
     * instance. Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @param [options] The optional parameters
     * @returns Promise<Models.ApiPolicyGetResponse>
     */
    get(resourceGroupName: string, serviceName: string, apiId: string, options?: Models.ApiPolicyGetOptionalParams): Promise<Models.ApiPolicyGetResponse>;
    /**
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API revision identifier. Must be unique in the current API Management service
     * instance. Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @param callback The callback
     */
    get(resourceGroupName: string, serviceName: string, apiId: string, callback: msRest.ServiceCallback<Models.PolicyContract>): void;
    /**
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API revision identifier. Must be unique in the current API Management service
     * instance. Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @param options The optional parameters
     * @param callback The callback
     */
    get(resourceGroupName: string, serviceName: string, apiId: string, options: Models.ApiPolicyGetOptionalParams, callback: msRest.ServiceCallback<Models.PolicyContract>): void;
    /**
     * Creates or updates policy configuration for the API.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API revision identifier. Must be unique in the current API Management service
     * instance. Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @param parameters The policy contents to apply.
     * @param [options] The optional parameters
     * @returns Promise<Models.ApiPolicyCreateOrUpdateResponse>
     */
    createOrUpdate(resourceGroupName: string, serviceName: string, apiId: string, parameters: Models.PolicyContract, options?: Models.ApiPolicyCreateOrUpdateOptionalParams): Promise<Models.ApiPolicyCreateOrUpdateResponse>;
    /**
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API revision identifier. Must be unique in the current API Management service
     * instance. Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @param parameters The policy contents to apply.
     * @param callback The callback
     */
    createOrUpdate(resourceGroupName: string, serviceName: string, apiId: string, parameters: Models.PolicyContract, callback: msRest.ServiceCallback<Models.PolicyContract>): void;
    /**
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API revision identifier. Must be unique in the current API Management service
     * instance. Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @param parameters The policy contents to apply.
     * @param options The optional parameters
     * @param callback The callback
     */
    createOrUpdate(resourceGroupName: string, serviceName: string, apiId: string, parameters: Models.PolicyContract, options: Models.ApiPolicyCreateOrUpdateOptionalParams, callback: msRest.ServiceCallback<Models.PolicyContract>): void;
    /**
     * Deletes the policy configuration at the Api.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API revision identifier. Must be unique in the current API Management service
     * instance. Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header
     * response of the GET request or it should be * for unconditional update.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    deleteMethod(resourceGroupName: string, serviceName: string, apiId: string, ifMatch: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API revision identifier. Must be unique in the current API Management service
     * instance. Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header
     * response of the GET request or it should be * for unconditional update.
     * @param callback The callback
     */
    deleteMethod(resourceGroupName: string, serviceName: string, apiId: string, ifMatch: string, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API revision identifier. Must be unique in the current API Management service
     * instance. Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header
     * response of the GET request or it should be * for unconditional update.
     * @param options The optional parameters
     * @param callback The callback
     */
    deleteMethod(resourceGroupName: string, serviceName: string, apiId: string, ifMatch: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
}
//# sourceMappingURL=apiPolicy.d.ts.map