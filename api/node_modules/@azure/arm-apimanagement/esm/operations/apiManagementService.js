/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
import * as tslib_1 from "tslib";
import * as msRest from "@azure/ms-rest-js";
import * as Mappers from "../models/apiManagementServiceMappers";
import * as Parameters from "../models/parameters";
/** Class representing a ApiManagementService. */
var ApiManagementService = /** @class */ (function () {
    /**
     * Create a ApiManagementService.
     * @param {ApiManagementClientContext} client Reference to the service client.
     */
    function ApiManagementService(client) {
        this.client = client;
    }
    /**
     * Restores a backup of an API Management service created using the ApiManagementService_Backup
     * operation on the current service. This is a long running operation and could take several
     * minutes to complete.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param parameters Parameters supplied to the Restore API Management service from backup
     * operation.
     * @param [options] The optional parameters
     * @returns Promise<Models.ApiManagementServiceRestoreResponse>
     */
    ApiManagementService.prototype.restore = function (resourceGroupName, serviceName, parameters, options) {
        return this.beginRestore(resourceGroupName, serviceName, parameters, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    /**
     * Creates a backup of the API Management service to the given Azure Storage Account. This is long
     * running operation and could take several minutes to complete.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param parameters Parameters supplied to the ApiManagementService_Backup operation.
     * @param [options] The optional parameters
     * @returns Promise<Models.ApiManagementServiceBackupResponse>
     */
    ApiManagementService.prototype.backup = function (resourceGroupName, serviceName, parameters, options) {
        return this.beginBackup(resourceGroupName, serviceName, parameters, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    /**
     * Creates or updates an API Management service. This is long running operation and could take
     * several minutes to complete.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param parameters Parameters supplied to the CreateOrUpdate API Management service operation.
     * @param [options] The optional parameters
     * @returns Promise<Models.ApiManagementServiceCreateOrUpdateResponse>
     */
    ApiManagementService.prototype.createOrUpdate = function (resourceGroupName, serviceName, parameters, options) {
        return this.beginCreateOrUpdate(resourceGroupName, serviceName, parameters, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    /**
     * Updates an existing API Management service.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param parameters Parameters supplied to the CreateOrUpdate API Management service operation.
     * @param [options] The optional parameters
     * @returns Promise<Models.ApiManagementServiceUpdateResponse>
     */
    ApiManagementService.prototype.update = function (resourceGroupName, serviceName, parameters, options) {
        return this.beginUpdate(resourceGroupName, serviceName, parameters, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    ApiManagementService.prototype.get = function (resourceGroupName, serviceName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            serviceName: serviceName,
            options: options
        }, getOperationSpec, callback);
    };
    /**
     * Deletes an existing API Management service.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param [options] The optional parameters
     * @returns Promise<Models.ApiManagementServiceDeleteMethodResponse>
     */
    ApiManagementService.prototype.deleteMethod = function (resourceGroupName, serviceName, options) {
        return this.beginDeleteMethod(resourceGroupName, serviceName, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    ApiManagementService.prototype.listByResourceGroup = function (resourceGroupName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            options: options
        }, listByResourceGroupOperationSpec, callback);
    };
    ApiManagementService.prototype.list = function (options, callback) {
        return this.client.sendOperationRequest({
            options: options
        }, listOperationSpec, callback);
    };
    ApiManagementService.prototype.getSsoToken = function (resourceGroupName, serviceName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            serviceName: serviceName,
            options: options
        }, getSsoTokenOperationSpec, callback);
    };
    ApiManagementService.prototype.checkNameAvailability = function (parameters, options, callback) {
        return this.client.sendOperationRequest({
            parameters: parameters,
            options: options
        }, checkNameAvailabilityOperationSpec, callback);
    };
    /**
     * Updates the Microsoft.ApiManagement resource running in the Virtual network to pick the updated
     * network settings.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param [options] The optional parameters
     * @returns Promise<Models.ApiManagementServiceApplyNetworkConfigurationUpdatesResponse>
     */
    ApiManagementService.prototype.applyNetworkConfigurationUpdates = function (resourceGroupName, serviceName, options) {
        return this.beginApplyNetworkConfigurationUpdates(resourceGroupName, serviceName, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    /**
     * Restores a backup of an API Management service created using the ApiManagementService_Backup
     * operation on the current service. This is a long running operation and could take several
     * minutes to complete.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param parameters Parameters supplied to the Restore API Management service from backup
     * operation.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    ApiManagementService.prototype.beginRestore = function (resourceGroupName, serviceName, parameters, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            serviceName: serviceName,
            parameters: parameters,
            options: options
        }, beginRestoreOperationSpec, options);
    };
    /**
     * Creates a backup of the API Management service to the given Azure Storage Account. This is long
     * running operation and could take several minutes to complete.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param parameters Parameters supplied to the ApiManagementService_Backup operation.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    ApiManagementService.prototype.beginBackup = function (resourceGroupName, serviceName, parameters, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            serviceName: serviceName,
            parameters: parameters,
            options: options
        }, beginBackupOperationSpec, options);
    };
    /**
     * Creates or updates an API Management service. This is long running operation and could take
     * several minutes to complete.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param parameters Parameters supplied to the CreateOrUpdate API Management service operation.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    ApiManagementService.prototype.beginCreateOrUpdate = function (resourceGroupName, serviceName, parameters, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            serviceName: serviceName,
            parameters: parameters,
            options: options
        }, beginCreateOrUpdateOperationSpec, options);
    };
    /**
     * Updates an existing API Management service.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param parameters Parameters supplied to the CreateOrUpdate API Management service operation.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    ApiManagementService.prototype.beginUpdate = function (resourceGroupName, serviceName, parameters, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            serviceName: serviceName,
            parameters: parameters,
            options: options
        }, beginUpdateOperationSpec, options);
    };
    /**
     * Deletes an existing API Management service.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    ApiManagementService.prototype.beginDeleteMethod = function (resourceGroupName, serviceName, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            serviceName: serviceName,
            options: options
        }, beginDeleteMethodOperationSpec, options);
    };
    /**
     * Updates the Microsoft.ApiManagement resource running in the Virtual network to pick the updated
     * network settings.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    ApiManagementService.prototype.beginApplyNetworkConfigurationUpdates = function (resourceGroupName, serviceName, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            serviceName: serviceName,
            options: options
        }, beginApplyNetworkConfigurationUpdatesOperationSpec, options);
    };
    ApiManagementService.prototype.listByResourceGroupNext = function (nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, listByResourceGroupNextOperationSpec, callback);
    };
    ApiManagementService.prototype.listNext = function (nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, listNextOperationSpec, callback);
    };
    return ApiManagementService;
}());
export { ApiManagementService };
// Operation Specifications
var serializer = new msRest.Serializer(Mappers);
var getOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.serviceName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.ApiManagementServiceResource
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var listByResourceGroupOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.ApiManagementServiceListResult
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var listOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/providers/Microsoft.ApiManagement/service",
    urlParameters: [
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.ApiManagementServiceListResult
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var getSsoTokenOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/getssotoken",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.serviceName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.ApiManagementServiceGetSsoTokenResult
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var checkNameAvailabilityOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/providers/Microsoft.ApiManagement/checkNameAvailability",
    urlParameters: [
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "parameters",
        mapper: tslib_1.__assign({}, Mappers.ApiManagementServiceCheckNameAvailabilityParameters, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.ApiManagementServiceNameAvailabilityResult
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var beginRestoreOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/restore",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.serviceName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "parameters",
        mapper: tslib_1.__assign({}, Mappers.ApiManagementServiceBackupRestoreParameters, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.ApiManagementServiceResource
        },
        202: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var beginBackupOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/backup",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.serviceName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "parameters",
        mapper: tslib_1.__assign({}, Mappers.ApiManagementServiceBackupRestoreParameters, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.ApiManagementServiceResource
        },
        202: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var beginCreateOrUpdateOperationSpec = {
    httpMethod: "PUT",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.serviceName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "parameters",
        mapper: tslib_1.__assign({}, Mappers.ApiManagementServiceResource, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.ApiManagementServiceResource
        },
        201: {
            bodyMapper: Mappers.ApiManagementServiceResource
        },
        202: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var beginUpdateOperationSpec = {
    httpMethod: "PATCH",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.serviceName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "parameters",
        mapper: tslib_1.__assign({}, Mappers.ApiManagementServiceUpdateParameters, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.ApiManagementServiceResource
        },
        202: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var beginDeleteMethodOperationSpec = {
    httpMethod: "DELETE",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.serviceName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {},
        202: {
            bodyMapper: Mappers.ApiManagementServiceResource
        },
        204: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var beginApplyNetworkConfigurationUpdatesOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/applynetworkconfigurationupdates",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.serviceName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: [
            "options",
            "parameters"
        ],
        mapper: Mappers.ApiManagementServiceApplyNetworkConfigurationParameters
    },
    responses: {
        200: {
            bodyMapper: Mappers.ApiManagementServiceResource
        },
        202: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var listByResourceGroupNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.ApiManagementServiceListResult
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var listNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.ApiManagementServiceListResult
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
//# sourceMappingURL=apiManagementService.js.map