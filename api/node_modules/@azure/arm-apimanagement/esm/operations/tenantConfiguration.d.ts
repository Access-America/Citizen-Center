import * as msRest from "@azure/ms-rest-js";
import * as msRestAzure from "@azure/ms-rest-azure-js";
import * as Models from "../models";
import { ApiManagementClientContext } from "../apiManagementClientContext";
/** Class representing a TenantConfiguration. */
export declare class TenantConfiguration {
    private readonly client;
    /**
     * Create a TenantConfiguration.
     * @param {ApiManagementClientContext} client Reference to the service client.
     */
    constructor(client: ApiManagementClientContext);
    /**
     * This operation applies changes from the specified Git branch to the configuration database. This
     * is a long running operation and could take several minutes to complete.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param parameters Deploy Configuration parameters.
     * @param [options] The optional parameters
     * @returns Promise<Models.TenantConfigurationDeployResponse>
     */
    deploy(resourceGroupName: string, serviceName: string, parameters: Models.DeployConfigurationParameters, options?: msRest.RequestOptionsBase): Promise<Models.TenantConfigurationDeployResponse>;
    /**
     * This operation creates a commit with the current configuration snapshot to the specified branch
     * in the repository. This is a long running operation and could take several minutes to complete.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param parameters Save Configuration parameters.
     * @param [options] The optional parameters
     * @returns Promise<Models.TenantConfigurationSaveResponse>
     */
    save(resourceGroupName: string, serviceName: string, parameters: Models.SaveConfigurationParameter, options?: msRest.RequestOptionsBase): Promise<Models.TenantConfigurationSaveResponse>;
    /**
     * This operation validates the changes in the specified Git branch. This is a long running
     * operation and could take several minutes to complete.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param parameters Validate Configuration parameters.
     * @param [options] The optional parameters
     * @returns Promise<Models.TenantConfigurationValidateResponse>
     */
    validate(resourceGroupName: string, serviceName: string, parameters: Models.DeployConfigurationParameters, options?: msRest.RequestOptionsBase): Promise<Models.TenantConfigurationValidateResponse>;
    /**
     * Gets the status of the most recent synchronization between the configuration database and the
     * Git repository.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param [options] The optional parameters
     * @returns Promise<Models.TenantConfigurationGetSyncStateResponse>
     */
    getSyncState(resourceGroupName: string, serviceName: string, options?: msRest.RequestOptionsBase): Promise<Models.TenantConfigurationGetSyncStateResponse>;
    /**
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param callback The callback
     */
    getSyncState(resourceGroupName: string, serviceName: string, callback: msRest.ServiceCallback<Models.TenantConfigurationSyncStateContract>): void;
    /**
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param options The optional parameters
     * @param callback The callback
     */
    getSyncState(resourceGroupName: string, serviceName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.TenantConfigurationSyncStateContract>): void;
    /**
     * This operation applies changes from the specified Git branch to the configuration database. This
     * is a long running operation and could take several minutes to complete.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param parameters Deploy Configuration parameters.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    beginDeploy(resourceGroupName: string, serviceName: string, parameters: Models.DeployConfigurationParameters, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller>;
    /**
     * This operation creates a commit with the current configuration snapshot to the specified branch
     * in the repository. This is a long running operation and could take several minutes to complete.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param parameters Save Configuration parameters.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    beginSave(resourceGroupName: string, serviceName: string, parameters: Models.SaveConfigurationParameter, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller>;
    /**
     * This operation validates the changes in the specified Git branch. This is a long running
     * operation and could take several minutes to complete.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param parameters Validate Configuration parameters.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    beginValidate(resourceGroupName: string, serviceName: string, parameters: Models.DeployConfigurationParameters, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller>;
}
//# sourceMappingURL=tenantConfiguration.d.ts.map