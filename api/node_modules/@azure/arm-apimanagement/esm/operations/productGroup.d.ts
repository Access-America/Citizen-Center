import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import { ApiManagementClientContext } from "../apiManagementClientContext";
/** Class representing a ProductGroup. */
export declare class ProductGroup {
    private readonly client;
    /**
     * Create a ProductGroup.
     * @param {ApiManagementClientContext} client Reference to the service client.
     */
    constructor(client: ApiManagementClientContext);
    /**
     * Lists the collection of developer groups associated with the specified product.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param productId Product identifier. Must be unique in the current API Management service
     * instance.
     * @param [options] The optional parameters
     * @returns Promise<Models.ProductGroupListByProductResponse>
     */
    listByProduct(resourceGroupName: string, serviceName: string, productId: string, options?: Models.ProductGroupListByProductOptionalParams): Promise<Models.ProductGroupListByProductResponse>;
    /**
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param productId Product identifier. Must be unique in the current API Management service
     * instance.
     * @param callback The callback
     */
    listByProduct(resourceGroupName: string, serviceName: string, productId: string, callback: msRest.ServiceCallback<Models.GroupCollection>): void;
    /**
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param productId Product identifier. Must be unique in the current API Management service
     * instance.
     * @param options The optional parameters
     * @param callback The callback
     */
    listByProduct(resourceGroupName: string, serviceName: string, productId: string, options: Models.ProductGroupListByProductOptionalParams, callback: msRest.ServiceCallback<Models.GroupCollection>): void;
    /**
     * Checks that Group entity specified by identifier is associated with the Product entity.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param productId Product identifier. Must be unique in the current API Management service
     * instance.
     * @param groupId Group identifier. Must be unique in the current API Management service instance.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    checkEntityExists(resourceGroupName: string, serviceName: string, productId: string, groupId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param productId Product identifier. Must be unique in the current API Management service
     * instance.
     * @param groupId Group identifier. Must be unique in the current API Management service instance.
     * @param callback The callback
     */
    checkEntityExists(resourceGroupName: string, serviceName: string, productId: string, groupId: string, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param productId Product identifier. Must be unique in the current API Management service
     * instance.
     * @param groupId Group identifier. Must be unique in the current API Management service instance.
     * @param options The optional parameters
     * @param callback The callback
     */
    checkEntityExists(resourceGroupName: string, serviceName: string, productId: string, groupId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
    /**
     * Adds the association between the specified developer group with the specified product.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param productId Product identifier. Must be unique in the current API Management service
     * instance.
     * @param groupId Group identifier. Must be unique in the current API Management service instance.
     * @param [options] The optional parameters
     * @returns Promise<Models.ProductGroupCreateOrUpdateResponse>
     */
    createOrUpdate(resourceGroupName: string, serviceName: string, productId: string, groupId: string, options?: msRest.RequestOptionsBase): Promise<Models.ProductGroupCreateOrUpdateResponse>;
    /**
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param productId Product identifier. Must be unique in the current API Management service
     * instance.
     * @param groupId Group identifier. Must be unique in the current API Management service instance.
     * @param callback The callback
     */
    createOrUpdate(resourceGroupName: string, serviceName: string, productId: string, groupId: string, callback: msRest.ServiceCallback<Models.GroupContract>): void;
    /**
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param productId Product identifier. Must be unique in the current API Management service
     * instance.
     * @param groupId Group identifier. Must be unique in the current API Management service instance.
     * @param options The optional parameters
     * @param callback The callback
     */
    createOrUpdate(resourceGroupName: string, serviceName: string, productId: string, groupId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.GroupContract>): void;
    /**
     * Deletes the association between the specified group and product.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param productId Product identifier. Must be unique in the current API Management service
     * instance.
     * @param groupId Group identifier. Must be unique in the current API Management service instance.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    deleteMethod(resourceGroupName: string, serviceName: string, productId: string, groupId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param productId Product identifier. Must be unique in the current API Management service
     * instance.
     * @param groupId Group identifier. Must be unique in the current API Management service instance.
     * @param callback The callback
     */
    deleteMethod(resourceGroupName: string, serviceName: string, productId: string, groupId: string, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param productId Product identifier. Must be unique in the current API Management service
     * instance.
     * @param groupId Group identifier. Must be unique in the current API Management service instance.
     * @param options The optional parameters
     * @param callback The callback
     */
    deleteMethod(resourceGroupName: string, serviceName: string, productId: string, groupId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
    /**
     * Lists the collection of developer groups associated with the specified product.
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param [options] The optional parameters
     * @returns Promise<Models.ProductGroupListByProductNextResponse>
     */
    listByProductNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.ProductGroupListByProductNextResponse>;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param callback The callback
     */
    listByProductNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.GroupCollection>): void;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param options The optional parameters
     * @param callback The callback
     */
    listByProductNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.GroupCollection>): void;
}
//# sourceMappingURL=productGroup.d.ts.map