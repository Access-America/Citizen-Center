import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import { ApiManagementClientContext } from "../apiManagementClientContext";
/** Class representing a IdentityProvider. */
export declare class IdentityProvider {
    private readonly client;
    /**
     * Create a IdentityProvider.
     * @param {ApiManagementClientContext} client Reference to the service client.
     */
    constructor(client: ApiManagementClientContext);
    /**
     * Lists a collection of Identity Provider configured in the specified service instance.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param [options] The optional parameters
     * @returns Promise<Models.IdentityProviderListByServiceResponse>
     */
    listByService(resourceGroupName: string, serviceName: string, options?: msRest.RequestOptionsBase): Promise<Models.IdentityProviderListByServiceResponse>;
    /**
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param callback The callback
     */
    listByService(resourceGroupName: string, serviceName: string, callback: msRest.ServiceCallback<Models.IdentityProviderList>): void;
    /**
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param options The optional parameters
     * @param callback The callback
     */
    listByService(resourceGroupName: string, serviceName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.IdentityProviderList>): void;
    /**
     * Gets the entity state (Etag) version of the identityProvider specified by its identifier.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param identityProviderName Identity Provider Type identifier. Possible values include:
     * 'facebook', 'google', 'microsoft', 'twitter', 'aad', 'aadB2C'
     * @param [options] The optional parameters
     * @returns Promise<Models.IdentityProviderGetEntityTagResponse>
     */
    getEntityTag(resourceGroupName: string, serviceName: string, identityProviderName: Models.IdentityProviderType, options?: msRest.RequestOptionsBase): Promise<Models.IdentityProviderGetEntityTagResponse>;
    /**
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param identityProviderName Identity Provider Type identifier. Possible values include:
     * 'facebook', 'google', 'microsoft', 'twitter', 'aad', 'aadB2C'
     * @param callback The callback
     */
    getEntityTag(resourceGroupName: string, serviceName: string, identityProviderName: Models.IdentityProviderType, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param identityProviderName Identity Provider Type identifier. Possible values include:
     * 'facebook', 'google', 'microsoft', 'twitter', 'aad', 'aadB2C'
     * @param options The optional parameters
     * @param callback The callback
     */
    getEntityTag(resourceGroupName: string, serviceName: string, identityProviderName: Models.IdentityProviderType, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
    /**
     * Gets the configuration details of the identity Provider configured in specified service
     * instance.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param identityProviderName Identity Provider Type identifier. Possible values include:
     * 'facebook', 'google', 'microsoft', 'twitter', 'aad', 'aadB2C'
     * @param [options] The optional parameters
     * @returns Promise<Models.IdentityProviderGetResponse>
     */
    get(resourceGroupName: string, serviceName: string, identityProviderName: Models.IdentityProviderType, options?: msRest.RequestOptionsBase): Promise<Models.IdentityProviderGetResponse>;
    /**
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param identityProviderName Identity Provider Type identifier. Possible values include:
     * 'facebook', 'google', 'microsoft', 'twitter', 'aad', 'aadB2C'
     * @param callback The callback
     */
    get(resourceGroupName: string, serviceName: string, identityProviderName: Models.IdentityProviderType, callback: msRest.ServiceCallback<Models.IdentityProviderContract>): void;
    /**
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param identityProviderName Identity Provider Type identifier. Possible values include:
     * 'facebook', 'google', 'microsoft', 'twitter', 'aad', 'aadB2C'
     * @param options The optional parameters
     * @param callback The callback
     */
    get(resourceGroupName: string, serviceName: string, identityProviderName: Models.IdentityProviderType, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.IdentityProviderContract>): void;
    /**
     * Creates or Updates the IdentityProvider configuration.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param identityProviderName Identity Provider Type identifier. Possible values include:
     * 'facebook', 'google', 'microsoft', 'twitter', 'aad', 'aadB2C'
     * @param parameters Create parameters.
     * @param [options] The optional parameters
     * @returns Promise<Models.IdentityProviderCreateOrUpdateResponse>
     */
    createOrUpdate(resourceGroupName: string, serviceName: string, identityProviderName: Models.IdentityProviderType, parameters: Models.IdentityProviderContract, options?: Models.IdentityProviderCreateOrUpdateOptionalParams): Promise<Models.IdentityProviderCreateOrUpdateResponse>;
    /**
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param identityProviderName Identity Provider Type identifier. Possible values include:
     * 'facebook', 'google', 'microsoft', 'twitter', 'aad', 'aadB2C'
     * @param parameters Create parameters.
     * @param callback The callback
     */
    createOrUpdate(resourceGroupName: string, serviceName: string, identityProviderName: Models.IdentityProviderType, parameters: Models.IdentityProviderContract, callback: msRest.ServiceCallback<Models.IdentityProviderContract>): void;
    /**
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param identityProviderName Identity Provider Type identifier. Possible values include:
     * 'facebook', 'google', 'microsoft', 'twitter', 'aad', 'aadB2C'
     * @param parameters Create parameters.
     * @param options The optional parameters
     * @param callback The callback
     */
    createOrUpdate(resourceGroupName: string, serviceName: string, identityProviderName: Models.IdentityProviderType, parameters: Models.IdentityProviderContract, options: Models.IdentityProviderCreateOrUpdateOptionalParams, callback: msRest.ServiceCallback<Models.IdentityProviderContract>): void;
    /**
     * Updates an existing IdentityProvider configuration.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param identityProviderName Identity Provider Type identifier. Possible values include:
     * 'facebook', 'google', 'microsoft', 'twitter', 'aad', 'aadB2C'
     * @param parameters Update parameters.
     * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header
     * response of the GET request or it should be * for unconditional update.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    update(resourceGroupName: string, serviceName: string, identityProviderName: Models.IdentityProviderType, parameters: Models.IdentityProviderUpdateParameters, ifMatch: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param identityProviderName Identity Provider Type identifier. Possible values include:
     * 'facebook', 'google', 'microsoft', 'twitter', 'aad', 'aadB2C'
     * @param parameters Update parameters.
     * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header
     * response of the GET request or it should be * for unconditional update.
     * @param callback The callback
     */
    update(resourceGroupName: string, serviceName: string, identityProviderName: Models.IdentityProviderType, parameters: Models.IdentityProviderUpdateParameters, ifMatch: string, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param identityProviderName Identity Provider Type identifier. Possible values include:
     * 'facebook', 'google', 'microsoft', 'twitter', 'aad', 'aadB2C'
     * @param parameters Update parameters.
     * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header
     * response of the GET request or it should be * for unconditional update.
     * @param options The optional parameters
     * @param callback The callback
     */
    update(resourceGroupName: string, serviceName: string, identityProviderName: Models.IdentityProviderType, parameters: Models.IdentityProviderUpdateParameters, ifMatch: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
    /**
     * Deletes the specified identity provider configuration.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param identityProviderName Identity Provider Type identifier. Possible values include:
     * 'facebook', 'google', 'microsoft', 'twitter', 'aad', 'aadB2C'
     * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header
     * response of the GET request or it should be * for unconditional update.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    deleteMethod(resourceGroupName: string, serviceName: string, identityProviderName: Models.IdentityProviderType, ifMatch: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param identityProviderName Identity Provider Type identifier. Possible values include:
     * 'facebook', 'google', 'microsoft', 'twitter', 'aad', 'aadB2C'
     * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header
     * response of the GET request or it should be * for unconditional update.
     * @param callback The callback
     */
    deleteMethod(resourceGroupName: string, serviceName: string, identityProviderName: Models.IdentityProviderType, ifMatch: string, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param identityProviderName Identity Provider Type identifier. Possible values include:
     * 'facebook', 'google', 'microsoft', 'twitter', 'aad', 'aadB2C'
     * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header
     * response of the GET request or it should be * for unconditional update.
     * @param options The optional parameters
     * @param callback The callback
     */
    deleteMethod(resourceGroupName: string, serviceName: string, identityProviderName: Models.IdentityProviderType, ifMatch: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
    /**
     * Lists a collection of Identity Provider configured in the specified service instance.
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param [options] The optional parameters
     * @returns Promise<Models.IdentityProviderListByServiceNextResponse>
     */
    listByServiceNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.IdentityProviderListByServiceNextResponse>;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param callback The callback
     */
    listByServiceNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.IdentityProviderList>): void;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param options The optional parameters
     * @param callback The callback
     */
    listByServiceNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.IdentityProviderList>): void;
}
//# sourceMappingURL=identityProvider.d.ts.map