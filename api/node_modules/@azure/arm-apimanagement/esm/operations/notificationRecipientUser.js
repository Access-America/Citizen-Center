/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
import * as msRest from "@azure/ms-rest-js";
import * as Mappers from "../models/notificationRecipientUserMappers";
import * as Parameters from "../models/parameters";
/** Class representing a NotificationRecipientUser. */
var NotificationRecipientUser = /** @class */ (function () {
    /**
     * Create a NotificationRecipientUser.
     * @param {ApiManagementClientContext} client Reference to the service client.
     */
    function NotificationRecipientUser(client) {
        this.client = client;
    }
    NotificationRecipientUser.prototype.listByNotification = function (resourceGroupName, serviceName, notificationName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            serviceName: serviceName,
            notificationName: notificationName,
            options: options
        }, listByNotificationOperationSpec, callback);
    };
    NotificationRecipientUser.prototype.checkEntityExists = function (resourceGroupName, serviceName, notificationName, userId, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            serviceName: serviceName,
            notificationName: notificationName,
            userId: userId,
            options: options
        }, checkEntityExistsOperationSpec, callback);
    };
    NotificationRecipientUser.prototype.createOrUpdate = function (resourceGroupName, serviceName, notificationName, userId, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            serviceName: serviceName,
            notificationName: notificationName,
            userId: userId,
            options: options
        }, createOrUpdateOperationSpec, callback);
    };
    NotificationRecipientUser.prototype.deleteMethod = function (resourceGroupName, serviceName, notificationName, userId, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            serviceName: serviceName,
            notificationName: notificationName,
            userId: userId,
            options: options
        }, deleteMethodOperationSpec, callback);
    };
    return NotificationRecipientUser;
}());
export { NotificationRecipientUser };
// Operation Specifications
var serializer = new msRest.Serializer(Mappers);
var listByNotificationOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/notifications/{notificationName}/recipientUsers",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.serviceName,
        Parameters.notificationName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.RecipientUserCollection
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var checkEntityExistsOperationSpec = {
    httpMethod: "HEAD",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/notifications/{notificationName}/recipientUsers/{userId}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.serviceName,
        Parameters.notificationName,
        Parameters.userId,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        204: {},
        404: {},
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var createOrUpdateOperationSpec = {
    httpMethod: "PUT",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/notifications/{notificationName}/recipientUsers/{userId}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.serviceName,
        Parameters.notificationName,
        Parameters.userId,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.RecipientUserContract
        },
        201: {
            bodyMapper: Mappers.RecipientUserContract
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var deleteMethodOperationSpec = {
    httpMethod: "DELETE",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/notifications/{notificationName}/recipientUsers/{userId}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.serviceName,
        Parameters.notificationName,
        Parameters.userId,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {},
        204: {},
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
//# sourceMappingURL=notificationRecipientUser.js.map