/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
import * as tslib_1 from "tslib";
import * as msRest from "@azure/ms-rest-js";
import * as Mappers from "../models/productPolicyMappers";
import * as Parameters from "../models/parameters";
/** Class representing a ProductPolicy. */
var ProductPolicy = /** @class */ (function () {
    /**
     * Create a ProductPolicy.
     * @param {ApiManagementClientContext} client Reference to the service client.
     */
    function ProductPolicy(client) {
        this.client = client;
    }
    ProductPolicy.prototype.listByProduct = function (resourceGroupName, serviceName, productId, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            serviceName: serviceName,
            productId: productId,
            options: options
        }, listByProductOperationSpec, callback);
    };
    ProductPolicy.prototype.getEntityTag = function (resourceGroupName, serviceName, productId, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            serviceName: serviceName,
            productId: productId,
            options: options
        }, getEntityTagOperationSpec, callback);
    };
    ProductPolicy.prototype.get = function (resourceGroupName, serviceName, productId, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            serviceName: serviceName,
            productId: productId,
            options: options
        }, getOperationSpec, callback);
    };
    ProductPolicy.prototype.createOrUpdate = function (resourceGroupName, serviceName, productId, parameters, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            serviceName: serviceName,
            productId: productId,
            parameters: parameters,
            options: options
        }, createOrUpdateOperationSpec, callback);
    };
    ProductPolicy.prototype.deleteMethod = function (resourceGroupName, serviceName, productId, ifMatch, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            serviceName: serviceName,
            productId: productId,
            ifMatch: ifMatch,
            options: options
        }, deleteMethodOperationSpec, callback);
    };
    return ProductPolicy;
}());
export { ProductPolicy };
// Operation Specifications
var serializer = new msRest.Serializer(Mappers);
var listByProductOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/products/{productId}/policies",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.serviceName,
        Parameters.productId,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.PolicyCollection
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var getEntityTagOperationSpec = {
    httpMethod: "HEAD",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/products/{productId}/policies/{policyId}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.serviceName,
        Parameters.productId,
        Parameters.policyId,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            headersMapper: Mappers.ProductPolicyGetEntityTagHeaders
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var getOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/products/{productId}/policies/{policyId}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.serviceName,
        Parameters.productId,
        Parameters.policyId,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.format0,
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.PolicyContract,
            headersMapper: Mappers.ProductPolicyGetHeaders
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var createOrUpdateOperationSpec = {
    httpMethod: "PUT",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/products/{productId}/policies/{policyId}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.serviceName,
        Parameters.productId,
        Parameters.policyId,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.ifMatch0,
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "parameters",
        mapper: tslib_1.__assign({}, Mappers.PolicyContract, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.PolicyContract,
            headersMapper: Mappers.ProductPolicyCreateOrUpdateHeaders
        },
        201: {
            bodyMapper: Mappers.PolicyContract,
            headersMapper: Mappers.ProductPolicyCreateOrUpdateHeaders
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var deleteMethodOperationSpec = {
    httpMethod: "DELETE",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/products/{productId}/policies/{policyId}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.serviceName,
        Parameters.productId,
        Parameters.policyId,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.ifMatch1,
        Parameters.acceptLanguage
    ],
    responses: {
        200: {},
        204: {},
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
//# sourceMappingURL=productPolicy.js.map