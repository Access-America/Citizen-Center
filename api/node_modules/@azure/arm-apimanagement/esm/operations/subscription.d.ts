import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import { ApiManagementClientContext } from "../apiManagementClientContext";
/** Class representing a Subscription. */
export declare class Subscription {
    private readonly client;
    /**
     * Create a Subscription.
     * @param {ApiManagementClientContext} client Reference to the service client.
     */
    constructor(client: ApiManagementClientContext);
    /**
     * Lists all subscriptions of the API Management service instance.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param [options] The optional parameters
     * @returns Promise<Models.SubscriptionListResponse>
     */
    list(resourceGroupName: string, serviceName: string, options?: Models.SubscriptionListOptionalParams): Promise<Models.SubscriptionListResponse>;
    /**
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param callback The callback
     */
    list(resourceGroupName: string, serviceName: string, callback: msRest.ServiceCallback<Models.SubscriptionCollection>): void;
    /**
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param options The optional parameters
     * @param callback The callback
     */
    list(resourceGroupName: string, serviceName: string, options: Models.SubscriptionListOptionalParams, callback: msRest.ServiceCallback<Models.SubscriptionCollection>): void;
    /**
     * Gets the entity state (Etag) version of the apimanagement subscription specified by its
     * identifier.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param sid Subscription entity Identifier. The entity represents the association between a user
     * and a product in API Management.
     * @param [options] The optional parameters
     * @returns Promise<Models.SubscriptionGetEntityTagResponse>
     */
    getEntityTag(resourceGroupName: string, serviceName: string, sid: string, options?: msRest.RequestOptionsBase): Promise<Models.SubscriptionGetEntityTagResponse>;
    /**
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param sid Subscription entity Identifier. The entity represents the association between a user
     * and a product in API Management.
     * @param callback The callback
     */
    getEntityTag(resourceGroupName: string, serviceName: string, sid: string, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param sid Subscription entity Identifier. The entity represents the association between a user
     * and a product in API Management.
     * @param options The optional parameters
     * @param callback The callback
     */
    getEntityTag(resourceGroupName: string, serviceName: string, sid: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
    /**
     * Gets the specified Subscription entity.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param sid Subscription entity Identifier. The entity represents the association between a user
     * and a product in API Management.
     * @param [options] The optional parameters
     * @returns Promise<Models.SubscriptionGetResponse>
     */
    get(resourceGroupName: string, serviceName: string, sid: string, options?: msRest.RequestOptionsBase): Promise<Models.SubscriptionGetResponse>;
    /**
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param sid Subscription entity Identifier. The entity represents the association between a user
     * and a product in API Management.
     * @param callback The callback
     */
    get(resourceGroupName: string, serviceName: string, sid: string, callback: msRest.ServiceCallback<Models.SubscriptionContract>): void;
    /**
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param sid Subscription entity Identifier. The entity represents the association between a user
     * and a product in API Management.
     * @param options The optional parameters
     * @param callback The callback
     */
    get(resourceGroupName: string, serviceName: string, sid: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SubscriptionContract>): void;
    /**
     * Creates or updates the subscription of specified user to the specified product.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param sid Subscription entity Identifier. The entity represents the association between a user
     * and a product in API Management.
     * @param parameters Create parameters.
     * @param [options] The optional parameters
     * @returns Promise<Models.SubscriptionCreateOrUpdateResponse>
     */
    createOrUpdate(resourceGroupName: string, serviceName: string, sid: string, parameters: Models.SubscriptionCreateParameters, options?: Models.SubscriptionCreateOrUpdateOptionalParams): Promise<Models.SubscriptionCreateOrUpdateResponse>;
    /**
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param sid Subscription entity Identifier. The entity represents the association between a user
     * and a product in API Management.
     * @param parameters Create parameters.
     * @param callback The callback
     */
    createOrUpdate(resourceGroupName: string, serviceName: string, sid: string, parameters: Models.SubscriptionCreateParameters, callback: msRest.ServiceCallback<Models.SubscriptionContract>): void;
    /**
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param sid Subscription entity Identifier. The entity represents the association between a user
     * and a product in API Management.
     * @param parameters Create parameters.
     * @param options The optional parameters
     * @param callback The callback
     */
    createOrUpdate(resourceGroupName: string, serviceName: string, sid: string, parameters: Models.SubscriptionCreateParameters, options: Models.SubscriptionCreateOrUpdateOptionalParams, callback: msRest.ServiceCallback<Models.SubscriptionContract>): void;
    /**
     * Updates the details of a subscription specified by its identifier.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param sid Subscription entity Identifier. The entity represents the association between a user
     * and a product in API Management.
     * @param parameters Update parameters.
     * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header
     * response of the GET request or it should be * for unconditional update.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    update(resourceGroupName: string, serviceName: string, sid: string, parameters: Models.SubscriptionUpdateParameters, ifMatch: string, options?: Models.SubscriptionUpdateOptionalParams): Promise<msRest.RestResponse>;
    /**
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param sid Subscription entity Identifier. The entity represents the association between a user
     * and a product in API Management.
     * @param parameters Update parameters.
     * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header
     * response of the GET request or it should be * for unconditional update.
     * @param callback The callback
     */
    update(resourceGroupName: string, serviceName: string, sid: string, parameters: Models.SubscriptionUpdateParameters, ifMatch: string, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param sid Subscription entity Identifier. The entity represents the association between a user
     * and a product in API Management.
     * @param parameters Update parameters.
     * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header
     * response of the GET request or it should be * for unconditional update.
     * @param options The optional parameters
     * @param callback The callback
     */
    update(resourceGroupName: string, serviceName: string, sid: string, parameters: Models.SubscriptionUpdateParameters, ifMatch: string, options: Models.SubscriptionUpdateOptionalParams, callback: msRest.ServiceCallback<void>): void;
    /**
     * Deletes the specified subscription.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param sid Subscription entity Identifier. The entity represents the association between a user
     * and a product in API Management.
     * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header
     * response of the GET request or it should be * for unconditional update.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    deleteMethod(resourceGroupName: string, serviceName: string, sid: string, ifMatch: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param sid Subscription entity Identifier. The entity represents the association between a user
     * and a product in API Management.
     * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header
     * response of the GET request or it should be * for unconditional update.
     * @param callback The callback
     */
    deleteMethod(resourceGroupName: string, serviceName: string, sid: string, ifMatch: string, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param sid Subscription entity Identifier. The entity represents the association between a user
     * and a product in API Management.
     * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header
     * response of the GET request or it should be * for unconditional update.
     * @param options The optional parameters
     * @param callback The callback
     */
    deleteMethod(resourceGroupName: string, serviceName: string, sid: string, ifMatch: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
    /**
     * Regenerates primary key of existing subscription of the API Management service instance.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param sid Subscription entity Identifier. The entity represents the association between a user
     * and a product in API Management.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    regeneratePrimaryKey(resourceGroupName: string, serviceName: string, sid: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param sid Subscription entity Identifier. The entity represents the association between a user
     * and a product in API Management.
     * @param callback The callback
     */
    regeneratePrimaryKey(resourceGroupName: string, serviceName: string, sid: string, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param sid Subscription entity Identifier. The entity represents the association between a user
     * and a product in API Management.
     * @param options The optional parameters
     * @param callback The callback
     */
    regeneratePrimaryKey(resourceGroupName: string, serviceName: string, sid: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
    /**
     * Regenerates secondary key of existing subscription of the API Management service instance.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param sid Subscription entity Identifier. The entity represents the association between a user
     * and a product in API Management.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    regenerateSecondaryKey(resourceGroupName: string, serviceName: string, sid: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param sid Subscription entity Identifier. The entity represents the association between a user
     * and a product in API Management.
     * @param callback The callback
     */
    regenerateSecondaryKey(resourceGroupName: string, serviceName: string, sid: string, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param sid Subscription entity Identifier. The entity represents the association between a user
     * and a product in API Management.
     * @param options The optional parameters
     * @param callback The callback
     */
    regenerateSecondaryKey(resourceGroupName: string, serviceName: string, sid: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
    /**
     * Lists all subscriptions of the API Management service instance.
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param [options] The optional parameters
     * @returns Promise<Models.SubscriptionListNextResponse>
     */
    listNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.SubscriptionListNextResponse>;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param callback The callback
     */
    listNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.SubscriptionCollection>): void;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param options The optional parameters
     * @param callback The callback
     */
    listNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SubscriptionCollection>): void;
}
//# sourceMappingURL=subscription.d.ts.map