import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import { ApiManagementClientContext } from "../apiManagementClientContext";
/** Class representing a Diagnostic. */
export declare class Diagnostic {
    private readonly client;
    /**
     * Create a Diagnostic.
     * @param {ApiManagementClientContext} client Reference to the service client.
     */
    constructor(client: ApiManagementClientContext);
    /**
     * Lists all diagnostics of the API Management service instance.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param [options] The optional parameters
     * @returns Promise<Models.DiagnosticListByServiceResponse>
     */
    listByService(resourceGroupName: string, serviceName: string, options?: Models.DiagnosticListByServiceOptionalParams): Promise<Models.DiagnosticListByServiceResponse>;
    /**
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param callback The callback
     */
    listByService(resourceGroupName: string, serviceName: string, callback: msRest.ServiceCallback<Models.DiagnosticCollection>): void;
    /**
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param options The optional parameters
     * @param callback The callback
     */
    listByService(resourceGroupName: string, serviceName: string, options: Models.DiagnosticListByServiceOptionalParams, callback: msRest.ServiceCallback<Models.DiagnosticCollection>): void;
    /**
     * Gets the entity state (Etag) version of the Diagnostic specified by its identifier.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param diagnosticId Diagnostic identifier. Must be unique in the current API Management service
     * instance.
     * @param [options] The optional parameters
     * @returns Promise<Models.DiagnosticGetEntityTagResponse>
     */
    getEntityTag(resourceGroupName: string, serviceName: string, diagnosticId: string, options?: msRest.RequestOptionsBase): Promise<Models.DiagnosticGetEntityTagResponse>;
    /**
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param diagnosticId Diagnostic identifier. Must be unique in the current API Management service
     * instance.
     * @param callback The callback
     */
    getEntityTag(resourceGroupName: string, serviceName: string, diagnosticId: string, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param diagnosticId Diagnostic identifier. Must be unique in the current API Management service
     * instance.
     * @param options The optional parameters
     * @param callback The callback
     */
    getEntityTag(resourceGroupName: string, serviceName: string, diagnosticId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
    /**
     * Gets the details of the Diagnostic specified by its identifier.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param diagnosticId Diagnostic identifier. Must be unique in the current API Management service
     * instance.
     * @param [options] The optional parameters
     * @returns Promise<Models.DiagnosticGetResponse>
     */
    get(resourceGroupName: string, serviceName: string, diagnosticId: string, options?: msRest.RequestOptionsBase): Promise<Models.DiagnosticGetResponse>;
    /**
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param diagnosticId Diagnostic identifier. Must be unique in the current API Management service
     * instance.
     * @param callback The callback
     */
    get(resourceGroupName: string, serviceName: string, diagnosticId: string, callback: msRest.ServiceCallback<Models.DiagnosticContract>): void;
    /**
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param diagnosticId Diagnostic identifier. Must be unique in the current API Management service
     * instance.
     * @param options The optional parameters
     * @param callback The callback
     */
    get(resourceGroupName: string, serviceName: string, diagnosticId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DiagnosticContract>): void;
    /**
     * Creates a new Diagnostic or updates an existing one.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param diagnosticId Diagnostic identifier. Must be unique in the current API Management service
     * instance.
     * @param parameters Create parameters.
     * @param [options] The optional parameters
     * @returns Promise<Models.DiagnosticCreateOrUpdateResponse>
     */
    createOrUpdate(resourceGroupName: string, serviceName: string, diagnosticId: string, parameters: Models.DiagnosticContract, options?: Models.DiagnosticCreateOrUpdateOptionalParams): Promise<Models.DiagnosticCreateOrUpdateResponse>;
    /**
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param diagnosticId Diagnostic identifier. Must be unique in the current API Management service
     * instance.
     * @param parameters Create parameters.
     * @param callback The callback
     */
    createOrUpdate(resourceGroupName: string, serviceName: string, diagnosticId: string, parameters: Models.DiagnosticContract, callback: msRest.ServiceCallback<Models.DiagnosticContract>): void;
    /**
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param diagnosticId Diagnostic identifier. Must be unique in the current API Management service
     * instance.
     * @param parameters Create parameters.
     * @param options The optional parameters
     * @param callback The callback
     */
    createOrUpdate(resourceGroupName: string, serviceName: string, diagnosticId: string, parameters: Models.DiagnosticContract, options: Models.DiagnosticCreateOrUpdateOptionalParams, callback: msRest.ServiceCallback<Models.DiagnosticContract>): void;
    /**
     * Updates the details of the Diagnostic specified by its identifier.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param diagnosticId Diagnostic identifier. Must be unique in the current API Management service
     * instance.
     * @param parameters Diagnostic Update parameters.
     * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header
     * response of the GET request or it should be * for unconditional update.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    update(resourceGroupName: string, serviceName: string, diagnosticId: string, parameters: Models.DiagnosticContract, ifMatch: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param diagnosticId Diagnostic identifier. Must be unique in the current API Management service
     * instance.
     * @param parameters Diagnostic Update parameters.
     * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header
     * response of the GET request or it should be * for unconditional update.
     * @param callback The callback
     */
    update(resourceGroupName: string, serviceName: string, diagnosticId: string, parameters: Models.DiagnosticContract, ifMatch: string, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param diagnosticId Diagnostic identifier. Must be unique in the current API Management service
     * instance.
     * @param parameters Diagnostic Update parameters.
     * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header
     * response of the GET request or it should be * for unconditional update.
     * @param options The optional parameters
     * @param callback The callback
     */
    update(resourceGroupName: string, serviceName: string, diagnosticId: string, parameters: Models.DiagnosticContract, ifMatch: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
    /**
     * Deletes the specified Diagnostic.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param diagnosticId Diagnostic identifier. Must be unique in the current API Management service
     * instance.
     * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header
     * response of the GET request or it should be * for unconditional update.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    deleteMethod(resourceGroupName: string, serviceName: string, diagnosticId: string, ifMatch: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param diagnosticId Diagnostic identifier. Must be unique in the current API Management service
     * instance.
     * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header
     * response of the GET request or it should be * for unconditional update.
     * @param callback The callback
     */
    deleteMethod(resourceGroupName: string, serviceName: string, diagnosticId: string, ifMatch: string, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param diagnosticId Diagnostic identifier. Must be unique in the current API Management service
     * instance.
     * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header
     * response of the GET request or it should be * for unconditional update.
     * @param options The optional parameters
     * @param callback The callback
     */
    deleteMethod(resourceGroupName: string, serviceName: string, diagnosticId: string, ifMatch: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
    /**
     * Lists all diagnostics of the API Management service instance.
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param [options] The optional parameters
     * @returns Promise<Models.DiagnosticListByServiceNextResponse>
     */
    listByServiceNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.DiagnosticListByServiceNextResponse>;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param callback The callback
     */
    listByServiceNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.DiagnosticCollection>): void;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param options The optional parameters
     * @param callback The callback
     */
    listByServiceNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DiagnosticCollection>): void;
}
//# sourceMappingURL=diagnostic.d.ts.map