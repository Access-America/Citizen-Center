import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import { ApiManagementClientContext } from "../apiManagementClientContext";
/** Class representing a NotificationRecipientEmail. */
export declare class NotificationRecipientEmail {
    private readonly client;
    /**
     * Create a NotificationRecipientEmail.
     * @param {ApiManagementClientContext} client Reference to the service client.
     */
    constructor(client: ApiManagementClientContext);
    /**
     * Gets the list of the Notification Recipient Emails subscribed to a notification.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param notificationName Notification Name Identifier. Possible values include:
     * 'RequestPublisherNotificationMessage', 'PurchasePublisherNotificationMessage',
     * 'NewApplicationNotificationMessage', 'BCC', 'NewIssuePublisherNotificationMessage',
     * 'AccountClosedPublisher', 'QuotaLimitApproachingPublisherNotificationMessage'
     * @param [options] The optional parameters
     * @returns Promise<Models.NotificationRecipientEmailListByNotificationResponse>
     */
    listByNotification(resourceGroupName: string, serviceName: string, notificationName: Models.NotificationName, options?: msRest.RequestOptionsBase): Promise<Models.NotificationRecipientEmailListByNotificationResponse>;
    /**
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param notificationName Notification Name Identifier. Possible values include:
     * 'RequestPublisherNotificationMessage', 'PurchasePublisherNotificationMessage',
     * 'NewApplicationNotificationMessage', 'BCC', 'NewIssuePublisherNotificationMessage',
     * 'AccountClosedPublisher', 'QuotaLimitApproachingPublisherNotificationMessage'
     * @param callback The callback
     */
    listByNotification(resourceGroupName: string, serviceName: string, notificationName: Models.NotificationName, callback: msRest.ServiceCallback<Models.RecipientEmailCollection>): void;
    /**
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param notificationName Notification Name Identifier. Possible values include:
     * 'RequestPublisherNotificationMessage', 'PurchasePublisherNotificationMessage',
     * 'NewApplicationNotificationMessage', 'BCC', 'NewIssuePublisherNotificationMessage',
     * 'AccountClosedPublisher', 'QuotaLimitApproachingPublisherNotificationMessage'
     * @param options The optional parameters
     * @param callback The callback
     */
    listByNotification(resourceGroupName: string, serviceName: string, notificationName: Models.NotificationName, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.RecipientEmailCollection>): void;
    /**
     * Determine if Notification Recipient Email subscribed to the notification.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param notificationName Notification Name Identifier. Possible values include:
     * 'RequestPublisherNotificationMessage', 'PurchasePublisherNotificationMessage',
     * 'NewApplicationNotificationMessage', 'BCC', 'NewIssuePublisherNotificationMessage',
     * 'AccountClosedPublisher', 'QuotaLimitApproachingPublisherNotificationMessage'
     * @param email Email identifier.
     * @param [options] The optional parameters
     * @returns Promise<Models.NotificationRecipientEmailCheckEntityExistsResponse>
     */
    checkEntityExists(resourceGroupName: string, serviceName: string, notificationName: Models.NotificationName, email: string, options?: msRest.RequestOptionsBase): Promise<Models.NotificationRecipientEmailCheckEntityExistsResponse>;
    /**
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param notificationName Notification Name Identifier. Possible values include:
     * 'RequestPublisherNotificationMessage', 'PurchasePublisherNotificationMessage',
     * 'NewApplicationNotificationMessage', 'BCC', 'NewIssuePublisherNotificationMessage',
     * 'AccountClosedPublisher', 'QuotaLimitApproachingPublisherNotificationMessage'
     * @param email Email identifier.
     * @param callback The callback
     */
    checkEntityExists(resourceGroupName: string, serviceName: string, notificationName: Models.NotificationName, email: string, callback: msRest.ServiceCallback<boolean>): void;
    /**
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param notificationName Notification Name Identifier. Possible values include:
     * 'RequestPublisherNotificationMessage', 'PurchasePublisherNotificationMessage',
     * 'NewApplicationNotificationMessage', 'BCC', 'NewIssuePublisherNotificationMessage',
     * 'AccountClosedPublisher', 'QuotaLimitApproachingPublisherNotificationMessage'
     * @param email Email identifier.
     * @param options The optional parameters
     * @param callback The callback
     */
    checkEntityExists(resourceGroupName: string, serviceName: string, notificationName: Models.NotificationName, email: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<boolean>): void;
    /**
     * Adds the Email address to the list of Recipients for the Notification.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param notificationName Notification Name Identifier. Possible values include:
     * 'RequestPublisherNotificationMessage', 'PurchasePublisherNotificationMessage',
     * 'NewApplicationNotificationMessage', 'BCC', 'NewIssuePublisherNotificationMessage',
     * 'AccountClosedPublisher', 'QuotaLimitApproachingPublisherNotificationMessage'
     * @param email Email identifier.
     * @param [options] The optional parameters
     * @returns Promise<Models.NotificationRecipientEmailCreateOrUpdateResponse>
     */
    createOrUpdate(resourceGroupName: string, serviceName: string, notificationName: Models.NotificationName, email: string, options?: msRest.RequestOptionsBase): Promise<Models.NotificationRecipientEmailCreateOrUpdateResponse>;
    /**
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param notificationName Notification Name Identifier. Possible values include:
     * 'RequestPublisherNotificationMessage', 'PurchasePublisherNotificationMessage',
     * 'NewApplicationNotificationMessage', 'BCC', 'NewIssuePublisherNotificationMessage',
     * 'AccountClosedPublisher', 'QuotaLimitApproachingPublisherNotificationMessage'
     * @param email Email identifier.
     * @param callback The callback
     */
    createOrUpdate(resourceGroupName: string, serviceName: string, notificationName: Models.NotificationName, email: string, callback: msRest.ServiceCallback<Models.RecipientEmailContract>): void;
    /**
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param notificationName Notification Name Identifier. Possible values include:
     * 'RequestPublisherNotificationMessage', 'PurchasePublisherNotificationMessage',
     * 'NewApplicationNotificationMessage', 'BCC', 'NewIssuePublisherNotificationMessage',
     * 'AccountClosedPublisher', 'QuotaLimitApproachingPublisherNotificationMessage'
     * @param email Email identifier.
     * @param options The optional parameters
     * @param callback The callback
     */
    createOrUpdate(resourceGroupName: string, serviceName: string, notificationName: Models.NotificationName, email: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.RecipientEmailContract>): void;
    /**
     * Removes the email from the list of Notification.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param notificationName Notification Name Identifier. Possible values include:
     * 'RequestPublisherNotificationMessage', 'PurchasePublisherNotificationMessage',
     * 'NewApplicationNotificationMessage', 'BCC', 'NewIssuePublisherNotificationMessage',
     * 'AccountClosedPublisher', 'QuotaLimitApproachingPublisherNotificationMessage'
     * @param email Email identifier.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    deleteMethod(resourceGroupName: string, serviceName: string, notificationName: Models.NotificationName, email: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param notificationName Notification Name Identifier. Possible values include:
     * 'RequestPublisherNotificationMessage', 'PurchasePublisherNotificationMessage',
     * 'NewApplicationNotificationMessage', 'BCC', 'NewIssuePublisherNotificationMessage',
     * 'AccountClosedPublisher', 'QuotaLimitApproachingPublisherNotificationMessage'
     * @param email Email identifier.
     * @param callback The callback
     */
    deleteMethod(resourceGroupName: string, serviceName: string, notificationName: Models.NotificationName, email: string, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param notificationName Notification Name Identifier. Possible values include:
     * 'RequestPublisherNotificationMessage', 'PurchasePublisherNotificationMessage',
     * 'NewApplicationNotificationMessage', 'BCC', 'NewIssuePublisherNotificationMessage',
     * 'AccountClosedPublisher', 'QuotaLimitApproachingPublisherNotificationMessage'
     * @param email Email identifier.
     * @param options The optional parameters
     * @param callback The callback
     */
    deleteMethod(resourceGroupName: string, serviceName: string, notificationName: Models.NotificationName, email: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
}
//# sourceMappingURL=notificationRecipientEmail.d.ts.map