/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
import * as tslib_1 from "tslib";
import * as msRest from "@azure/ms-rest-js";
import * as Mappers from "../models/tenantConfigurationMappers";
import * as Parameters from "../models/parameters";
/** Class representing a TenantConfiguration. */
var TenantConfiguration = /** @class */ (function () {
    /**
     * Create a TenantConfiguration.
     * @param {ApiManagementClientContext} client Reference to the service client.
     */
    function TenantConfiguration(client) {
        this.client = client;
    }
    /**
     * This operation applies changes from the specified Git branch to the configuration database. This
     * is a long running operation and could take several minutes to complete.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param parameters Deploy Configuration parameters.
     * @param [options] The optional parameters
     * @returns Promise<Models.TenantConfigurationDeployResponse>
     */
    TenantConfiguration.prototype.deploy = function (resourceGroupName, serviceName, parameters, options) {
        return this.beginDeploy(resourceGroupName, serviceName, parameters, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    /**
     * This operation creates a commit with the current configuration snapshot to the specified branch
     * in the repository. This is a long running operation and could take several minutes to complete.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param parameters Save Configuration parameters.
     * @param [options] The optional parameters
     * @returns Promise<Models.TenantConfigurationSaveResponse>
     */
    TenantConfiguration.prototype.save = function (resourceGroupName, serviceName, parameters, options) {
        return this.beginSave(resourceGroupName, serviceName, parameters, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    /**
     * This operation validates the changes in the specified Git branch. This is a long running
     * operation and could take several minutes to complete.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param parameters Validate Configuration parameters.
     * @param [options] The optional parameters
     * @returns Promise<Models.TenantConfigurationValidateResponse>
     */
    TenantConfiguration.prototype.validate = function (resourceGroupName, serviceName, parameters, options) {
        return this.beginValidate(resourceGroupName, serviceName, parameters, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    TenantConfiguration.prototype.getSyncState = function (resourceGroupName, serviceName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            serviceName: serviceName,
            options: options
        }, getSyncStateOperationSpec, callback);
    };
    /**
     * This operation applies changes from the specified Git branch to the configuration database. This
     * is a long running operation and could take several minutes to complete.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param parameters Deploy Configuration parameters.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    TenantConfiguration.prototype.beginDeploy = function (resourceGroupName, serviceName, parameters, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            serviceName: serviceName,
            parameters: parameters,
            options: options
        }, beginDeployOperationSpec, options);
    };
    /**
     * This operation creates a commit with the current configuration snapshot to the specified branch
     * in the repository. This is a long running operation and could take several minutes to complete.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param parameters Save Configuration parameters.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    TenantConfiguration.prototype.beginSave = function (resourceGroupName, serviceName, parameters, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            serviceName: serviceName,
            parameters: parameters,
            options: options
        }, beginSaveOperationSpec, options);
    };
    /**
     * This operation validates the changes in the specified Git branch. This is a long running
     * operation and could take several minutes to complete.
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param parameters Validate Configuration parameters.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    TenantConfiguration.prototype.beginValidate = function (resourceGroupName, serviceName, parameters, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            serviceName: serviceName,
            parameters: parameters,
            options: options
        }, beginValidateOperationSpec, options);
    };
    return TenantConfiguration;
}());
export { TenantConfiguration };
// Operation Specifications
var serializer = new msRest.Serializer(Mappers);
var getSyncStateOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/tenant/{configurationName}/syncState",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.serviceName,
        Parameters.subscriptionId,
        Parameters.configurationName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.TenantConfigurationSyncStateContract
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var beginDeployOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/tenant/{configurationName}/deploy",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.serviceName,
        Parameters.subscriptionId,
        Parameters.configurationName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "parameters",
        mapper: tslib_1.__assign({}, Mappers.DeployConfigurationParameters, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.OperationResultContract
        },
        202: {},
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var beginSaveOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/tenant/{configurationName}/save",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.serviceName,
        Parameters.subscriptionId,
        Parameters.configurationName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "parameters",
        mapper: tslib_1.__assign({}, Mappers.SaveConfigurationParameter, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.OperationResultContract
        },
        202: {},
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var beginValidateOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/tenant/{configurationName}/validate",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.serviceName,
        Parameters.subscriptionId,
        Parameters.configurationName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "parameters",
        mapper: tslib_1.__assign({}, Mappers.DeployConfigurationParameters, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.OperationResultContract
        },
        202: {},
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
//# sourceMappingURL=tenantConfiguration.js.map