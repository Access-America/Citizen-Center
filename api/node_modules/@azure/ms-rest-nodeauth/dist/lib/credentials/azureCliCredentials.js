"use strict";
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const ms_rest_js_1 = require("@azure/ms-rest-js");
const login_1 = require("../login");
/**
 * Describes the credentials by retrieving token via Azure CLI.
 */
class AzureCliCredentials {
    constructor(subscriptinInfo, tokenInfo) {
        /**
         * The number of seconds within which it is good to renew the token.
         *  A constant set to 270 seconds (4.5 minutes).
         */
        this._tokenRenewalMarginInSeconds = 270;
        this.subscriptionInfo = subscriptinInfo;
        this.tokenInfo = tokenInfo;
    }
    /**
     * Tries to get the new token from Azure CLI, if the token has expired or the subscription has
     * changed else uses the cached accessToken.
     * @return The tokenResponse (tokenType and accessToken are the two important properties).
     */
    getToken() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this._hasTokenExpired() || this._hasSubscriptionChanged()) {
                try {
                    // refresh the access token
                    this.tokenInfo = yield AzureCliCredentials.getAccessToken(this.subscriptionInfo.id);
                }
                catch (err) {
                    throw new Error(`An error occurred while refreshing the new access ` +
                        `token:${err.stderr ? err.stderr : err.message}`);
                }
            }
            const result = {
                accessToken: this.tokenInfo.accessToken,
                tokenType: this.tokenInfo.tokenType,
                expiresOn: this.tokenInfo.expiresOn,
                tenantId: this.tokenInfo.tenant
            };
            return result;
        });
    }
    /**
     * Signs a request with the Authentication header.
     * @param The request to be signed.
     */
    signRequest(webResource) {
        return __awaiter(this, void 0, void 0, function* () {
            const tokenResponse = yield this.getToken();
            webResource.headers.set(ms_rest_js_1.Constants.HeaderConstants.AUTHORIZATION, `${tokenResponse.tokenType} ${tokenResponse.accessToken}`);
            return Promise.resolve(webResource);
        });
    }
    _hasTokenExpired() {
        let result = true;
        const now = Math.floor(Date.now() / 1000);
        if (this.tokenInfo.expiresOn &&
            this.tokenInfo.expiresOn instanceof Date &&
            Math.floor(this.tokenInfo.expiresOn.getTime() / 1000) - now > this._tokenRenewalMarginInSeconds) {
            result = false;
        }
        return result;
    }
    _hasSubscriptionChanged() {
        return this.subscriptionInfo.id !== this.tokenInfo.subscription;
    }
    /**
     * Gets the access token for the default or specified subscription.
     * @param subscriptionIdOrName The subscription id or name for which the access token is required.
     */
    static getAccessToken(subscriptionIdOrName) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                let cmd = "account get-access-token";
                if (subscriptionIdOrName) {
                    cmd += ` -s "${subscriptionIdOrName}"`;
                }
                const result = yield login_1.execAz(cmd);
                result.expiresOn = new Date(result.expiresOn);
                return result;
            }
            catch (err) {
                const message = `An error occurred while getting credentials from ` +
                    `Azure CLI: ${err.stack}`;
                throw new Error(message);
            }
        });
    }
    /**
     * Gets the default subscription from Azure CLI.
     */
    static getDefaultSubscription() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const result = yield login_1.execAz("account show");
                return result;
            }
            catch (err) {
                const message = `An error occurred while getting information about the current subscription from ` +
                    `Azure CLI: ${err.stack}`;
                throw new Error(message);
            }
        });
    }
    /**
     * Sets the specified subscription as the default subscription for Azure CLI.
     * @param subscriptionIdOrName The name or id of the subsciption that needs to be set as the
     * default subscription.
     */
    static setDefaultSubscription(subscriptionIdOrName) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                yield login_1.execAz(`account set -s ${subscriptionIdOrName}`);
            }
            catch (err) {
                const message = `An error occurred while setting the current subscription from ` +
                    `Azure CLI: ${err.stack}`;
                throw new Error(message);
            }
        });
    }
    /**
     * Returns a list of all the subscriptions from Azure CLI.
     * @param options Optional parameters that can be provided while listing all the subcriptions.
     */
    static listAllSubscriptions(options = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            let subscriptionList = [];
            try {
                let cmd = "account list";
                if (options.all) {
                    cmd += " --all";
                }
                if (options.refresh) {
                    cmd += "--refresh";
                }
                subscriptionList = yield login_1.execAz(cmd);
                if (subscriptionList && subscriptionList.length) {
                    for (const sub of subscriptionList) {
                        if (sub.cloudName) {
                            sub.environmentName = sub.cloudName;
                            delete sub.cloudName;
                        }
                    }
                }
                return subscriptionList;
            }
            catch (err) {
                const message = `An error occurred while getting a list of all the subscription from ` +
                    `Azure CLI: ${err.stack}`;
                throw new Error(message);
            }
        });
    }
    /**
     * Provides credentials that can be used by the JS SDK to interact with Azure via azure cli.
     * **Pre-requisite**
     * - **install azure-cli** . For more information see
     * {@link https://docs.microsoft.com/en-us/cli/azure/install-azure-cli?view=azure-cli-latest Install Azure CLI}
     * - **login via `az login`**
     * - If you want to work against a specific subscription then please set that subscription as
     * the default subscription by executing `az account set -s <subscriptionNameOrId>`
     */
    static create() {
        return __awaiter(this, void 0, void 0, function* () {
            const [subscriptinInfo, accessToken] = yield Promise.all([
                AzureCliCredentials.getDefaultSubscription(),
                AzureCliCredentials.getAccessToken()
            ]);
            return new AzureCliCredentials(subscriptinInfo, accessToken);
        });
    }
}
exports.AzureCliCredentials = AzureCliCredentials;
//# sourceMappingURL=azureCliCredentials.js.map