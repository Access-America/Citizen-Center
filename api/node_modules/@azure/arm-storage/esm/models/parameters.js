/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
export var acceptLanguage = {
    parameterPath: "acceptLanguage",
    mapper: {
        serializedName: "accept-language",
        defaultValue: 'en-US',
        type: {
            name: "String"
        }
    }
};
export var accountName = {
    parameterPath: "accountName",
    mapper: {
        required: true,
        serializedName: "accountName",
        constraints: {
            MaxLength: 24,
            MinLength: 3
        },
        type: {
            name: "String"
        }
    }
};
export var apiVersion = {
    parameterPath: "apiVersion",
    mapper: {
        required: true,
        serializedName: "api-version",
        constraints: {
            MinLength: 1
        },
        type: {
            name: "String"
        }
    }
};
export var blobServicesName = {
    parameterPath: "blobServicesName",
    mapper: {
        required: true,
        isConstant: true,
        serializedName: "BlobServicesName",
        defaultValue: 'default',
        type: {
            name: "String"
        }
    }
};
export var containerName = {
    parameterPath: "containerName",
    mapper: {
        required: true,
        serializedName: "containerName",
        constraints: {
            MaxLength: 63,
            MinLength: 3
        },
        type: {
            name: "String"
        }
    }
};
export var expand = {
    parameterPath: [
        "options",
        "expand"
    ],
    mapper: {
        serializedName: "$expand",
        type: {
            name: "Enum",
            allowedValues: [
                "geoReplicationStats"
            ]
        }
    }
};
export var filter = {
    parameterPath: [
        "options",
        "filter"
    ],
    mapper: {
        serializedName: "$filter",
        type: {
            name: "String"
        }
    }
};
export var ifMatch0 = {
    parameterPath: [
        "options",
        "ifMatch"
    ],
    mapper: {
        serializedName: "If-Match",
        type: {
            name: "String"
        }
    }
};
export var ifMatch1 = {
    parameterPath: "ifMatch",
    mapper: {
        required: true,
        serializedName: "If-Match",
        type: {
            name: "String"
        }
    }
};
export var immutabilityPolicyName = {
    parameterPath: "immutabilityPolicyName",
    mapper: {
        required: true,
        isConstant: true,
        serializedName: "immutabilityPolicyName",
        defaultValue: 'default',
        type: {
            name: "String"
        }
    }
};
export var location = {
    parameterPath: "location",
    mapper: {
        required: true,
        serializedName: "location",
        type: {
            name: "String"
        }
    }
};
export var managementPolicyName = {
    parameterPath: "managementPolicyName",
    mapper: {
        required: true,
        isConstant: true,
        serializedName: "managementPolicyName",
        defaultValue: 'default',
        type: {
            name: "String"
        }
    }
};
export var maxpagesize = {
    parameterPath: [
        "options",
        "maxpagesize"
    ],
    mapper: {
        serializedName: "$maxpagesize",
        type: {
            name: "String"
        }
    }
};
export var nextPageLink = {
    parameterPath: "nextPageLink",
    mapper: {
        required: true,
        serializedName: "nextLink",
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
export var resourceGroupName = {
    parameterPath: "resourceGroupName",
    mapper: {
        required: true,
        serializedName: "resourceGroupName",
        constraints: {
            MaxLength: 90,
            MinLength: 1,
            Pattern: /^[-\w\._\(\)]+$/
        },
        type: {
            name: "String"
        }
    }
};
export var skipToken = {
    parameterPath: [
        "options",
        "skipToken"
    ],
    mapper: {
        serializedName: "$skipToken",
        type: {
            name: "String"
        }
    }
};
export var subscriptionId = {
    parameterPath: "subscriptionId",
    mapper: {
        required: true,
        serializedName: "subscriptionId",
        constraints: {
            MinLength: 1
        },
        type: {
            name: "String"
        }
    }
};
//# sourceMappingURL=parameters.js.map