/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
import * as tslib_1 from "tslib";
import * as msRest from "@azure/ms-rest-js";
import * as Mappers from "../models/blobContainersMappers";
import * as Parameters from "../models/parameters";
/** Class representing a BlobContainers. */
var BlobContainers = /** @class */ (function () {
    /**
     * Create a BlobContainers.
     * @param {StorageManagementClientContext} client Reference to the service client.
     */
    function BlobContainers(client) {
        this.client = client;
    }
    BlobContainers.prototype.list = function (resourceGroupName, accountName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            accountName: accountName,
            options: options
        }, listOperationSpec, callback);
    };
    BlobContainers.prototype.create = function (resourceGroupName, accountName, containerName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            accountName: accountName,
            containerName: containerName,
            options: options
        }, createOperationSpec, callback);
    };
    BlobContainers.prototype.update = function (resourceGroupName, accountName, containerName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            accountName: accountName,
            containerName: containerName,
            options: options
        }, updateOperationSpec, callback);
    };
    BlobContainers.prototype.get = function (resourceGroupName, accountName, containerName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            accountName: accountName,
            containerName: containerName,
            options: options
        }, getOperationSpec, callback);
    };
    BlobContainers.prototype.deleteMethod = function (resourceGroupName, accountName, containerName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            accountName: accountName,
            containerName: containerName,
            options: options
        }, deleteMethodOperationSpec, callback);
    };
    BlobContainers.prototype.setLegalHold = function (resourceGroupName, accountName, containerName, tags, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            accountName: accountName,
            containerName: containerName,
            tags: tags,
            options: options
        }, setLegalHoldOperationSpec, callback);
    };
    BlobContainers.prototype.clearLegalHold = function (resourceGroupName, accountName, containerName, tags, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            accountName: accountName,
            containerName: containerName,
            tags: tags,
            options: options
        }, clearLegalHoldOperationSpec, callback);
    };
    BlobContainers.prototype.createOrUpdateImmutabilityPolicy = function (resourceGroupName, accountName, containerName, immutabilityPeriodSinceCreationInDays, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            accountName: accountName,
            containerName: containerName,
            immutabilityPeriodSinceCreationInDays: immutabilityPeriodSinceCreationInDays,
            options: options
        }, createOrUpdateImmutabilityPolicyOperationSpec, callback);
    };
    BlobContainers.prototype.getImmutabilityPolicy = function (resourceGroupName, accountName, containerName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            accountName: accountName,
            containerName: containerName,
            options: options
        }, getImmutabilityPolicyOperationSpec, callback);
    };
    BlobContainers.prototype.deleteImmutabilityPolicy = function (resourceGroupName, accountName, containerName, ifMatch, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            accountName: accountName,
            containerName: containerName,
            ifMatch: ifMatch,
            options: options
        }, deleteImmutabilityPolicyOperationSpec, callback);
    };
    BlobContainers.prototype.lockImmutabilityPolicy = function (resourceGroupName, accountName, containerName, ifMatch, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            accountName: accountName,
            containerName: containerName,
            ifMatch: ifMatch,
            options: options
        }, lockImmutabilityPolicyOperationSpec, callback);
    };
    BlobContainers.prototype.extendImmutabilityPolicy = function (resourceGroupName, accountName, containerName, ifMatch, immutabilityPeriodSinceCreationInDays, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            accountName: accountName,
            containerName: containerName,
            ifMatch: ifMatch,
            immutabilityPeriodSinceCreationInDays: immutabilityPeriodSinceCreationInDays,
            options: options
        }, extendImmutabilityPolicyOperationSpec, callback);
    };
    BlobContainers.prototype.lease = function (resourceGroupName, accountName, containerName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            accountName: accountName,
            containerName: containerName,
            options: options
        }, leaseOperationSpec, callback);
    };
    BlobContainers.prototype.listNext = function (nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, listNextOperationSpec, callback);
    };
    return BlobContainers;
}());
export { BlobContainers };
// Operation Specifications
var serializer = new msRest.Serializer(Mappers);
var listOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/default/containers",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.accountName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion,
        Parameters.skipToken,
        Parameters.maxpagesize,
        Parameters.filter
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.ListContainerItems
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var createOperationSpec = {
    httpMethod: "PUT",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/default/containers/{containerName}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.accountName,
        Parameters.containerName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: {
            publicAccess: [
                "options",
                "publicAccess"
            ],
            metadata: [
                "options",
                "metadata"
            ]
        },
        mapper: tslib_1.__assign({}, Mappers.BlobContainer, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.BlobContainer
        },
        201: {
            bodyMapper: Mappers.BlobContainer
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var updateOperationSpec = {
    httpMethod: "PATCH",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/default/containers/{containerName}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.accountName,
        Parameters.containerName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: {
            publicAccess: [
                "options",
                "publicAccess"
            ],
            metadata: [
                "options",
                "metadata"
            ]
        },
        mapper: tslib_1.__assign({}, Mappers.BlobContainer, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.BlobContainer
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var getOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/default/containers/{containerName}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.accountName,
        Parameters.containerName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.BlobContainer
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var deleteMethodOperationSpec = {
    httpMethod: "DELETE",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/default/containers/{containerName}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.accountName,
        Parameters.containerName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {},
        204: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var setLegalHoldOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/default/containers/{containerName}/setLegalHold",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.accountName,
        Parameters.containerName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: {
            tags: "tags"
        },
        mapper: tslib_1.__assign({}, Mappers.LegalHold, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.LegalHold
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var clearLegalHoldOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/default/containers/{containerName}/clearLegalHold",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.accountName,
        Parameters.containerName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: {
            tags: "tags"
        },
        mapper: tslib_1.__assign({}, Mappers.LegalHold, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.LegalHold
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var createOrUpdateImmutabilityPolicyOperationSpec = {
    httpMethod: "PUT",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/default/containers/{containerName}/immutabilityPolicies/{immutabilityPolicyName}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.accountName,
        Parameters.containerName,
        Parameters.immutabilityPolicyName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.ifMatch0,
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: {
            immutabilityPeriodSinceCreationInDays: "immutabilityPeriodSinceCreationInDays"
        },
        mapper: Mappers.ImmutabilityPolicy
    },
    responses: {
        200: {
            bodyMapper: Mappers.ImmutabilityPolicy,
            headersMapper: Mappers.BlobContainersCreateOrUpdateImmutabilityPolicyHeaders
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var getImmutabilityPolicyOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/default/containers/{containerName}/immutabilityPolicies/{immutabilityPolicyName}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.accountName,
        Parameters.containerName,
        Parameters.immutabilityPolicyName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.ifMatch0,
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.ImmutabilityPolicy,
            headersMapper: Mappers.BlobContainersGetImmutabilityPolicyHeaders
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var deleteImmutabilityPolicyOperationSpec = {
    httpMethod: "DELETE",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/default/containers/{containerName}/immutabilityPolicies/{immutabilityPolicyName}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.accountName,
        Parameters.containerName,
        Parameters.immutabilityPolicyName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.ifMatch1,
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.ImmutabilityPolicy,
            headersMapper: Mappers.BlobContainersDeleteImmutabilityPolicyHeaders
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var lockImmutabilityPolicyOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/default/containers/{containerName}/immutabilityPolicies/default/lock",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.accountName,
        Parameters.containerName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.ifMatch1,
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.ImmutabilityPolicy,
            headersMapper: Mappers.BlobContainersLockImmutabilityPolicyHeaders
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var extendImmutabilityPolicyOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/default/containers/{containerName}/immutabilityPolicies/default/extend",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.accountName,
        Parameters.containerName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.ifMatch1,
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: {
            immutabilityPeriodSinceCreationInDays: "immutabilityPeriodSinceCreationInDays"
        },
        mapper: Mappers.ImmutabilityPolicy
    },
    responses: {
        200: {
            bodyMapper: Mappers.ImmutabilityPolicy,
            headersMapper: Mappers.BlobContainersExtendImmutabilityPolicyHeaders
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var leaseOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/default/containers/{containerName}/lease",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.accountName,
        Parameters.containerName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: [
            "options",
            "parameters"
        ],
        mapper: Mappers.LeaseContainerRequest
    },
    responses: {
        200: {
            bodyMapper: Mappers.LeaseContainerResponse
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var listNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.ListContainerItems
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
//# sourceMappingURL=blobContainers.js.map