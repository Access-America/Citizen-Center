/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
import * as tslib_1 from "tslib";
import * as msRest from "@azure/ms-rest-js";
import * as Mappers from "../models/storageAccountsMappers";
import * as Parameters from "../models/parameters";
/** Class representing a StorageAccounts. */
var StorageAccounts = /** @class */ (function () {
    /**
     * Create a StorageAccounts.
     * @param {StorageManagementClientContext} client Reference to the service client.
     */
    function StorageAccounts(client) {
        this.client = client;
    }
    StorageAccounts.prototype.checkNameAvailability = function (name, options, callback) {
        return this.client.sendOperationRequest({
            name: name,
            options: options
        }, checkNameAvailabilityOperationSpec, callback);
    };
    /**
     * Asynchronously creates a new storage account with the specified parameters. If an account is
     * already created and a subsequent create request is issued with different properties, the account
     * properties will be updated. If an account is already created and a subsequent create or update
     * request is issued with the exact same set of properties, the request will succeed.
     * @param resourceGroupName The name of the resource group within the user's subscription. The name
     * is case insensitive.
     * @param accountName The name of the storage account within the specified resource group. Storage
     * account names must be between 3 and 24 characters in length and use numbers and lower-case
     * letters only.
     * @param parameters The parameters to provide for the created account.
     * @param [options] The optional parameters
     * @returns Promise<Models.StorageAccountsCreateResponse>
     */
    StorageAccounts.prototype.create = function (resourceGroupName, accountName, parameters, options) {
        return this.beginCreate(resourceGroupName, accountName, parameters, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    StorageAccounts.prototype.deleteMethod = function (resourceGroupName, accountName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            accountName: accountName,
            options: options
        }, deleteMethodOperationSpec, callback);
    };
    StorageAccounts.prototype.getProperties = function (resourceGroupName, accountName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            accountName: accountName,
            options: options
        }, getPropertiesOperationSpec, callback);
    };
    StorageAccounts.prototype.update = function (resourceGroupName, accountName, parameters, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            accountName: accountName,
            parameters: parameters,
            options: options
        }, updateOperationSpec, callback);
    };
    StorageAccounts.prototype.list = function (options, callback) {
        return this.client.sendOperationRequest({
            options: options
        }, listOperationSpec, callback);
    };
    StorageAccounts.prototype.listByResourceGroup = function (resourceGroupName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            options: options
        }, listByResourceGroupOperationSpec, callback);
    };
    StorageAccounts.prototype.listKeys = function (resourceGroupName, accountName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            accountName: accountName,
            options: options
        }, listKeysOperationSpec, callback);
    };
    StorageAccounts.prototype.regenerateKey = function (resourceGroupName, accountName, keyName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            accountName: accountName,
            keyName: keyName,
            options: options
        }, regenerateKeyOperationSpec, callback);
    };
    StorageAccounts.prototype.listAccountSAS = function (resourceGroupName, accountName, parameters, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            accountName: accountName,
            parameters: parameters,
            options: options
        }, listAccountSASOperationSpec, callback);
    };
    StorageAccounts.prototype.listServiceSAS = function (resourceGroupName, accountName, parameters, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            accountName: accountName,
            parameters: parameters,
            options: options
        }, listServiceSASOperationSpec, callback);
    };
    /**
     * Failover request can be triggered for a storage account in case of availability issues. The
     * failover occurs from the storage account's primary cluster to secondary cluster for RA-GRS
     * accounts. The secondary cluster will become primary after failover.
     * @param resourceGroupName The name of the resource group within the user's subscription. The name
     * is case insensitive.
     * @param accountName The name of the storage account within the specified resource group. Storage
     * account names must be between 3 and 24 characters in length and use numbers and lower-case
     * letters only.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    StorageAccounts.prototype.failover = function (resourceGroupName, accountName, options) {
        return this.beginFailover(resourceGroupName, accountName, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    StorageAccounts.prototype.revokeUserDelegationKeys = function (resourceGroupName, accountName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            accountName: accountName,
            options: options
        }, revokeUserDelegationKeysOperationSpec, callback);
    };
    /**
     * Asynchronously creates a new storage account with the specified parameters. If an account is
     * already created and a subsequent create request is issued with different properties, the account
     * properties will be updated. If an account is already created and a subsequent create or update
     * request is issued with the exact same set of properties, the request will succeed.
     * @param resourceGroupName The name of the resource group within the user's subscription. The name
     * is case insensitive.
     * @param accountName The name of the storage account within the specified resource group. Storage
     * account names must be between 3 and 24 characters in length and use numbers and lower-case
     * letters only.
     * @param parameters The parameters to provide for the created account.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    StorageAccounts.prototype.beginCreate = function (resourceGroupName, accountName, parameters, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            accountName: accountName,
            parameters: parameters,
            options: options
        }, beginCreateOperationSpec, options);
    };
    /**
     * Failover request can be triggered for a storage account in case of availability issues. The
     * failover occurs from the storage account's primary cluster to secondary cluster for RA-GRS
     * accounts. The secondary cluster will become primary after failover.
     * @param resourceGroupName The name of the resource group within the user's subscription. The name
     * is case insensitive.
     * @param accountName The name of the storage account within the specified resource group. Storage
     * account names must be between 3 and 24 characters in length and use numbers and lower-case
     * letters only.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    StorageAccounts.prototype.beginFailover = function (resourceGroupName, accountName, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            accountName: accountName,
            options: options
        }, beginFailoverOperationSpec, options);
    };
    return StorageAccounts;
}());
export { StorageAccounts };
// Operation Specifications
var serializer = new msRest.Serializer(Mappers);
var checkNameAvailabilityOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/providers/Microsoft.Storage/checkNameAvailability",
    urlParameters: [
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: {
            name: "name"
        },
        mapper: tslib_1.__assign({}, Mappers.StorageAccountCheckNameAvailabilityParameters, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.CheckNameAvailabilityResult
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var deleteMethodOperationSpec = {
    httpMethod: "DELETE",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.accountName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {},
        204: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var getPropertiesOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.accountName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion,
        Parameters.expand
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.StorageAccount
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var updateOperationSpec = {
    httpMethod: "PATCH",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.accountName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "parameters",
        mapper: tslib_1.__assign({}, Mappers.StorageAccountUpdateParameters, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.StorageAccount
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var listOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/providers/Microsoft.Storage/storageAccounts",
    urlParameters: [
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.StorageAccountListResult
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var listByResourceGroupOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.StorageAccountListResult
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var listKeysOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/listKeys",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.accountName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.StorageAccountListKeysResult
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var regenerateKeyOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/regenerateKey",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.accountName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: {
            keyName: "keyName"
        },
        mapper: tslib_1.__assign({}, Mappers.StorageAccountRegenerateKeyParameters, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.StorageAccountListKeysResult
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var listAccountSASOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/ListAccountSas",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.accountName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "parameters",
        mapper: tslib_1.__assign({}, Mappers.AccountSasParameters, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.ListAccountSasResponse
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var listServiceSASOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/ListServiceSas",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.accountName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "parameters",
        mapper: tslib_1.__assign({}, Mappers.ServiceSasParameters, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.ListServiceSasResponse
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var revokeUserDelegationKeysOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/revokeUserDelegationKeys",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.accountName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var beginCreateOperationSpec = {
    httpMethod: "PUT",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.accountName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "parameters",
        mapper: tslib_1.__assign({}, Mappers.StorageAccountCreateParameters, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.StorageAccount
        },
        202: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var beginFailoverOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/failover",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.accountName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {},
        202: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
//# sourceMappingURL=storageAccounts.js.map