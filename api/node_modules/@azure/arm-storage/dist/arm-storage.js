/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@azure/ms-rest-azure-js'), require('@azure/ms-rest-js')) :
    typeof define === 'function' && define.amd ? define(['exports', '@azure/ms-rest-azure-js', '@azure/ms-rest-js'], factory) :
    (factory((global.Azure = global.Azure || {}, global.Azure.ArmStorage = {}),global.msRestAzure,global.msRest));
}(this, (function (exports,msRestAzure,msRest) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var index = /*#__PURE__*/Object.freeze({

    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */
    var CloudError = msRestAzure.CloudErrorMapper;
    var BaseResource = msRestAzure.BaseResourceMapper;
    var OperationDisplay = {
        serializedName: "Operation_display",
        type: {
            name: "Composite",
            className: "OperationDisplay",
            modelProperties: {
                provider: {
                    serializedName: "provider",
                    type: {
                        name: "String"
                    }
                },
                resource: {
                    serializedName: "resource",
                    type: {
                        name: "String"
                    }
                },
                operation: {
                    serializedName: "operation",
                    type: {
                        name: "String"
                    }
                },
                description: {
                    serializedName: "description",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Dimension = {
        serializedName: "Dimension",
        type: {
            name: "Composite",
            className: "Dimension",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                displayName: {
                    serializedName: "displayName",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var MetricSpecification = {
        serializedName: "MetricSpecification",
        type: {
            name: "Composite",
            className: "MetricSpecification",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                displayName: {
                    serializedName: "displayName",
                    type: {
                        name: "String"
                    }
                },
                displayDescription: {
                    serializedName: "displayDescription",
                    type: {
                        name: "String"
                    }
                },
                unit: {
                    serializedName: "unit",
                    type: {
                        name: "String"
                    }
                },
                dimensions: {
                    serializedName: "dimensions",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Dimension"
                            }
                        }
                    }
                },
                aggregationType: {
                    serializedName: "aggregationType",
                    type: {
                        name: "String"
                    }
                },
                fillGapWithZero: {
                    serializedName: "fillGapWithZero",
                    type: {
                        name: "Boolean"
                    }
                },
                category: {
                    serializedName: "category",
                    type: {
                        name: "String"
                    }
                },
                resourceIdDimensionNameOverride: {
                    serializedName: "resourceIdDimensionNameOverride",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ServiceSpecification = {
        serializedName: "ServiceSpecification",
        type: {
            name: "Composite",
            className: "ServiceSpecification",
            modelProperties: {
                metricSpecifications: {
                    serializedName: "metricSpecifications",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "MetricSpecification"
                            }
                        }
                    }
                }
            }
        }
    };
    var Operation = {
        serializedName: "Operation",
        type: {
            name: "Composite",
            className: "Operation",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                display: {
                    serializedName: "display",
                    type: {
                        name: "Composite",
                        className: "OperationDisplay"
                    }
                },
                origin: {
                    serializedName: "origin",
                    type: {
                        name: "String"
                    }
                },
                serviceSpecification: {
                    serializedName: "properties.serviceSpecification",
                    type: {
                        name: "Composite",
                        className: "ServiceSpecification"
                    }
                }
            }
        }
    };
    var StorageAccountCheckNameAvailabilityParameters = {
        serializedName: "StorageAccountCheckNameAvailabilityParameters",
        type: {
            name: "Composite",
            className: "StorageAccountCheckNameAvailabilityParameters",
            modelProperties: {
                name: {
                    required: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    required: true,
                    isConstant: true,
                    serializedName: "type",
                    defaultValue: 'Microsoft.Storage/storageAccounts',
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var SKUCapability = {
        serializedName: "SKUCapability",
        type: {
            name: "Composite",
            className: "SKUCapability",
            modelProperties: {
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                value: {
                    readOnly: true,
                    serializedName: "value",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Restriction = {
        serializedName: "Restriction",
        type: {
            name: "Composite",
            className: "Restriction",
            modelProperties: {
                type: {
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                values: {
                    readOnly: true,
                    serializedName: "values",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                reasonCode: {
                    serializedName: "reasonCode",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Sku = {
        serializedName: "Sku",
        type: {
            name: "Composite",
            className: "Sku",
            modelProperties: {
                name: {
                    required: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                tier: {
                    readOnly: true,
                    serializedName: "tier",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Standard",
                            "Premium"
                        ]
                    }
                },
                resourceType: {
                    readOnly: true,
                    serializedName: "resourceType",
                    type: {
                        name: "String"
                    }
                },
                kind: {
                    readOnly: true,
                    serializedName: "kind",
                    type: {
                        name: "String"
                    }
                },
                locations: {
                    readOnly: true,
                    serializedName: "locations",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                capabilities: {
                    readOnly: true,
                    serializedName: "capabilities",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "SKUCapability"
                            }
                        }
                    }
                },
                restrictions: {
                    serializedName: "restrictions",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Restriction"
                            }
                        }
                    }
                }
            }
        }
    };
    var CheckNameAvailabilityResult = {
        serializedName: "CheckNameAvailabilityResult",
        type: {
            name: "Composite",
            className: "CheckNameAvailabilityResult",
            modelProperties: {
                nameAvailable: {
                    readOnly: true,
                    serializedName: "nameAvailable",
                    type: {
                        name: "Boolean"
                    }
                },
                reason: {
                    readOnly: true,
                    serializedName: "reason",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "AccountNameInvalid",
                            "AlreadyExists"
                        ]
                    }
                },
                message: {
                    readOnly: true,
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var CustomDomain = {
        serializedName: "CustomDomain",
        type: {
            name: "Composite",
            className: "CustomDomain",
            modelProperties: {
                name: {
                    required: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                useSubDomainName: {
                    serializedName: "useSubDomainName",
                    type: {
                        name: "Boolean"
                    }
                }
            }
        }
    };
    var EncryptionService = {
        serializedName: "EncryptionService",
        type: {
            name: "Composite",
            className: "EncryptionService",
            modelProperties: {
                enabled: {
                    serializedName: "enabled",
                    type: {
                        name: "Boolean"
                    }
                },
                lastEnabledTime: {
                    readOnly: true,
                    serializedName: "lastEnabledTime",
                    type: {
                        name: "DateTime"
                    }
                }
            }
        }
    };
    var EncryptionServices = {
        serializedName: "EncryptionServices",
        type: {
            name: "Composite",
            className: "EncryptionServices",
            modelProperties: {
                blob: {
                    serializedName: "blob",
                    type: {
                        name: "Composite",
                        className: "EncryptionService"
                    }
                },
                file: {
                    serializedName: "file",
                    type: {
                        name: "Composite",
                        className: "EncryptionService"
                    }
                },
                table: {
                    readOnly: true,
                    serializedName: "table",
                    type: {
                        name: "Composite",
                        className: "EncryptionService"
                    }
                },
                queue: {
                    readOnly: true,
                    serializedName: "queue",
                    type: {
                        name: "Composite",
                        className: "EncryptionService"
                    }
                }
            }
        }
    };
    var KeyVaultProperties = {
        serializedName: "KeyVaultProperties",
        type: {
            name: "Composite",
            className: "KeyVaultProperties",
            modelProperties: {
                keyName: {
                    serializedName: "keyname",
                    type: {
                        name: "String"
                    }
                },
                keyVersion: {
                    serializedName: "keyversion",
                    type: {
                        name: "String"
                    }
                },
                keyVaultUri: {
                    serializedName: "keyvaulturi",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Encryption = {
        serializedName: "Encryption",
        type: {
            name: "Composite",
            className: "Encryption",
            modelProperties: {
                services: {
                    serializedName: "services",
                    type: {
                        name: "Composite",
                        className: "EncryptionServices"
                    }
                },
                keySource: {
                    required: true,
                    serializedName: "keySource",
                    defaultValue: 'Microsoft.Storage',
                    type: {
                        name: "String"
                    }
                },
                keyVaultProperties: {
                    serializedName: "keyvaultproperties",
                    type: {
                        name: "Composite",
                        className: "KeyVaultProperties"
                    }
                }
            }
        }
    };
    var VirtualNetworkRule = {
        serializedName: "VirtualNetworkRule",
        type: {
            name: "Composite",
            className: "VirtualNetworkRule",
            modelProperties: {
                virtualNetworkResourceId: {
                    required: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                action: {
                    serializedName: "action",
                    defaultValue: 'Allow',
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Allow"
                        ]
                    }
                },
                state: {
                    serializedName: "state",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "provisioning",
                            "deprovisioning",
                            "succeeded",
                            "failed",
                            "networkSourceDeleted"
                        ]
                    }
                }
            }
        }
    };
    var IPRule = {
        serializedName: "IPRule",
        type: {
            name: "Composite",
            className: "IPRule",
            modelProperties: {
                iPAddressOrRange: {
                    required: true,
                    serializedName: "value",
                    type: {
                        name: "String"
                    }
                },
                action: {
                    serializedName: "action",
                    defaultValue: 'Allow',
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Allow"
                        ]
                    }
                }
            }
        }
    };
    var NetworkRuleSet = {
        serializedName: "NetworkRuleSet",
        type: {
            name: "Composite",
            className: "NetworkRuleSet",
            modelProperties: {
                bypass: {
                    serializedName: "bypass",
                    defaultValue: 'AzureServices',
                    type: {
                        name: "String"
                    }
                },
                virtualNetworkRules: {
                    serializedName: "virtualNetworkRules",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "VirtualNetworkRule"
                            }
                        }
                    }
                },
                ipRules: {
                    serializedName: "ipRules",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "IPRule"
                            }
                        }
                    }
                },
                defaultAction: {
                    required: true,
                    serializedName: "defaultAction",
                    defaultValue: 'Allow',
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Allow",
                            "Deny"
                        ]
                    }
                }
            }
        }
    };
    var AzureFilesIdentityBasedAuthentication = {
        serializedName: "AzureFilesIdentityBasedAuthentication",
        type: {
            name: "Composite",
            className: "AzureFilesIdentityBasedAuthentication",
            modelProperties: {
                directoryServiceOptions: {
                    required: true,
                    serializedName: "directoryServiceOptions",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Identity = {
        serializedName: "Identity",
        type: {
            name: "Composite",
            className: "Identity",
            modelProperties: {
                principalId: {
                    readOnly: true,
                    serializedName: "principalId",
                    type: {
                        name: "String"
                    }
                },
                tenantId: {
                    readOnly: true,
                    serializedName: "tenantId",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    required: true,
                    isConstant: true,
                    serializedName: "type",
                    defaultValue: 'SystemAssigned',
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var StorageAccountCreateParameters = {
        serializedName: "StorageAccountCreateParameters",
        type: {
            name: "Composite",
            className: "StorageAccountCreateParameters",
            modelProperties: {
                sku: {
                    required: true,
                    serializedName: "sku",
                    type: {
                        name: "Composite",
                        className: "Sku"
                    }
                },
                kind: {
                    required: true,
                    serializedName: "kind",
                    type: {
                        name: "String"
                    }
                },
                location: {
                    required: true,
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                },
                tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                identity: {
                    serializedName: "identity",
                    type: {
                        name: "Composite",
                        className: "Identity"
                    }
                },
                customDomain: {
                    serializedName: "properties.customDomain",
                    type: {
                        name: "Composite",
                        className: "CustomDomain"
                    }
                },
                encryption: {
                    serializedName: "properties.encryption",
                    type: {
                        name: "Composite",
                        className: "Encryption"
                    }
                },
                networkRuleSet: {
                    serializedName: "properties.networkAcls",
                    type: {
                        name: "Composite",
                        className: "NetworkRuleSet"
                    }
                },
                accessTier: {
                    serializedName: "properties.accessTier",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Hot",
                            "Cool"
                        ]
                    }
                },
                azureFilesIdentityBasedAuthentication: {
                    serializedName: "properties.azureFilesIdentityBasedAuthentication",
                    type: {
                        name: "Composite",
                        className: "AzureFilesIdentityBasedAuthentication"
                    }
                },
                enableHttpsTrafficOnly: {
                    serializedName: "properties.supportsHttpsTrafficOnly",
                    type: {
                        name: "Boolean"
                    }
                },
                isHnsEnabled: {
                    serializedName: "properties.isHnsEnabled",
                    type: {
                        name: "Boolean"
                    }
                }
            }
        }
    };
    var Endpoints = {
        serializedName: "Endpoints",
        type: {
            name: "Composite",
            className: "Endpoints",
            modelProperties: {
                blob: {
                    readOnly: true,
                    serializedName: "blob",
                    type: {
                        name: "String"
                    }
                },
                queue: {
                    readOnly: true,
                    serializedName: "queue",
                    type: {
                        name: "String"
                    }
                },
                table: {
                    readOnly: true,
                    serializedName: "table",
                    type: {
                        name: "String"
                    }
                },
                file: {
                    readOnly: true,
                    serializedName: "file",
                    type: {
                        name: "String"
                    }
                },
                web: {
                    readOnly: true,
                    serializedName: "web",
                    type: {
                        name: "String"
                    }
                },
                dfs: {
                    readOnly: true,
                    serializedName: "dfs",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var GeoReplicationStats = {
        serializedName: "GeoReplicationStats",
        type: {
            name: "Composite",
            className: "GeoReplicationStats",
            modelProperties: {
                status: {
                    readOnly: true,
                    serializedName: "status",
                    type: {
                        name: "String"
                    }
                },
                lastSyncTime: {
                    readOnly: true,
                    serializedName: "lastSyncTime",
                    type: {
                        name: "DateTime"
                    }
                },
                canFailover: {
                    readOnly: true,
                    serializedName: "canFailover",
                    type: {
                        name: "Boolean"
                    }
                }
            }
        }
    };
    var Resource = {
        serializedName: "Resource",
        type: {
            name: "Composite",
            className: "Resource",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var TrackedResource = {
        serializedName: "TrackedResource",
        type: {
            name: "Composite",
            className: "TrackedResource",
            modelProperties: __assign({}, Resource.type.modelProperties, { tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, location: {
                    required: true,
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var StorageAccount = {
        serializedName: "StorageAccount",
        type: {
            name: "Composite",
            className: "StorageAccount",
            modelProperties: __assign({}, TrackedResource.type.modelProperties, { sku: {
                    readOnly: true,
                    serializedName: "sku",
                    type: {
                        name: "Composite",
                        className: "Sku"
                    }
                }, kind: {
                    readOnly: true,
                    serializedName: "kind",
                    type: {
                        name: "String"
                    }
                }, identity: {
                    serializedName: "identity",
                    type: {
                        name: "Composite",
                        className: "Identity"
                    }
                }, provisioningState: {
                    readOnly: true,
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Creating",
                            "ResolvingDNS",
                            "Succeeded"
                        ]
                    }
                }, primaryEndpoints: {
                    readOnly: true,
                    serializedName: "properties.primaryEndpoints",
                    type: {
                        name: "Composite",
                        className: "Endpoints"
                    }
                }, primaryLocation: {
                    readOnly: true,
                    serializedName: "properties.primaryLocation",
                    type: {
                        name: "String"
                    }
                }, statusOfPrimary: {
                    readOnly: true,
                    serializedName: "properties.statusOfPrimary",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "available",
                            "unavailable"
                        ]
                    }
                }, lastGeoFailoverTime: {
                    readOnly: true,
                    serializedName: "properties.lastGeoFailoverTime",
                    type: {
                        name: "DateTime"
                    }
                }, secondaryLocation: {
                    readOnly: true,
                    serializedName: "properties.secondaryLocation",
                    type: {
                        name: "String"
                    }
                }, statusOfSecondary: {
                    readOnly: true,
                    serializedName: "properties.statusOfSecondary",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "available",
                            "unavailable"
                        ]
                    }
                }, creationTime: {
                    readOnly: true,
                    serializedName: "properties.creationTime",
                    type: {
                        name: "DateTime"
                    }
                }, customDomain: {
                    readOnly: true,
                    serializedName: "properties.customDomain",
                    type: {
                        name: "Composite",
                        className: "CustomDomain"
                    }
                }, secondaryEndpoints: {
                    readOnly: true,
                    serializedName: "properties.secondaryEndpoints",
                    type: {
                        name: "Composite",
                        className: "Endpoints"
                    }
                }, encryption: {
                    readOnly: true,
                    serializedName: "properties.encryption",
                    type: {
                        name: "Composite",
                        className: "Encryption"
                    }
                }, accessTier: {
                    readOnly: true,
                    serializedName: "properties.accessTier",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Hot",
                            "Cool"
                        ]
                    }
                }, azureFilesIdentityBasedAuthentication: {
                    serializedName: "properties.azureFilesIdentityBasedAuthentication",
                    type: {
                        name: "Composite",
                        className: "AzureFilesIdentityBasedAuthentication"
                    }
                }, enableHttpsTrafficOnly: {
                    serializedName: "properties.supportsHttpsTrafficOnly",
                    type: {
                        name: "Boolean"
                    }
                }, networkRuleSet: {
                    readOnly: true,
                    serializedName: "properties.networkAcls",
                    type: {
                        name: "Composite",
                        className: "NetworkRuleSet"
                    }
                }, isHnsEnabled: {
                    serializedName: "properties.isHnsEnabled",
                    type: {
                        name: "Boolean"
                    }
                }, geoReplicationStats: {
                    readOnly: true,
                    serializedName: "properties.geoReplicationStats",
                    type: {
                        name: "Composite",
                        className: "GeoReplicationStats"
                    }
                }, failoverInProgress: {
                    readOnly: true,
                    serializedName: "properties.failoverInProgress",
                    type: {
                        name: "Boolean"
                    }
                } })
        }
    };
    var StorageAccountKey = {
        serializedName: "StorageAccountKey",
        type: {
            name: "Composite",
            className: "StorageAccountKey",
            modelProperties: {
                keyName: {
                    readOnly: true,
                    serializedName: "keyName",
                    type: {
                        name: "String"
                    }
                },
                value: {
                    readOnly: true,
                    serializedName: "value",
                    type: {
                        name: "String"
                    }
                },
                permissions: {
                    readOnly: true,
                    serializedName: "permissions",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Read",
                            "Full"
                        ]
                    }
                }
            }
        }
    };
    var StorageAccountListKeysResult = {
        serializedName: "StorageAccountListKeysResult",
        type: {
            name: "Composite",
            className: "StorageAccountListKeysResult",
            modelProperties: {
                keys: {
                    readOnly: true,
                    serializedName: "keys",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "StorageAccountKey"
                            }
                        }
                    }
                }
            }
        }
    };
    var StorageAccountRegenerateKeyParameters = {
        serializedName: "StorageAccountRegenerateKeyParameters",
        type: {
            name: "Composite",
            className: "StorageAccountRegenerateKeyParameters",
            modelProperties: {
                keyName: {
                    required: true,
                    serializedName: "keyName",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var StorageAccountUpdateParameters = {
        serializedName: "StorageAccountUpdateParameters",
        type: {
            name: "Composite",
            className: "StorageAccountUpdateParameters",
            modelProperties: {
                sku: {
                    serializedName: "sku",
                    type: {
                        name: "Composite",
                        className: "Sku"
                    }
                },
                tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                identity: {
                    serializedName: "identity",
                    type: {
                        name: "Composite",
                        className: "Identity"
                    }
                },
                customDomain: {
                    serializedName: "properties.customDomain",
                    type: {
                        name: "Composite",
                        className: "CustomDomain"
                    }
                },
                encryption: {
                    serializedName: "properties.encryption",
                    type: {
                        name: "Composite",
                        className: "Encryption"
                    }
                },
                accessTier: {
                    serializedName: "properties.accessTier",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Hot",
                            "Cool"
                        ]
                    }
                },
                azureFilesIdentityBasedAuthentication: {
                    serializedName: "properties.azureFilesIdentityBasedAuthentication",
                    type: {
                        name: "Composite",
                        className: "AzureFilesIdentityBasedAuthentication"
                    }
                },
                enableHttpsTrafficOnly: {
                    serializedName: "properties.supportsHttpsTrafficOnly",
                    type: {
                        name: "Boolean"
                    }
                },
                networkRuleSet: {
                    serializedName: "properties.networkAcls",
                    type: {
                        name: "Composite",
                        className: "NetworkRuleSet"
                    }
                },
                kind: {
                    serializedName: "kind",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var UsageName = {
        serializedName: "UsageName",
        type: {
            name: "Composite",
            className: "UsageName",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "value",
                    type: {
                        name: "String"
                    }
                },
                localizedValue: {
                    readOnly: true,
                    serializedName: "localizedValue",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Usage = {
        serializedName: "Usage",
        type: {
            name: "Composite",
            className: "Usage",
            modelProperties: {
                unit: {
                    readOnly: true,
                    serializedName: "unit",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Count",
                            "Bytes",
                            "Seconds",
                            "Percent",
                            "CountsPerSecond",
                            "BytesPerSecond"
                        ]
                    }
                },
                currentValue: {
                    readOnly: true,
                    serializedName: "currentValue",
                    type: {
                        name: "Number"
                    }
                },
                limit: {
                    readOnly: true,
                    serializedName: "limit",
                    type: {
                        name: "Number"
                    }
                },
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "Composite",
                        className: "UsageName"
                    }
                }
            }
        }
    };
    var AccountSasParameters = {
        serializedName: "AccountSasParameters",
        type: {
            name: "Composite",
            className: "AccountSasParameters",
            modelProperties: {
                services: {
                    required: true,
                    serializedName: "signedServices",
                    type: {
                        name: "String"
                    }
                },
                resourceTypes: {
                    required: true,
                    serializedName: "signedResourceTypes",
                    type: {
                        name: "String"
                    }
                },
                permissions: {
                    required: true,
                    serializedName: "signedPermission",
                    type: {
                        name: "String"
                    }
                },
                iPAddressOrRange: {
                    serializedName: "signedIp",
                    type: {
                        name: "String"
                    }
                },
                protocols: {
                    serializedName: "signedProtocol",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "https,http",
                            "https"
                        ]
                    }
                },
                sharedAccessStartTime: {
                    serializedName: "signedStart",
                    type: {
                        name: "DateTime"
                    }
                },
                sharedAccessExpiryTime: {
                    required: true,
                    serializedName: "signedExpiry",
                    type: {
                        name: "DateTime"
                    }
                },
                keyToSign: {
                    serializedName: "keyToSign",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ListAccountSasResponse = {
        serializedName: "ListAccountSasResponse",
        type: {
            name: "Composite",
            className: "ListAccountSasResponse",
            modelProperties: {
                accountSasToken: {
                    readOnly: true,
                    serializedName: "accountSasToken",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ServiceSasParameters = {
        serializedName: "ServiceSasParameters",
        type: {
            name: "Composite",
            className: "ServiceSasParameters",
            modelProperties: {
                canonicalizedResource: {
                    required: true,
                    serializedName: "canonicalizedResource",
                    type: {
                        name: "String"
                    }
                },
                resource: {
                    serializedName: "signedResource",
                    type: {
                        name: "String"
                    }
                },
                permissions: {
                    serializedName: "signedPermission",
                    type: {
                        name: "String"
                    }
                },
                iPAddressOrRange: {
                    serializedName: "signedIp",
                    type: {
                        name: "String"
                    }
                },
                protocols: {
                    serializedName: "signedProtocol",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "https,http",
                            "https"
                        ]
                    }
                },
                sharedAccessStartTime: {
                    serializedName: "signedStart",
                    type: {
                        name: "DateTime"
                    }
                },
                sharedAccessExpiryTime: {
                    serializedName: "signedExpiry",
                    type: {
                        name: "DateTime"
                    }
                },
                identifier: {
                    serializedName: "signedIdentifier",
                    constraints: {
                        MaxLength: 64
                    },
                    type: {
                        name: "String"
                    }
                },
                partitionKeyStart: {
                    serializedName: "startPk",
                    type: {
                        name: "String"
                    }
                },
                partitionKeyEnd: {
                    serializedName: "endPk",
                    type: {
                        name: "String"
                    }
                },
                rowKeyStart: {
                    serializedName: "startRk",
                    type: {
                        name: "String"
                    }
                },
                rowKeyEnd: {
                    serializedName: "endRk",
                    type: {
                        name: "String"
                    }
                },
                keyToSign: {
                    serializedName: "keyToSign",
                    type: {
                        name: "String"
                    }
                },
                cacheControl: {
                    serializedName: "rscc",
                    type: {
                        name: "String"
                    }
                },
                contentDisposition: {
                    serializedName: "rscd",
                    type: {
                        name: "String"
                    }
                },
                contentEncoding: {
                    serializedName: "rsce",
                    type: {
                        name: "String"
                    }
                },
                contentLanguage: {
                    serializedName: "rscl",
                    type: {
                        name: "String"
                    }
                },
                contentType: {
                    serializedName: "rsct",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ListServiceSasResponse = {
        serializedName: "ListServiceSasResponse",
        type: {
            name: "Composite",
            className: "ListServiceSasResponse",
            modelProperties: {
                serviceSasToken: {
                    readOnly: true,
                    serializedName: "serviceSasToken",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var DateAfterModification = {
        serializedName: "DateAfterModification",
        type: {
            name: "Composite",
            className: "DateAfterModification",
            modelProperties: {
                daysAfterModificationGreaterThan: {
                    required: true,
                    serializedName: "daysAfterModificationGreaterThan",
                    constraints: {
                        InclusiveMinimum: 0
                    },
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var ManagementPolicyBaseBlob = {
        serializedName: "ManagementPolicyBaseBlob",
        type: {
            name: "Composite",
            className: "ManagementPolicyBaseBlob",
            modelProperties: {
                tierToCool: {
                    serializedName: "tierToCool",
                    type: {
                        name: "Composite",
                        className: "DateAfterModification"
                    }
                },
                tierToArchive: {
                    serializedName: "tierToArchive",
                    type: {
                        name: "Composite",
                        className: "DateAfterModification"
                    }
                },
                deleteProperty: {
                    serializedName: "delete",
                    type: {
                        name: "Composite",
                        className: "DateAfterModification"
                    }
                }
            }
        }
    };
    var DateAfterCreation = {
        serializedName: "DateAfterCreation",
        type: {
            name: "Composite",
            className: "DateAfterCreation",
            modelProperties: {
                daysAfterCreationGreaterThan: {
                    required: true,
                    serializedName: "daysAfterCreationGreaterThan",
                    constraints: {
                        InclusiveMinimum: 0
                    },
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var ManagementPolicySnapShot = {
        serializedName: "ManagementPolicySnapShot",
        type: {
            name: "Composite",
            className: "ManagementPolicySnapShot",
            modelProperties: {
                deleteProperty: {
                    serializedName: "delete",
                    type: {
                        name: "Composite",
                        className: "DateAfterCreation"
                    }
                }
            }
        }
    };
    var ManagementPolicyAction = {
        serializedName: "ManagementPolicyAction",
        type: {
            name: "Composite",
            className: "ManagementPolicyAction",
            modelProperties: {
                baseBlob: {
                    serializedName: "baseBlob",
                    type: {
                        name: "Composite",
                        className: "ManagementPolicyBaseBlob"
                    }
                },
                snapshot: {
                    serializedName: "snapshot",
                    type: {
                        name: "Composite",
                        className: "ManagementPolicySnapShot"
                    }
                }
            }
        }
    };
    var ManagementPolicyFilter = {
        serializedName: "ManagementPolicyFilter",
        type: {
            name: "Composite",
            className: "ManagementPolicyFilter",
            modelProperties: {
                prefixMatch: {
                    serializedName: "prefixMatch",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                blobTypes: {
                    required: true,
                    serializedName: "blobTypes",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var ManagementPolicyDefinition = {
        serializedName: "ManagementPolicyDefinition",
        type: {
            name: "Composite",
            className: "ManagementPolicyDefinition",
            modelProperties: {
                actions: {
                    required: true,
                    serializedName: "actions",
                    type: {
                        name: "Composite",
                        className: "ManagementPolicyAction"
                    }
                },
                filters: {
                    serializedName: "filters",
                    type: {
                        name: "Composite",
                        className: "ManagementPolicyFilter"
                    }
                }
            }
        }
    };
    var ManagementPolicyRule = {
        serializedName: "ManagementPolicyRule",
        type: {
            name: "Composite",
            className: "ManagementPolicyRule",
            modelProperties: {
                enabled: {
                    serializedName: "enabled",
                    type: {
                        name: "Boolean"
                    }
                },
                name: {
                    required: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    required: true,
                    isConstant: true,
                    serializedName: "type",
                    defaultValue: 'Lifecycle',
                    type: {
                        name: "String"
                    }
                },
                definition: {
                    required: true,
                    serializedName: "definition",
                    type: {
                        name: "Composite",
                        className: "ManagementPolicyDefinition"
                    }
                }
            }
        }
    };
    var ManagementPolicySchema = {
        serializedName: "ManagementPolicySchema",
        type: {
            name: "Composite",
            className: "ManagementPolicySchema",
            modelProperties: {
                rules: {
                    required: true,
                    serializedName: "rules",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ManagementPolicyRule"
                            }
                        }
                    }
                }
            }
        }
    };
    var ManagementPolicy = {
        serializedName: "ManagementPolicy",
        type: {
            name: "Composite",
            className: "ManagementPolicy",
            modelProperties: __assign({}, Resource.type.modelProperties, { lastModifiedTime: {
                    readOnly: true,
                    serializedName: "properties.lastModifiedTime",
                    type: {
                        name: "DateTime"
                    }
                }, policy: {
                    required: true,
                    serializedName: "properties.policy",
                    type: {
                        name: "Composite",
                        className: "ManagementPolicySchema"
                    }
                } })
        }
    };
    var ProxyResource = {
        serializedName: "ProxyResource",
        type: {
            name: "Composite",
            className: "ProxyResource",
            modelProperties: __assign({}, Resource.type.modelProperties)
        }
    };
    var AzureEntityResource = {
        serializedName: "AzureEntityResource",
        type: {
            name: "Composite",
            className: "AzureEntityResource",
            modelProperties: __assign({}, Resource.type.modelProperties, { etag: {
                    readOnly: true,
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var UpdateHistoryProperty = {
        serializedName: "UpdateHistoryProperty",
        type: {
            name: "Composite",
            className: "UpdateHistoryProperty",
            modelProperties: {
                update: {
                    readOnly: true,
                    serializedName: "update",
                    type: {
                        name: "String"
                    }
                },
                immutabilityPeriodSinceCreationInDays: {
                    readOnly: true,
                    serializedName: "immutabilityPeriodSinceCreationInDays",
                    type: {
                        name: "Number"
                    }
                },
                timestamp: {
                    readOnly: true,
                    serializedName: "timestamp",
                    type: {
                        name: "DateTime"
                    }
                },
                objectIdentifier: {
                    readOnly: true,
                    serializedName: "objectIdentifier",
                    type: {
                        name: "String"
                    }
                },
                tenantId: {
                    readOnly: true,
                    serializedName: "tenantId",
                    type: {
                        name: "String"
                    }
                },
                upn: {
                    readOnly: true,
                    serializedName: "upn",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ImmutabilityPolicyProperties = {
        serializedName: "ImmutabilityPolicyProperties",
        type: {
            name: "Composite",
            className: "ImmutabilityPolicyProperties",
            modelProperties: {
                immutabilityPeriodSinceCreationInDays: {
                    required: true,
                    serializedName: "properties.immutabilityPeriodSinceCreationInDays",
                    type: {
                        name: "Number"
                    }
                },
                state: {
                    readOnly: true,
                    serializedName: "properties.state",
                    type: {
                        name: "String"
                    }
                },
                etag: {
                    readOnly: true,
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                },
                updateHistory: {
                    readOnly: true,
                    serializedName: "updateHistory",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "UpdateHistoryProperty"
                            }
                        }
                    }
                }
            }
        }
    };
    var TagProperty = {
        serializedName: "TagProperty",
        type: {
            name: "Composite",
            className: "TagProperty",
            modelProperties: {
                tag: {
                    readOnly: true,
                    serializedName: "tag",
                    type: {
                        name: "String"
                    }
                },
                timestamp: {
                    readOnly: true,
                    serializedName: "timestamp",
                    type: {
                        name: "DateTime"
                    }
                },
                objectIdentifier: {
                    readOnly: true,
                    serializedName: "objectIdentifier",
                    type: {
                        name: "String"
                    }
                },
                tenantId: {
                    readOnly: true,
                    serializedName: "tenantId",
                    type: {
                        name: "String"
                    }
                },
                upn: {
                    readOnly: true,
                    serializedName: "upn",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var LegalHoldProperties = {
        serializedName: "LegalHoldProperties",
        type: {
            name: "Composite",
            className: "LegalHoldProperties",
            modelProperties: {
                hasLegalHold: {
                    readOnly: true,
                    serializedName: "hasLegalHold",
                    type: {
                        name: "Boolean"
                    }
                },
                tags: {
                    serializedName: "tags",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "TagProperty"
                            }
                        }
                    }
                }
            }
        }
    };
    var BlobContainer = {
        serializedName: "BlobContainer",
        type: {
            name: "Composite",
            className: "BlobContainer",
            modelProperties: __assign({}, AzureEntityResource.type.modelProperties, { publicAccess: {
                    serializedName: "properties.publicAccess",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Container",
                            "Blob",
                            "None"
                        ]
                    }
                }, lastModifiedTime: {
                    readOnly: true,
                    serializedName: "properties.lastModifiedTime",
                    type: {
                        name: "DateTime"
                    }
                }, leaseStatus: {
                    readOnly: true,
                    serializedName: "properties.leaseStatus",
                    type: {
                        name: "String"
                    }
                }, leaseState: {
                    readOnly: true,
                    serializedName: "properties.leaseState",
                    type: {
                        name: "String"
                    }
                }, leaseDuration: {
                    readOnly: true,
                    serializedName: "properties.leaseDuration",
                    type: {
                        name: "String"
                    }
                }, metadata: {
                    serializedName: "properties.metadata",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, immutabilityPolicy: {
                    readOnly: true,
                    serializedName: "properties.immutabilityPolicy",
                    type: {
                        name: "Composite",
                        className: "ImmutabilityPolicyProperties"
                    }
                }, legalHold: {
                    readOnly: true,
                    serializedName: "properties.legalHold",
                    type: {
                        name: "Composite",
                        className: "LegalHoldProperties"
                    }
                }, hasLegalHold: {
                    readOnly: true,
                    serializedName: "properties.hasLegalHold",
                    type: {
                        name: "Boolean"
                    }
                }, hasImmutabilityPolicy: {
                    readOnly: true,
                    serializedName: "properties.hasImmutabilityPolicy",
                    type: {
                        name: "Boolean"
                    }
                } })
        }
    };
    var ImmutabilityPolicy = {
        serializedName: "ImmutabilityPolicy",
        type: {
            name: "Composite",
            className: "ImmutabilityPolicy",
            modelProperties: __assign({}, AzureEntityResource.type.modelProperties, { immutabilityPeriodSinceCreationInDays: {
                    required: true,
                    serializedName: "properties.immutabilityPeriodSinceCreationInDays",
                    type: {
                        name: "Number"
                    }
                }, state: {
                    readOnly: true,
                    serializedName: "properties.state",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var LegalHold = {
        serializedName: "LegalHold",
        type: {
            name: "Composite",
            className: "LegalHold",
            modelProperties: {
                hasLegalHold: {
                    readOnly: true,
                    serializedName: "hasLegalHold",
                    type: {
                        name: "Boolean"
                    }
                },
                tags: {
                    required: true,
                    serializedName: "tags",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var ListContainerItem = {
        serializedName: "ListContainerItem",
        type: {
            name: "Composite",
            className: "ListContainerItem",
            modelProperties: __assign({}, AzureEntityResource.type.modelProperties, { publicAccess: {
                    serializedName: "properties.publicAccess",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Container",
                            "Blob",
                            "None"
                        ]
                    }
                }, lastModifiedTime: {
                    readOnly: true,
                    serializedName: "properties.lastModifiedTime",
                    type: {
                        name: "DateTime"
                    }
                }, leaseStatus: {
                    readOnly: true,
                    serializedName: "properties.leaseStatus",
                    type: {
                        name: "String"
                    }
                }, leaseState: {
                    readOnly: true,
                    serializedName: "properties.leaseState",
                    type: {
                        name: "String"
                    }
                }, leaseDuration: {
                    readOnly: true,
                    serializedName: "properties.leaseDuration",
                    type: {
                        name: "String"
                    }
                }, metadata: {
                    serializedName: "properties.metadata",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, immutabilityPolicy: {
                    readOnly: true,
                    serializedName: "properties.immutabilityPolicy",
                    type: {
                        name: "Composite",
                        className: "ImmutabilityPolicyProperties"
                    }
                }, legalHold: {
                    readOnly: true,
                    serializedName: "properties.legalHold",
                    type: {
                        name: "Composite",
                        className: "LegalHoldProperties"
                    }
                }, hasLegalHold: {
                    readOnly: true,
                    serializedName: "properties.hasLegalHold",
                    type: {
                        name: "Boolean"
                    }
                }, hasImmutabilityPolicy: {
                    readOnly: true,
                    serializedName: "properties.hasImmutabilityPolicy",
                    type: {
                        name: "Boolean"
                    }
                } })
        }
    };
    var CorsRule = {
        serializedName: "CorsRule",
        type: {
            name: "Composite",
            className: "CorsRule",
            modelProperties: {
                allowedOrigins: {
                    required: true,
                    serializedName: "allowedOrigins",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                allowedMethods: {
                    required: true,
                    serializedName: "allowedMethods",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                maxAgeInSeconds: {
                    required: true,
                    serializedName: "maxAgeInSeconds",
                    type: {
                        name: "Number"
                    }
                },
                exposedHeaders: {
                    required: true,
                    serializedName: "exposedHeaders",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                allowedHeaders: {
                    required: true,
                    serializedName: "allowedHeaders",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var CorsRules = {
        serializedName: "CorsRules",
        type: {
            name: "Composite",
            className: "CorsRules",
            modelProperties: {
                corsRules: {
                    serializedName: "corsRules",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "CorsRule"
                            }
                        }
                    }
                }
            }
        }
    };
    var DeleteRetentionPolicy = {
        serializedName: "DeleteRetentionPolicy",
        type: {
            name: "Composite",
            className: "DeleteRetentionPolicy",
            modelProperties: {
                enabled: {
                    serializedName: "enabled",
                    type: {
                        name: "Boolean"
                    }
                },
                days: {
                    serializedName: "days",
                    constraints: {
                        InclusiveMaximum: 365,
                        InclusiveMinimum: 1
                    },
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var BlobServiceProperties = {
        serializedName: "BlobServiceProperties",
        type: {
            name: "Composite",
            className: "BlobServiceProperties",
            modelProperties: __assign({}, Resource.type.modelProperties, { cors: {
                    serializedName: "properties.cors",
                    type: {
                        name: "Composite",
                        className: "CorsRules"
                    }
                }, defaultServiceVersion: {
                    serializedName: "properties.defaultServiceVersion",
                    type: {
                        name: "String"
                    }
                }, deleteRetentionPolicy: {
                    serializedName: "properties.deleteRetentionPolicy",
                    type: {
                        name: "Composite",
                        className: "DeleteRetentionPolicy"
                    }
                }, automaticSnapshotPolicyEnabled: {
                    serializedName: "properties.automaticSnapshotPolicyEnabled",
                    type: {
                        name: "Boolean"
                    }
                } })
        }
    };
    var LeaseContainerRequest = {
        serializedName: "LeaseContainerRequest",
        type: {
            name: "Composite",
            className: "LeaseContainerRequest",
            modelProperties: {
                action: {
                    required: true,
                    serializedName: "action",
                    type: {
                        name: "String"
                    }
                },
                leaseId: {
                    serializedName: "leaseId",
                    type: {
                        name: "String"
                    }
                },
                breakPeriod: {
                    serializedName: "breakPeriod",
                    type: {
                        name: "Number"
                    }
                },
                leaseDuration: {
                    serializedName: "leaseDuration",
                    type: {
                        name: "Number"
                    }
                },
                proposedLeaseId: {
                    serializedName: "proposedLeaseId",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var LeaseContainerResponse = {
        serializedName: "LeaseContainerResponse",
        type: {
            name: "Composite",
            className: "LeaseContainerResponse",
            modelProperties: {
                leaseId: {
                    serializedName: "leaseId",
                    type: {
                        name: "String"
                    }
                },
                leaseTimeSeconds: {
                    serializedName: "leaseTimeSeconds",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var BlobContainersCreateOrUpdateImmutabilityPolicyHeaders = {
        serializedName: "blobcontainers-createorupdateimmutabilitypolicy-headers",
        type: {
            name: "Composite",
            className: "BlobContainersCreateOrUpdateImmutabilityPolicyHeaders",
            modelProperties: {
                eTag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var BlobContainersGetImmutabilityPolicyHeaders = {
        serializedName: "blobcontainers-getimmutabilitypolicy-headers",
        type: {
            name: "Composite",
            className: "BlobContainersGetImmutabilityPolicyHeaders",
            modelProperties: {
                eTag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var BlobContainersDeleteImmutabilityPolicyHeaders = {
        serializedName: "blobcontainers-deleteimmutabilitypolicy-headers",
        type: {
            name: "Composite",
            className: "BlobContainersDeleteImmutabilityPolicyHeaders",
            modelProperties: {
                eTag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var BlobContainersLockImmutabilityPolicyHeaders = {
        serializedName: "blobcontainers-lockimmutabilitypolicy-headers",
        type: {
            name: "Composite",
            className: "BlobContainersLockImmutabilityPolicyHeaders",
            modelProperties: {
                eTag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var BlobContainersExtendImmutabilityPolicyHeaders = {
        serializedName: "blobcontainers-extendimmutabilitypolicy-headers",
        type: {
            name: "Composite",
            className: "BlobContainersExtendImmutabilityPolicyHeaders",
            modelProperties: {
                eTag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var OperationListResult = {
        serializedName: "OperationListResult",
        type: {
            name: "Composite",
            className: "OperationListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Operation"
                            }
                        }
                    }
                }
            }
        }
    };
    var StorageSkuListResult = {
        serializedName: "StorageSkuListResult",
        type: {
            name: "Composite",
            className: "StorageSkuListResult",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Sku"
                            }
                        }
                    }
                }
            }
        }
    };
    var StorageAccountListResult = {
        serializedName: "StorageAccountListResult",
        type: {
            name: "Composite",
            className: "StorageAccountListResult",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "StorageAccount"
                            }
                        }
                    }
                }
            }
        }
    };
    var UsageListResult = {
        serializedName: "UsageListResult",
        type: {
            name: "Composite",
            className: "UsageListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Usage"
                            }
                        }
                    }
                }
            }
        }
    };
    var ListContainerItems = {
        serializedName: "ListContainerItems",
        type: {
            name: "Composite",
            className: "ListContainerItems",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ListContainerItem"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };

    var mappers = /*#__PURE__*/Object.freeze({
        CloudError: CloudError,
        BaseResource: BaseResource,
        OperationDisplay: OperationDisplay,
        Dimension: Dimension,
        MetricSpecification: MetricSpecification,
        ServiceSpecification: ServiceSpecification,
        Operation: Operation,
        StorageAccountCheckNameAvailabilityParameters: StorageAccountCheckNameAvailabilityParameters,
        SKUCapability: SKUCapability,
        Restriction: Restriction,
        Sku: Sku,
        CheckNameAvailabilityResult: CheckNameAvailabilityResult,
        CustomDomain: CustomDomain,
        EncryptionService: EncryptionService,
        EncryptionServices: EncryptionServices,
        KeyVaultProperties: KeyVaultProperties,
        Encryption: Encryption,
        VirtualNetworkRule: VirtualNetworkRule,
        IPRule: IPRule,
        NetworkRuleSet: NetworkRuleSet,
        AzureFilesIdentityBasedAuthentication: AzureFilesIdentityBasedAuthentication,
        Identity: Identity,
        StorageAccountCreateParameters: StorageAccountCreateParameters,
        Endpoints: Endpoints,
        GeoReplicationStats: GeoReplicationStats,
        Resource: Resource,
        TrackedResource: TrackedResource,
        StorageAccount: StorageAccount,
        StorageAccountKey: StorageAccountKey,
        StorageAccountListKeysResult: StorageAccountListKeysResult,
        StorageAccountRegenerateKeyParameters: StorageAccountRegenerateKeyParameters,
        StorageAccountUpdateParameters: StorageAccountUpdateParameters,
        UsageName: UsageName,
        Usage: Usage,
        AccountSasParameters: AccountSasParameters,
        ListAccountSasResponse: ListAccountSasResponse,
        ServiceSasParameters: ServiceSasParameters,
        ListServiceSasResponse: ListServiceSasResponse,
        DateAfterModification: DateAfterModification,
        ManagementPolicyBaseBlob: ManagementPolicyBaseBlob,
        DateAfterCreation: DateAfterCreation,
        ManagementPolicySnapShot: ManagementPolicySnapShot,
        ManagementPolicyAction: ManagementPolicyAction,
        ManagementPolicyFilter: ManagementPolicyFilter,
        ManagementPolicyDefinition: ManagementPolicyDefinition,
        ManagementPolicyRule: ManagementPolicyRule,
        ManagementPolicySchema: ManagementPolicySchema,
        ManagementPolicy: ManagementPolicy,
        ProxyResource: ProxyResource,
        AzureEntityResource: AzureEntityResource,
        UpdateHistoryProperty: UpdateHistoryProperty,
        ImmutabilityPolicyProperties: ImmutabilityPolicyProperties,
        TagProperty: TagProperty,
        LegalHoldProperties: LegalHoldProperties,
        BlobContainer: BlobContainer,
        ImmutabilityPolicy: ImmutabilityPolicy,
        LegalHold: LegalHold,
        ListContainerItem: ListContainerItem,
        CorsRule: CorsRule,
        CorsRules: CorsRules,
        DeleteRetentionPolicy: DeleteRetentionPolicy,
        BlobServiceProperties: BlobServiceProperties,
        LeaseContainerRequest: LeaseContainerRequest,
        LeaseContainerResponse: LeaseContainerResponse,
        BlobContainersCreateOrUpdateImmutabilityPolicyHeaders: BlobContainersCreateOrUpdateImmutabilityPolicyHeaders,
        BlobContainersGetImmutabilityPolicyHeaders: BlobContainersGetImmutabilityPolicyHeaders,
        BlobContainersDeleteImmutabilityPolicyHeaders: BlobContainersDeleteImmutabilityPolicyHeaders,
        BlobContainersLockImmutabilityPolicyHeaders: BlobContainersLockImmutabilityPolicyHeaders,
        BlobContainersExtendImmutabilityPolicyHeaders: BlobContainersExtendImmutabilityPolicyHeaders,
        OperationListResult: OperationListResult,
        StorageSkuListResult: StorageSkuListResult,
        StorageAccountListResult: StorageAccountListResult,
        UsageListResult: UsageListResult,
        ListContainerItems: ListContainerItems
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers = /*#__PURE__*/Object.freeze({
        CloudError: CloudError,
        Dimension: Dimension,
        MetricSpecification: MetricSpecification,
        Operation: Operation,
        OperationDisplay: OperationDisplay,
        OperationListResult: OperationListResult,
        ServiceSpecification: ServiceSpecification
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var acceptLanguage = {
        parameterPath: "acceptLanguage",
        mapper: {
            serializedName: "accept-language",
            defaultValue: 'en-US',
            type: {
                name: "String"
            }
        }
    };
    var accountName = {
        parameterPath: "accountName",
        mapper: {
            required: true,
            serializedName: "accountName",
            constraints: {
                MaxLength: 24,
                MinLength: 3
            },
            type: {
                name: "String"
            }
        }
    };
    var apiVersion = {
        parameterPath: "apiVersion",
        mapper: {
            required: true,
            serializedName: "api-version",
            constraints: {
                MinLength: 1
            },
            type: {
                name: "String"
            }
        }
    };
    var blobServicesName = {
        parameterPath: "blobServicesName",
        mapper: {
            required: true,
            isConstant: true,
            serializedName: "BlobServicesName",
            defaultValue: 'default',
            type: {
                name: "String"
            }
        }
    };
    var containerName = {
        parameterPath: "containerName",
        mapper: {
            required: true,
            serializedName: "containerName",
            constraints: {
                MaxLength: 63,
                MinLength: 3
            },
            type: {
                name: "String"
            }
        }
    };
    var expand = {
        parameterPath: [
            "options",
            "expand"
        ],
        mapper: {
            serializedName: "$expand",
            type: {
                name: "Enum",
                allowedValues: [
                    "geoReplicationStats"
                ]
            }
        }
    };
    var filter = {
        parameterPath: [
            "options",
            "filter"
        ],
        mapper: {
            serializedName: "$filter",
            type: {
                name: "String"
            }
        }
    };
    var ifMatch0 = {
        parameterPath: [
            "options",
            "ifMatch"
        ],
        mapper: {
            serializedName: "If-Match",
            type: {
                name: "String"
            }
        }
    };
    var ifMatch1 = {
        parameterPath: "ifMatch",
        mapper: {
            required: true,
            serializedName: "If-Match",
            type: {
                name: "String"
            }
        }
    };
    var immutabilityPolicyName = {
        parameterPath: "immutabilityPolicyName",
        mapper: {
            required: true,
            isConstant: true,
            serializedName: "immutabilityPolicyName",
            defaultValue: 'default',
            type: {
                name: "String"
            }
        }
    };
    var location = {
        parameterPath: "location",
        mapper: {
            required: true,
            serializedName: "location",
            type: {
                name: "String"
            }
        }
    };
    var managementPolicyName = {
        parameterPath: "managementPolicyName",
        mapper: {
            required: true,
            isConstant: true,
            serializedName: "managementPolicyName",
            defaultValue: 'default',
            type: {
                name: "String"
            }
        }
    };
    var maxpagesize = {
        parameterPath: [
            "options",
            "maxpagesize"
        ],
        mapper: {
            serializedName: "$maxpagesize",
            type: {
                name: "String"
            }
        }
    };
    var nextPageLink = {
        parameterPath: "nextPageLink",
        mapper: {
            required: true,
            serializedName: "nextLink",
            type: {
                name: "String"
            }
        },
        skipEncoding: true
    };
    var resourceGroupName = {
        parameterPath: "resourceGroupName",
        mapper: {
            required: true,
            serializedName: "resourceGroupName",
            constraints: {
                MaxLength: 90,
                MinLength: 1,
                Pattern: /^[-\w\._\(\)]+$/
            },
            type: {
                name: "String"
            }
        }
    };
    var skipToken = {
        parameterPath: [
            "options",
            "skipToken"
        ],
        mapper: {
            serializedName: "$skipToken",
            type: {
                name: "String"
            }
        }
    };
    var subscriptionId = {
        parameterPath: "subscriptionId",
        mapper: {
            required: true,
            serializedName: "subscriptionId",
            constraints: {
                MinLength: 1
            },
            type: {
                name: "String"
            }
        }
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Operations. */
    var Operations = /** @class */ (function () {
        /**
         * Create a Operations.
         * @param {StorageManagementClientContext} client Reference to the service client.
         */
        function Operations(client) {
            this.client = client;
        }
        Operations.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec, callback);
        };
        return Operations;
    }());
    // Operation Specifications
    var serializer = new msRest.Serializer(Mappers);
    var listOperationSpec = {
        httpMethod: "GET",
        path: "providers/Microsoft.Storage/operations",
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: OperationListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$1 = /*#__PURE__*/Object.freeze({
        CloudError: CloudError,
        Restriction: Restriction,
        Sku: Sku,
        SKUCapability: SKUCapability,
        StorageSkuListResult: StorageSkuListResult
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Skus. */
    var Skus = /** @class */ (function () {
        /**
         * Create a Skus.
         * @param {StorageManagementClientContext} client Reference to the service client.
         */
        function Skus(client) {
            this.client = client;
        }
        Skus.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec$1, callback);
        };
        return Skus;
    }());
    // Operation Specifications
    var serializer$1 = new msRest.Serializer(Mappers$1);
    var listOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Storage/skus",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: StorageSkuListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$2 = /*#__PURE__*/Object.freeze({
        AccountSasParameters: AccountSasParameters,
        AzureEntityResource: AzureEntityResource,
        AzureFilesIdentityBasedAuthentication: AzureFilesIdentityBasedAuthentication,
        BaseResource: BaseResource,
        BlobContainer: BlobContainer,
        BlobServiceProperties: BlobServiceProperties,
        CheckNameAvailabilityResult: CheckNameAvailabilityResult,
        CloudError: CloudError,
        CorsRule: CorsRule,
        CorsRules: CorsRules,
        CustomDomain: CustomDomain,
        DateAfterCreation: DateAfterCreation,
        DateAfterModification: DateAfterModification,
        DeleteRetentionPolicy: DeleteRetentionPolicy,
        Encryption: Encryption,
        EncryptionService: EncryptionService,
        EncryptionServices: EncryptionServices,
        Endpoints: Endpoints,
        GeoReplicationStats: GeoReplicationStats,
        Identity: Identity,
        ImmutabilityPolicy: ImmutabilityPolicy,
        ImmutabilityPolicyProperties: ImmutabilityPolicyProperties,
        IPRule: IPRule,
        KeyVaultProperties: KeyVaultProperties,
        LegalHoldProperties: LegalHoldProperties,
        ListAccountSasResponse: ListAccountSasResponse,
        ListContainerItem: ListContainerItem,
        ListServiceSasResponse: ListServiceSasResponse,
        ManagementPolicy: ManagementPolicy,
        ManagementPolicyAction: ManagementPolicyAction,
        ManagementPolicyBaseBlob: ManagementPolicyBaseBlob,
        ManagementPolicyDefinition: ManagementPolicyDefinition,
        ManagementPolicyFilter: ManagementPolicyFilter,
        ManagementPolicyRule: ManagementPolicyRule,
        ManagementPolicySchema: ManagementPolicySchema,
        ManagementPolicySnapShot: ManagementPolicySnapShot,
        NetworkRuleSet: NetworkRuleSet,
        ProxyResource: ProxyResource,
        Resource: Resource,
        Restriction: Restriction,
        ServiceSasParameters: ServiceSasParameters,
        Sku: Sku,
        SKUCapability: SKUCapability,
        StorageAccount: StorageAccount,
        StorageAccountCheckNameAvailabilityParameters: StorageAccountCheckNameAvailabilityParameters,
        StorageAccountCreateParameters: StorageAccountCreateParameters,
        StorageAccountKey: StorageAccountKey,
        StorageAccountListKeysResult: StorageAccountListKeysResult,
        StorageAccountListResult: StorageAccountListResult,
        StorageAccountRegenerateKeyParameters: StorageAccountRegenerateKeyParameters,
        StorageAccountUpdateParameters: StorageAccountUpdateParameters,
        TagProperty: TagProperty,
        TrackedResource: TrackedResource,
        UpdateHistoryProperty: UpdateHistoryProperty,
        VirtualNetworkRule: VirtualNetworkRule
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a StorageAccounts. */
    var StorageAccounts = /** @class */ (function () {
        /**
         * Create a StorageAccounts.
         * @param {StorageManagementClientContext} client Reference to the service client.
         */
        function StorageAccounts(client) {
            this.client = client;
        }
        StorageAccounts.prototype.checkNameAvailability = function (name, options, callback) {
            return this.client.sendOperationRequest({
                name: name,
                options: options
            }, checkNameAvailabilityOperationSpec, callback);
        };
        /**
         * Asynchronously creates a new storage account with the specified parameters. If an account is
         * already created and a subsequent create request is issued with different properties, the account
         * properties will be updated. If an account is already created and a subsequent create or update
         * request is issued with the exact same set of properties, the request will succeed.
         * @param resourceGroupName The name of the resource group within the user's subscription. The name
         * is case insensitive.
         * @param accountName The name of the storage account within the specified resource group. Storage
         * account names must be between 3 and 24 characters in length and use numbers and lower-case
         * letters only.
         * @param parameters The parameters to provide for the created account.
         * @param [options] The optional parameters
         * @returns Promise<Models.StorageAccountsCreateResponse>
         */
        StorageAccounts.prototype.create = function (resourceGroupName$$1, accountName$$1, parameters, options) {
            return this.beginCreate(resourceGroupName$$1, accountName$$1, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        StorageAccounts.prototype.deleteMethod = function (resourceGroupName$$1, accountName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                accountName: accountName$$1,
                options: options
            }, deleteMethodOperationSpec, callback);
        };
        StorageAccounts.prototype.getProperties = function (resourceGroupName$$1, accountName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                accountName: accountName$$1,
                options: options
            }, getPropertiesOperationSpec, callback);
        };
        StorageAccounts.prototype.update = function (resourceGroupName$$1, accountName$$1, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                accountName: accountName$$1,
                parameters: parameters,
                options: options
            }, updateOperationSpec, callback);
        };
        StorageAccounts.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec$2, callback);
        };
        StorageAccounts.prototype.listByResourceGroup = function (resourceGroupName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                options: options
            }, listByResourceGroupOperationSpec, callback);
        };
        StorageAccounts.prototype.listKeys = function (resourceGroupName$$1, accountName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                accountName: accountName$$1,
                options: options
            }, listKeysOperationSpec, callback);
        };
        StorageAccounts.prototype.regenerateKey = function (resourceGroupName$$1, accountName$$1, keyName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                accountName: accountName$$1,
                keyName: keyName,
                options: options
            }, regenerateKeyOperationSpec, callback);
        };
        StorageAccounts.prototype.listAccountSAS = function (resourceGroupName$$1, accountName$$1, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                accountName: accountName$$1,
                parameters: parameters,
                options: options
            }, listAccountSASOperationSpec, callback);
        };
        StorageAccounts.prototype.listServiceSAS = function (resourceGroupName$$1, accountName$$1, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                accountName: accountName$$1,
                parameters: parameters,
                options: options
            }, listServiceSASOperationSpec, callback);
        };
        /**
         * Failover request can be triggered for a storage account in case of availability issues. The
         * failover occurs from the storage account's primary cluster to secondary cluster for RA-GRS
         * accounts. The secondary cluster will become primary after failover.
         * @param resourceGroupName The name of the resource group within the user's subscription. The name
         * is case insensitive.
         * @param accountName The name of the storage account within the specified resource group. Storage
         * account names must be between 3 and 24 characters in length and use numbers and lower-case
         * letters only.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        StorageAccounts.prototype.failover = function (resourceGroupName$$1, accountName$$1, options) {
            return this.beginFailover(resourceGroupName$$1, accountName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        StorageAccounts.prototype.revokeUserDelegationKeys = function (resourceGroupName$$1, accountName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                accountName: accountName$$1,
                options: options
            }, revokeUserDelegationKeysOperationSpec, callback);
        };
        /**
         * Asynchronously creates a new storage account with the specified parameters. If an account is
         * already created and a subsequent create request is issued with different properties, the account
         * properties will be updated. If an account is already created and a subsequent create or update
         * request is issued with the exact same set of properties, the request will succeed.
         * @param resourceGroupName The name of the resource group within the user's subscription. The name
         * is case insensitive.
         * @param accountName The name of the storage account within the specified resource group. Storage
         * account names must be between 3 and 24 characters in length and use numbers and lower-case
         * letters only.
         * @param parameters The parameters to provide for the created account.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        StorageAccounts.prototype.beginCreate = function (resourceGroupName$$1, accountName$$1, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                accountName: accountName$$1,
                parameters: parameters,
                options: options
            }, beginCreateOperationSpec, options);
        };
        /**
         * Failover request can be triggered for a storage account in case of availability issues. The
         * failover occurs from the storage account's primary cluster to secondary cluster for RA-GRS
         * accounts. The secondary cluster will become primary after failover.
         * @param resourceGroupName The name of the resource group within the user's subscription. The name
         * is case insensitive.
         * @param accountName The name of the storage account within the specified resource group. Storage
         * account names must be between 3 and 24 characters in length and use numbers and lower-case
         * letters only.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        StorageAccounts.prototype.beginFailover = function (resourceGroupName$$1, accountName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                accountName: accountName$$1,
                options: options
            }, beginFailoverOperationSpec, options);
        };
        return StorageAccounts;
    }());
    // Operation Specifications
    var serializer$2 = new msRest.Serializer(Mappers$2);
    var checkNameAvailabilityOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Storage/checkNameAvailability",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: {
                name: "name"
            },
            mapper: __assign({}, StorageAccountCheckNameAvailabilityParameters, { required: true })
        },
        responses: {
            200: {
                bodyMapper: CheckNameAvailabilityResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var deleteMethodOperationSpec = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}",
        urlParameters: [
            resourceGroupName,
            accountName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var getPropertiesOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}",
        urlParameters: [
            resourceGroupName,
            accountName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion,
            expand
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: StorageAccount
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var updateOperationSpec = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}",
        urlParameters: [
            resourceGroupName,
            accountName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, StorageAccountUpdateParameters, { required: true })
        },
        responses: {
            200: {
                bodyMapper: StorageAccount
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var listOperationSpec$2 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Storage/storageAccounts",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: StorageAccountListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var listByResourceGroupOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts",
        urlParameters: [
            resourceGroupName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: StorageAccountListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var listKeysOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/listKeys",
        urlParameters: [
            resourceGroupName,
            accountName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: StorageAccountListKeysResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var regenerateKeyOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/regenerateKey",
        urlParameters: [
            resourceGroupName,
            accountName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: {
                keyName: "keyName"
            },
            mapper: __assign({}, StorageAccountRegenerateKeyParameters, { required: true })
        },
        responses: {
            200: {
                bodyMapper: StorageAccountListKeysResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var listAccountSASOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/ListAccountSas",
        urlParameters: [
            resourceGroupName,
            accountName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, AccountSasParameters, { required: true })
        },
        responses: {
            200: {
                bodyMapper: ListAccountSasResponse
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var listServiceSASOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/ListServiceSas",
        urlParameters: [
            resourceGroupName,
            accountName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, ServiceSasParameters, { required: true })
        },
        responses: {
            200: {
                bodyMapper: ListServiceSasResponse
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var revokeUserDelegationKeysOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/revokeUserDelegationKeys",
        urlParameters: [
            resourceGroupName,
            accountName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var beginCreateOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}",
        urlParameters: [
            resourceGroupName,
            accountName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, StorageAccountCreateParameters, { required: true })
        },
        responses: {
            200: {
                bodyMapper: StorageAccount
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var beginFailoverOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/failover",
        urlParameters: [
            resourceGroupName,
            accountName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$3 = /*#__PURE__*/Object.freeze({
        CloudError: CloudError,
        Usage: Usage,
        UsageListResult: UsageListResult,
        UsageName: UsageName
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Usages. */
    var Usages = /** @class */ (function () {
        /**
         * Create a Usages.
         * @param {StorageManagementClientContext} client Reference to the service client.
         */
        function Usages(client) {
            this.client = client;
        }
        Usages.prototype.listByLocation = function (location$$1, options, callback) {
            return this.client.sendOperationRequest({
                location: location$$1,
                options: options
            }, listByLocationOperationSpec, callback);
        };
        return Usages;
    }());
    // Operation Specifications
    var serializer$3 = new msRest.Serializer(Mappers$3);
    var listByLocationOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Storage/locations/{location}/usages",
        urlParameters: [
            subscriptionId,
            location
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: UsageListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$4 = /*#__PURE__*/Object.freeze({
        AzureEntityResource: AzureEntityResource,
        AzureFilesIdentityBasedAuthentication: AzureFilesIdentityBasedAuthentication,
        BaseResource: BaseResource,
        BlobContainer: BlobContainer,
        BlobServiceProperties: BlobServiceProperties,
        CloudError: CloudError,
        CorsRule: CorsRule,
        CorsRules: CorsRules,
        CustomDomain: CustomDomain,
        DateAfterCreation: DateAfterCreation,
        DateAfterModification: DateAfterModification,
        DeleteRetentionPolicy: DeleteRetentionPolicy,
        Encryption: Encryption,
        EncryptionService: EncryptionService,
        EncryptionServices: EncryptionServices,
        Endpoints: Endpoints,
        GeoReplicationStats: GeoReplicationStats,
        Identity: Identity,
        ImmutabilityPolicy: ImmutabilityPolicy,
        ImmutabilityPolicyProperties: ImmutabilityPolicyProperties,
        IPRule: IPRule,
        KeyVaultProperties: KeyVaultProperties,
        LegalHoldProperties: LegalHoldProperties,
        ListContainerItem: ListContainerItem,
        ManagementPolicy: ManagementPolicy,
        ManagementPolicyAction: ManagementPolicyAction,
        ManagementPolicyBaseBlob: ManagementPolicyBaseBlob,
        ManagementPolicyDefinition: ManagementPolicyDefinition,
        ManagementPolicyFilter: ManagementPolicyFilter,
        ManagementPolicyRule: ManagementPolicyRule,
        ManagementPolicySchema: ManagementPolicySchema,
        ManagementPolicySnapShot: ManagementPolicySnapShot,
        NetworkRuleSet: NetworkRuleSet,
        ProxyResource: ProxyResource,
        Resource: Resource,
        Restriction: Restriction,
        Sku: Sku,
        SKUCapability: SKUCapability,
        StorageAccount: StorageAccount,
        TagProperty: TagProperty,
        TrackedResource: TrackedResource,
        UpdateHistoryProperty: UpdateHistoryProperty,
        VirtualNetworkRule: VirtualNetworkRule
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a ManagementPolicies. */
    var ManagementPolicies = /** @class */ (function () {
        /**
         * Create a ManagementPolicies.
         * @param {StorageManagementClientContext} client Reference to the service client.
         */
        function ManagementPolicies(client) {
            this.client = client;
        }
        ManagementPolicies.prototype.get = function (resourceGroupName$$1, accountName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                accountName: accountName$$1,
                options: options
            }, getOperationSpec, callback);
        };
        ManagementPolicies.prototype.createOrUpdate = function (resourceGroupName$$1, accountName$$1, policy, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                accountName: accountName$$1,
                policy: policy,
                options: options
            }, createOrUpdateOperationSpec, callback);
        };
        ManagementPolicies.prototype.deleteMethod = function (resourceGroupName$$1, accountName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                accountName: accountName$$1,
                options: options
            }, deleteMethodOperationSpec$1, callback);
        };
        return ManagementPolicies;
    }());
    // Operation Specifications
    var serializer$4 = new msRest.Serializer(Mappers$4);
    var getOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/managementPolicies/{managementPolicyName}",
        urlParameters: [
            resourceGroupName,
            accountName,
            subscriptionId,
            managementPolicyName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ManagementPolicy
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$4
    };
    var createOrUpdateOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/managementPolicies/{managementPolicyName}",
        urlParameters: [
            resourceGroupName,
            accountName,
            subscriptionId,
            managementPolicyName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: {
                policy: "policy"
            },
            mapper: __assign({}, ManagementPolicy, { required: true })
        },
        responses: {
            200: {
                bodyMapper: ManagementPolicy
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$4
    };
    var deleteMethodOperationSpec$1 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/managementPolicies/{managementPolicyName}",
        urlParameters: [
            resourceGroupName,
            accountName,
            subscriptionId,
            managementPolicyName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$4
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$5 = /*#__PURE__*/Object.freeze({
        AzureEntityResource: AzureEntityResource,
        AzureFilesIdentityBasedAuthentication: AzureFilesIdentityBasedAuthentication,
        BaseResource: BaseResource,
        BlobContainer: BlobContainer,
        BlobServiceProperties: BlobServiceProperties,
        CloudError: CloudError,
        CorsRule: CorsRule,
        CorsRules: CorsRules,
        CustomDomain: CustomDomain,
        DateAfterCreation: DateAfterCreation,
        DateAfterModification: DateAfterModification,
        DeleteRetentionPolicy: DeleteRetentionPolicy,
        Encryption: Encryption,
        EncryptionService: EncryptionService,
        EncryptionServices: EncryptionServices,
        Endpoints: Endpoints,
        GeoReplicationStats: GeoReplicationStats,
        Identity: Identity,
        ImmutabilityPolicy: ImmutabilityPolicy,
        ImmutabilityPolicyProperties: ImmutabilityPolicyProperties,
        IPRule: IPRule,
        KeyVaultProperties: KeyVaultProperties,
        LegalHoldProperties: LegalHoldProperties,
        ListContainerItem: ListContainerItem,
        ManagementPolicy: ManagementPolicy,
        ManagementPolicyAction: ManagementPolicyAction,
        ManagementPolicyBaseBlob: ManagementPolicyBaseBlob,
        ManagementPolicyDefinition: ManagementPolicyDefinition,
        ManagementPolicyFilter: ManagementPolicyFilter,
        ManagementPolicyRule: ManagementPolicyRule,
        ManagementPolicySchema: ManagementPolicySchema,
        ManagementPolicySnapShot: ManagementPolicySnapShot,
        NetworkRuleSet: NetworkRuleSet,
        ProxyResource: ProxyResource,
        Resource: Resource,
        Restriction: Restriction,
        Sku: Sku,
        SKUCapability: SKUCapability,
        StorageAccount: StorageAccount,
        TagProperty: TagProperty,
        TrackedResource: TrackedResource,
        UpdateHistoryProperty: UpdateHistoryProperty,
        VirtualNetworkRule: VirtualNetworkRule
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a BlobServices. */
    var BlobServices = /** @class */ (function () {
        /**
         * Create a BlobServices.
         * @param {StorageManagementClientContext} client Reference to the service client.
         */
        function BlobServices(client) {
            this.client = client;
        }
        BlobServices.prototype.setServiceProperties = function (resourceGroupName$$1, accountName$$1, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                accountName: accountName$$1,
                parameters: parameters,
                options: options
            }, setServicePropertiesOperationSpec, callback);
        };
        BlobServices.prototype.getServiceProperties = function (resourceGroupName$$1, accountName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                accountName: accountName$$1,
                options: options
            }, getServicePropertiesOperationSpec, callback);
        };
        return BlobServices;
    }());
    // Operation Specifications
    var serializer$5 = new msRest.Serializer(Mappers$5);
    var setServicePropertiesOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/{BlobServicesName}",
        urlParameters: [
            resourceGroupName,
            accountName,
            subscriptionId,
            blobServicesName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, BlobServiceProperties, { required: true })
        },
        responses: {
            200: {
                bodyMapper: BlobServiceProperties
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$5
    };
    var getServicePropertiesOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/{BlobServicesName}",
        urlParameters: [
            resourceGroupName,
            accountName,
            subscriptionId,
            blobServicesName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: BlobServiceProperties
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$5
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$6 = /*#__PURE__*/Object.freeze({
        AzureEntityResource: AzureEntityResource,
        AzureFilesIdentityBasedAuthentication: AzureFilesIdentityBasedAuthentication,
        BaseResource: BaseResource,
        BlobContainer: BlobContainer,
        BlobContainersCreateOrUpdateImmutabilityPolicyHeaders: BlobContainersCreateOrUpdateImmutabilityPolicyHeaders,
        BlobContainersDeleteImmutabilityPolicyHeaders: BlobContainersDeleteImmutabilityPolicyHeaders,
        BlobContainersExtendImmutabilityPolicyHeaders: BlobContainersExtendImmutabilityPolicyHeaders,
        BlobContainersGetImmutabilityPolicyHeaders: BlobContainersGetImmutabilityPolicyHeaders,
        BlobContainersLockImmutabilityPolicyHeaders: BlobContainersLockImmutabilityPolicyHeaders,
        BlobServiceProperties: BlobServiceProperties,
        CloudError: CloudError,
        CorsRule: CorsRule,
        CorsRules: CorsRules,
        CustomDomain: CustomDomain,
        DateAfterCreation: DateAfterCreation,
        DateAfterModification: DateAfterModification,
        DeleteRetentionPolicy: DeleteRetentionPolicy,
        Encryption: Encryption,
        EncryptionService: EncryptionService,
        EncryptionServices: EncryptionServices,
        Endpoints: Endpoints,
        GeoReplicationStats: GeoReplicationStats,
        Identity: Identity,
        ImmutabilityPolicy: ImmutabilityPolicy,
        ImmutabilityPolicyProperties: ImmutabilityPolicyProperties,
        IPRule: IPRule,
        KeyVaultProperties: KeyVaultProperties,
        LeaseContainerRequest: LeaseContainerRequest,
        LeaseContainerResponse: LeaseContainerResponse,
        LegalHold: LegalHold,
        LegalHoldProperties: LegalHoldProperties,
        ListContainerItem: ListContainerItem,
        ListContainerItems: ListContainerItems,
        ManagementPolicy: ManagementPolicy,
        ManagementPolicyAction: ManagementPolicyAction,
        ManagementPolicyBaseBlob: ManagementPolicyBaseBlob,
        ManagementPolicyDefinition: ManagementPolicyDefinition,
        ManagementPolicyFilter: ManagementPolicyFilter,
        ManagementPolicyRule: ManagementPolicyRule,
        ManagementPolicySchema: ManagementPolicySchema,
        ManagementPolicySnapShot: ManagementPolicySnapShot,
        NetworkRuleSet: NetworkRuleSet,
        ProxyResource: ProxyResource,
        Resource: Resource,
        Restriction: Restriction,
        Sku: Sku,
        SKUCapability: SKUCapability,
        StorageAccount: StorageAccount,
        TagProperty: TagProperty,
        TrackedResource: TrackedResource,
        UpdateHistoryProperty: UpdateHistoryProperty,
        VirtualNetworkRule: VirtualNetworkRule
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a BlobContainers. */
    var BlobContainers = /** @class */ (function () {
        /**
         * Create a BlobContainers.
         * @param {StorageManagementClientContext} client Reference to the service client.
         */
        function BlobContainers(client) {
            this.client = client;
        }
        BlobContainers.prototype.list = function (resourceGroupName$$1, accountName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                accountName: accountName$$1,
                options: options
            }, listOperationSpec$3, callback);
        };
        BlobContainers.prototype.create = function (resourceGroupName$$1, accountName$$1, containerName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                accountName: accountName$$1,
                containerName: containerName$$1,
                options: options
            }, createOperationSpec, callback);
        };
        BlobContainers.prototype.update = function (resourceGroupName$$1, accountName$$1, containerName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                accountName: accountName$$1,
                containerName: containerName$$1,
                options: options
            }, updateOperationSpec$1, callback);
        };
        BlobContainers.prototype.get = function (resourceGroupName$$1, accountName$$1, containerName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                accountName: accountName$$1,
                containerName: containerName$$1,
                options: options
            }, getOperationSpec$1, callback);
        };
        BlobContainers.prototype.deleteMethod = function (resourceGroupName$$1, accountName$$1, containerName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                accountName: accountName$$1,
                containerName: containerName$$1,
                options: options
            }, deleteMethodOperationSpec$2, callback);
        };
        BlobContainers.prototype.setLegalHold = function (resourceGroupName$$1, accountName$$1, containerName$$1, tags, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                accountName: accountName$$1,
                containerName: containerName$$1,
                tags: tags,
                options: options
            }, setLegalHoldOperationSpec, callback);
        };
        BlobContainers.prototype.clearLegalHold = function (resourceGroupName$$1, accountName$$1, containerName$$1, tags, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                accountName: accountName$$1,
                containerName: containerName$$1,
                tags: tags,
                options: options
            }, clearLegalHoldOperationSpec, callback);
        };
        BlobContainers.prototype.createOrUpdateImmutabilityPolicy = function (resourceGroupName$$1, accountName$$1, containerName$$1, immutabilityPeriodSinceCreationInDays, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                accountName: accountName$$1,
                containerName: containerName$$1,
                immutabilityPeriodSinceCreationInDays: immutabilityPeriodSinceCreationInDays,
                options: options
            }, createOrUpdateImmutabilityPolicyOperationSpec, callback);
        };
        BlobContainers.prototype.getImmutabilityPolicy = function (resourceGroupName$$1, accountName$$1, containerName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                accountName: accountName$$1,
                containerName: containerName$$1,
                options: options
            }, getImmutabilityPolicyOperationSpec, callback);
        };
        BlobContainers.prototype.deleteImmutabilityPolicy = function (resourceGroupName$$1, accountName$$1, containerName$$1, ifMatch, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                accountName: accountName$$1,
                containerName: containerName$$1,
                ifMatch: ifMatch,
                options: options
            }, deleteImmutabilityPolicyOperationSpec, callback);
        };
        BlobContainers.prototype.lockImmutabilityPolicy = function (resourceGroupName$$1, accountName$$1, containerName$$1, ifMatch, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                accountName: accountName$$1,
                containerName: containerName$$1,
                ifMatch: ifMatch,
                options: options
            }, lockImmutabilityPolicyOperationSpec, callback);
        };
        BlobContainers.prototype.extendImmutabilityPolicy = function (resourceGroupName$$1, accountName$$1, containerName$$1, ifMatch, immutabilityPeriodSinceCreationInDays, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                accountName: accountName$$1,
                containerName: containerName$$1,
                ifMatch: ifMatch,
                immutabilityPeriodSinceCreationInDays: immutabilityPeriodSinceCreationInDays,
                options: options
            }, extendImmutabilityPolicyOperationSpec, callback);
        };
        BlobContainers.prototype.lease = function (resourceGroupName$$1, accountName$$1, containerName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                accountName: accountName$$1,
                containerName: containerName$$1,
                options: options
            }, leaseOperationSpec, callback);
        };
        BlobContainers.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec, callback);
        };
        return BlobContainers;
    }());
    // Operation Specifications
    var serializer$6 = new msRest.Serializer(Mappers$6);
    var listOperationSpec$3 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/default/containers",
        urlParameters: [
            resourceGroupName,
            accountName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion,
            skipToken,
            maxpagesize,
            filter
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ListContainerItems
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$6
    };
    var createOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/default/containers/{containerName}",
        urlParameters: [
            resourceGroupName,
            accountName,
            containerName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: {
                publicAccess: [
                    "options",
                    "publicAccess"
                ],
                metadata: [
                    "options",
                    "metadata"
                ]
            },
            mapper: __assign({}, BlobContainer, { required: true })
        },
        responses: {
            200: {
                bodyMapper: BlobContainer
            },
            201: {
                bodyMapper: BlobContainer
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$6
    };
    var updateOperationSpec$1 = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/default/containers/{containerName}",
        urlParameters: [
            resourceGroupName,
            accountName,
            containerName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: {
                publicAccess: [
                    "options",
                    "publicAccess"
                ],
                metadata: [
                    "options",
                    "metadata"
                ]
            },
            mapper: __assign({}, BlobContainer, { required: true })
        },
        responses: {
            200: {
                bodyMapper: BlobContainer
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$6
    };
    var getOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/default/containers/{containerName}",
        urlParameters: [
            resourceGroupName,
            accountName,
            containerName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: BlobContainer
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$6
    };
    var deleteMethodOperationSpec$2 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/default/containers/{containerName}",
        urlParameters: [
            resourceGroupName,
            accountName,
            containerName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$6
    };
    var setLegalHoldOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/default/containers/{containerName}/setLegalHold",
        urlParameters: [
            resourceGroupName,
            accountName,
            containerName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: {
                tags: "tags"
            },
            mapper: __assign({}, LegalHold, { required: true })
        },
        responses: {
            200: {
                bodyMapper: LegalHold
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$6
    };
    var clearLegalHoldOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/default/containers/{containerName}/clearLegalHold",
        urlParameters: [
            resourceGroupName,
            accountName,
            containerName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: {
                tags: "tags"
            },
            mapper: __assign({}, LegalHold, { required: true })
        },
        responses: {
            200: {
                bodyMapper: LegalHold
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$6
    };
    var createOrUpdateImmutabilityPolicyOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/default/containers/{containerName}/immutabilityPolicies/{immutabilityPolicyName}",
        urlParameters: [
            resourceGroupName,
            accountName,
            containerName,
            immutabilityPolicyName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            ifMatch0,
            acceptLanguage
        ],
        requestBody: {
            parameterPath: {
                immutabilityPeriodSinceCreationInDays: "immutabilityPeriodSinceCreationInDays"
            },
            mapper: ImmutabilityPolicy
        },
        responses: {
            200: {
                bodyMapper: ImmutabilityPolicy,
                headersMapper: BlobContainersCreateOrUpdateImmutabilityPolicyHeaders
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$6
    };
    var getImmutabilityPolicyOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/default/containers/{containerName}/immutabilityPolicies/{immutabilityPolicyName}",
        urlParameters: [
            resourceGroupName,
            accountName,
            containerName,
            immutabilityPolicyName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            ifMatch0,
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ImmutabilityPolicy,
                headersMapper: BlobContainersGetImmutabilityPolicyHeaders
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$6
    };
    var deleteImmutabilityPolicyOperationSpec = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/default/containers/{containerName}/immutabilityPolicies/{immutabilityPolicyName}",
        urlParameters: [
            resourceGroupName,
            accountName,
            containerName,
            immutabilityPolicyName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            ifMatch1,
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ImmutabilityPolicy,
                headersMapper: BlobContainersDeleteImmutabilityPolicyHeaders
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$6
    };
    var lockImmutabilityPolicyOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/default/containers/{containerName}/immutabilityPolicies/default/lock",
        urlParameters: [
            resourceGroupName,
            accountName,
            containerName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            ifMatch1,
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ImmutabilityPolicy,
                headersMapper: BlobContainersLockImmutabilityPolicyHeaders
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$6
    };
    var extendImmutabilityPolicyOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/default/containers/{containerName}/immutabilityPolicies/default/extend",
        urlParameters: [
            resourceGroupName,
            accountName,
            containerName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            ifMatch1,
            acceptLanguage
        ],
        requestBody: {
            parameterPath: {
                immutabilityPeriodSinceCreationInDays: "immutabilityPeriodSinceCreationInDays"
            },
            mapper: ImmutabilityPolicy
        },
        responses: {
            200: {
                bodyMapper: ImmutabilityPolicy,
                headersMapper: BlobContainersExtendImmutabilityPolicyHeaders
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$6
    };
    var leaseOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/default/containers/{containerName}/lease",
        urlParameters: [
            resourceGroupName,
            accountName,
            containerName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: [
                "options",
                "parameters"
            ],
            mapper: LeaseContainerRequest
        },
        responses: {
            200: {
                bodyMapper: LeaseContainerResponse
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$6
    };
    var listNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ListContainerItems
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$6
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var packageName = "@azure/arm-storage";
    var packageVersion = "9.0.1";
    var StorageManagementClientContext = /** @class */ (function (_super) {
        __extends(StorageManagementClientContext, _super);
        /**
         * Initializes a new instance of the StorageManagementClient class.
         * @param credentials Credentials needed for the client to connect to Azure.
         * @param subscriptionId The ID of the target subscription.
         * @param [options] The parameter options
         */
        function StorageManagementClientContext(credentials, subscriptionId, options) {
            var _this = this;
            if (credentials == undefined) {
                throw new Error('\'credentials\' cannot be null.');
            }
            if (subscriptionId == undefined) {
                throw new Error('\'subscriptionId\' cannot be null.');
            }
            if (!options) {
                options = {};
            }
            if (!options.userAgent) {
                var defaultUserAgent = msRestAzure.getDefaultUserAgentValue();
                options.userAgent = packageName + "/" + packageVersion + " " + defaultUserAgent;
            }
            _this = _super.call(this, credentials, options) || this;
            _this.apiVersion = '2019-04-01';
            _this.acceptLanguage = 'en-US';
            _this.longRunningOperationRetryTimeout = 30;
            _this.baseUri = options.baseUri || _this.baseUri || "https://management.azure.com";
            _this.requestContentType = "application/json; charset=utf-8";
            _this.credentials = credentials;
            _this.subscriptionId = subscriptionId;
            if (options.acceptLanguage !== null && options.acceptLanguage !== undefined) {
                _this.acceptLanguage = options.acceptLanguage;
            }
            if (options.longRunningOperationRetryTimeout !== null && options.longRunningOperationRetryTimeout !== undefined) {
                _this.longRunningOperationRetryTimeout = options.longRunningOperationRetryTimeout;
            }
            return _this;
        }
        return StorageManagementClientContext;
    }(msRestAzure.AzureServiceClient));

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var StorageManagementClient = /** @class */ (function (_super) {
        __extends(StorageManagementClient, _super);
        /**
         * Initializes a new instance of the StorageManagementClient class.
         * @param credentials Credentials needed for the client to connect to Azure.
         * @param subscriptionId The ID of the target subscription.
         * @param [options] The parameter options
         */
        function StorageManagementClient(credentials, subscriptionId, options) {
            var _this = _super.call(this, credentials, subscriptionId, options) || this;
            _this.operations = new Operations(_this);
            _this.skus = new Skus(_this);
            _this.storageAccounts = new StorageAccounts(_this);
            _this.usages = new Usages(_this);
            _this.managementPolicies = new ManagementPolicies(_this);
            _this.blobServices = new BlobServices(_this);
            _this.blobContainers = new BlobContainers(_this);
            return _this;
        }
        return StorageManagementClient;
    }(StorageManagementClientContext));

    exports.StorageManagementClient = StorageManagementClient;
    exports.StorageManagementClientContext = StorageManagementClientContext;
    exports.StorageManagementModels = index;
    exports.StorageManagementMappers = mappers;
    exports.Operations = Operations;
    exports.Skus = Skus;
    exports.StorageAccounts = StorageAccounts;
    exports.Usages = Usages;
    exports.ManagementPolicies = ManagementPolicies;
    exports.BlobServices = BlobServices;
    exports.BlobContainers = BlobContainers;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=arm-storage.js.map
